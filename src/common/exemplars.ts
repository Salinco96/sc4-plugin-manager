import { TGI } from "./dbpf"

export interface ExemplarData {
  isCohort: boolean
  parentCohortId: TGI
  properties: {
    [propertyId in number]?: ExemplarProperty
  }
}

export interface ExemplarDataPatch {
  parentCohortId?: TGI
  properties?: {
    [propertyId in string]?: ExemplarPropertyValue | null
  }
}

export interface ExemplarPropertyInfo {
  desc?: string
  id: number
  name: string
  type?: ExemplarValueType
}

export type ExemplarProperty<T extends ExemplarValueType = ExemplarValueType> = {
  [S in T]: {
    id: number
    info?: ExemplarPropertyInfo
    type: T
    value: ExemplarPropertyValue<T>
  }
}[T]

export type ExemplarPropertyValue<
  T extends ExemplarValueType = ExemplarValueType,
  Multi extends boolean = boolean,
> = {
  [ExemplarValueType.UInt8]: Multi extends true ? number[] : number
  [ExemplarValueType.UInt16]: Multi extends true ? number[] : number
  [ExemplarValueType.UInt32]: Multi extends true ? number[] : number
  [ExemplarValueType.SInt32]: Multi extends true ? number[] : number
  [ExemplarValueType.SInt64]: Multi extends true ? number[] : number
  [ExemplarValueType.Float32]: Multi extends true ? number[] : number
  [ExemplarValueType.Bool]: Multi extends true ? boolean[] : boolean
  [ExemplarValueType.String]: Multi extends true ? string : never
}[T]

export enum ExemplarValueType {
  UInt8 = 0x100,
  UInt16 = 0x200,
  UInt32 = 0x300,
  SInt32 = 0x700,
  SInt64 = 0x800,
  Float32 = 0x900,
  Bool = 0xb00,
  String = 0xc00,
}

export enum PropertyKeyType {
  Single = 0x00,
  Multi = 0x80,
}

export const ExemplarProperties: {
  [id in number]?: ExemplarPropertyInfo
} = {
  0x00000000: {
    id: 0x00000000,
    name: "MiscType1",
    desc: "Function, values, & DataType: varies from Exemplar file to Exemplar file",
  },
  0x00000010: {
    id: 0x00000010,
    name: "Exemplar Type",
    type: ExemplarValueType.UInt32,
    desc: "Used by property editors to group exemplars and filter properties",
  },
  0x00000011: {
    id: 0x00000011,
    name: "Exemplar Interface ID",
    type: ExemplarValueType.UInt32,
    desc: "A GZGUID that identifies a class interface",
  },
  0x00000012: {
    id: 0x00000012,
    name: "Exemplar Class ID",
    type: ExemplarValueType.UInt32,
    desc: "A GZCLSID that identifies a class implementation",
  },
  0x00000020: {
    id: 0x00000020,
    name: "Exemplar Name",
    type: ExemplarValueType.String,
    desc: "Identifies this exemplar in property editors",
  },
  0x00000021: {
    id: 0x00000021,
    name: "Exemplar ID",
    type: ExemplarValueType.UInt32,
    desc: "Identifies this exemplar so that C++ code and other exemplars can refer to it",
  },
  0x00004005: {
    id: 0x00004005,
    name: "SubmenuKey: Networks: Highway Ramps Menu",
    type: ExemplarValueType.UInt32,
    desc: "Controls which Menu the Tool belongs in. Some tools are attached to the menu that they're in",
  },
  0x00004001: {
    id: 0x00004001,
    name: "SubmenuKey: Networks: Rails Depots Menu",
    type: ExemplarValueType.UInt32,
    desc: "Controls which Menu the Tool belongs in. Some tools are attached to the menu that they're in",
  },
  0x00004002: {
    id: 0x00004002,
    name: "SubmenuKey: Networks: Miscellaneous Transport Menu",
    type: ExemplarValueType.UInt32,
    desc: "Controls which Menu the Tool belongs in. Some tools are attached to the menu that they're in",
  },
  0x00004000: {
    id: 0x00004000,
    name: "SubmenuKey: Networks: Road Menu",
    type: ExemplarValueType.UInt32,
    desc: "Controls which Menu the Tool belongs in. Some tools are attached to the menu that they're in",
  },
  0x00004003: {
    id: 0x00004003,
    name: "SubmenuKey: Utilities: Power Plant Menu",
    type: ExemplarValueType.UInt32,
    desc: "Controls which Menu the Tool belongs in. Some tools are attached to the menu that they're in",
  },
  0x00004004: {
    id: 0x00004004,
    name: "SubmenuKey: Utilities: Water Plant Menu",
    type: ExemplarValueType.UInt32,
    desc: "Controls which Menu the Tool belongs in. Some tools are attached to the menu that they're in",
  },
  0x07af514b: {
    id: 0x07af514b,
    name: "ResMan Registered Groups",
    type: ExemplarValueType.UInt32,
    desc: "Specifies a Group ID registered with the resource manager",
  },
  0x07b36c71: {
    id: 0x07b36c71,
    name: "MaxNetworkSlopeChange",
    type: ExemplarValueType.Float32,
    desc: "Range: [0.0 - 90.0]",
  },
  0x083dc35b: {
    id: 0x083dc35b,
    name: "FloraParameters",
    type: ExemplarValueType.Float32,
    desc: "FloraParametersProperty",
  },
  0x083dc487: {
    id: 0x083dc487,
    name: "FloraPreferences",
    type: ExemplarValueType.Float32,
    desc: "FloraPreferencesProperty",
  },
  0x083de16f: {
    id: 0x083de16f,
    name: "FloraCursor",
    type: ExemplarValueType.UInt32,
    desc: "FloraCursorProperty",
  },
  0x085489c7: {
    id: 0x085489c7,
    name: "RandomSeedingCellsPerMonth",
    type: ExemplarValueType.UInt32,
    desc: "RandomSeedingCellsPerMonth",
  },
  0x085489c8: {
    id: 0x085489c8,
    name: "Shadow Texture ID",
    type: ExemplarValueType.UInt32,
    desc: "ID of FSH texture to use for flora's shadow",
  },
  0x085489c9: {
    id: 0x085489c9,
    name: "Shadow offset",
    type: ExemplarValueType.Float32,
    desc: "Offset of shadow from object centre",
  },
  0x085489ca: {
    id: 0x085489ca,
    name: "Shadow size",
    type: ExemplarValueType.Float32,
    desc: "Size of shadow",
  },
  0x085489cb: {
    id: 0x085489cb,
    name: "Shadow colour",
    type: ExemplarValueType.Float32,
    desc: "Colour of shadow",
  },
  0x085489cc: {
    id: 0x085489cc,
    name: "Shadow strength",
    type: ExemplarValueType.Float32,
    desc: "Strength of flora shadows",
  },
  0x085489cd: {
    id: 0x085489cd,
    name: "Shadow threshold",
    type: ExemplarValueType.Float32,
    desc: "Mask threshold of flora shadows",
  },
  0x085489ce: {
    id: 0x085489ce,
    name: "Sun direction",
    type: ExemplarValueType.Float32,
    desc: "Sun direction in degrees, clockwise from Z axis",
  },
  0x085489cf: {
    id: 0x085489cf,
    name: "Sun pitch",
    type: ExemplarValueType.Float32,
    desc: "Sun pitch in degrees, up from XZ plane",
  },
  0x085489d0: {
    id: 0x085489d0,
    name: "Hill shadow strength",
    type: ExemplarValueType.Float32,
    desc: "Strength of hill shadows",
  },
  0x085489d1: {
    id: 0x085489d1,
    name: "Hill shadow warp",
    type: ExemplarValueType.Float32,
    desc: "Can be used to bend shadows downwards (below 1) or upwards (above 1)",
  },
  0x085489d2: {
    id: 0x085489d2,
    name: "Hill shadow fade distance",
    type: ExemplarValueType.Float32,
    desc: "Depth below the hill shadow at which object shadows fade to nothingness",
  },
  0x08f55dc0: {
    id: 0x08f55dc0,
    name: "Fire Station, Centre Strength",
    type: ExemplarValueType.SInt32,
    desc: "(in Fire Protection units)",
  },
  0x08f55dc1: {
    id: 0x08f55dc1,
    name: "Fire Station, Exterior Strength",
    type: ExemplarValueType.SInt32,
    desc: "(in Fire Protection units)",
  },
  0x08f55dc2: {
    id: 0x08f55dc2,
    name: "Fire Station, Radius",
    type: ExemplarValueType.Float32,
    desc: "(in meters)",
  },
  0x08f55dc5: {
    id: 0x08f55dc5,
    name: "Fire Station, Total Dispatches",
    type: ExemplarValueType.SInt32,
    desc: "(number of trucks this station can send)",
  },
  0x08f79b8e: {
    id: 0x08f79b8e,
    name: "Air Effect",
    type: ExemplarValueType.Float32,
    desc: "Effect (multiplier) this ordinance has on air pollution",
  },
  0x090e0a9f: {
    id: 0x090e0a9f,
    name: "Budget: MinAllowableFunds",
    type: ExemplarValueType.SInt64,
    desc: "The minimum before you are bankrupt. Default is -100,000",
  },
  0x090e0aac: {
    id: 0x090e0aac,
    name: "Budget: MaxLoans",
    type: ExemplarValueType.UInt8,
    desc: "The maximum number of outstanding Loans that is allowed",
  },
  0x0911e117: {
    id: 0x0911e117,
    name: "Power Reduction Effect",
    type: ExemplarValueType.Float32,
    desc: "Factor by which this ordinance reduces power consumption",
  },
  0x0911e2e6: {
    id: 0x0911e2e6,
    name: "Utility Strike Response Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps difference between actual % funding and % ideal funding to % chance of a utility strike",
  },
  0x0911e2e7: {
    id: 0x0911e2e7,
    name: "Age to maintenance cost multiplier response curve",
    type: ExemplarValueType.Float32,
    desc: "Converts the current age degradation of the plant to a multiplier for maintenance cost",
  },
  0x0911e2e8: {
    id: 0x0911e2e8,
    name: "Funding percentage to decay rate multiplier response curve",
    type: ExemplarValueType.Float32,
    desc: "Multiples the rate of aging based on funding level",
  },
  0x0911e2e9: {
    id: 0x0911e2e9,
    name: "Usage percentage to decay rate multiplier response curve",
    type: ExemplarValueType.Float32,
    desc: "Multiples the rate of aging based on usage level",
  },
  0x09122027: {
    id: 0x09122027,
    name: "Utility Strike Efficiency %",
    type: ExemplarValueType.Float32,
    desc: "Efficiency of utility buildings will drop to this % during a strike",
  },
  0x09132de8: {
    id: 0x09132de8,
    name: "Power pole monthly upkeep",
    type: ExemplarValueType.SInt64,
    desc: "Cost of maintaining this power pole",
  },
  0x09134be2: {
    id: 0x09134be2,
    name: "Max water pollution value for UI",
    type: ExemplarValueType.UInt32,
    desc: "Maximum water pollution value reported to the UI, must be less than 32767",
  },
  0x0913519b: {
    id: 0x0913519b,
    name: "Garbage Pollution Threshold",
    type: ExemplarValueType.UInt32,
    desc: "When a cell has this much garbage, it's considered polluted",
  },
  0x091351ae: {
    id: 0x091351ae,
    name: "Water Pollution Threshold",
    type: ExemplarValueType.UInt32,
    desc: "When a cell has this much water pollution, it's considered polluted",
  },
  0x09135479: {
    id: 0x09135479,
    name: "Garbage decomposition amount",
    type: ExemplarValueType.UInt32,
    desc: "Number of garbage units that decompose (i.e., disappear) each month",
  },
  0x09135482: {
    id: 0x09135482,
    name: "Garbage UI scaling factor",
    type: ExemplarValueType.Float32,
    desc: "Scaling factor to convert simulator garbage units to whatever units the UI displays (tons, Kgs)",
  },
  0x091b42a2: {
    id: 0x091b42a2,
    name: "Hospital Coverage Radius",
    type: ExemplarValueType.Float32,
    desc: "Radius of this hospital's coverage, in meters",
  },
  0x0929c439: {
    id: 0x0929c439,
    name: "HQ Decay",
    type: ExemplarValueType.Float32,
    desc: "Amount by which HQ decays each month",
  },
  0x0929cc30: {
    id: 0x0929cc30,
    name: "Medium Wealth Average Age",
    type: ExemplarValueType.UInt8,
    desc: "Average age assigned to new Medium Wealth residents",
  },
  0x0929cc36: {
    id: 0x0929cc36,
    name: "High Wealth Average Age",
    type: ExemplarValueType.UInt8,
    desc: "Average age assigned to new High Wealth residents",
  },
  0x0929cc65: {
    id: 0x0929cc65,
    name: "Medium Wealth EQ",
    type: ExemplarValueType.UInt8,
    desc: "EQ assigned to new Medium Wealth residents",
  },
  0x092d909b: {
    id: 0x092d909b,
    name: "Health Capacity Effect",
    type: ExemplarValueType.Float32,
    desc: "Percentage (from 0 to 200%) by which this ordinance affects the capacity of hospitals",
  },
  0x096e5653: {
    id: 0x096e5653,
    name: "Underground Intersection Height",
    type: ExemplarValueType.Float32,
    desc: "Default height above trench floor to place intersections",
  },
  0x096e7574: {
    id: 0x096e7574,
    name: "Class ID: Watercraft",
    type: ExemplarValueType.UInt32,
  },
  0x097f4c4e: {
    id: 0x097f4c4e,
    name: "Unwatered Terrain Colour",
    type: ExemplarValueType.UInt8,
    desc: "RGBA colour for unwatered terrain cells in pipe view",
  },
  0x098b25c8: {
    id: 0x098b25c8,
    name: "Max cells between power poles",
    type: ExemplarValueType.UInt32,
    desc: "The maximum number of cells allowed between power poles",
  },
  0x098b27d0: {
    id: 0x098b27d0,
    name: "Minimum power line height",
    type: ExemplarValueType.Float32,
    desc: "The minimum distance allowed between a power line and the terrain",
  },
  0x099afacd: {
    id: 0x099afacd,
    name: "Bulldoze Cost",
    type: ExemplarValueType.SInt64,
    desc: "Bulldoze cost to delete the building.",
  },
  0x09b00b2b: {
    id: 0x09b00b2b,
    name: "Particle Life",
    type: ExemplarValueType.Float32,
    desc: "Total lifetime of fog particle (ms)",
  },
  0x09b00b2c: {
    id: 0x09b00b2c,
    name: "Wind Factor",
    type: ExemplarValueType.Float32,
    desc: "Wind power coefficient (v = wind * c)",
  },
  0x09b00b2d: {
    id: 0x09b00b2d,
    name: "Terrain Factor",
    type: ExemplarValueType.Float32,
    desc: "Terrain gradient coefficient (effect of hills)",
  },
  0x09b00b2e: {
    id: 0x09b00b2e,
    name: "Max Particle Rate",
    type: ExemplarValueType.Float32,
    desc: "Max fog creation rate (particles/sec)",
  },
  0x09b00b2f: {
    id: 0x09b00b2f,
    name: "Particle FOV",
    type: ExemplarValueType.Float32,
    desc: "Angular window centred around anti-wind direction in which fog appears (degrees)",
  },
  0x09b00b30: {
    id: 0x09b00b30,
    name: "Float Altitude",
    type: ExemplarValueType.Float32,
    desc: "Floating distance of fog above terrain",
  },
  0x09b00b31: {
    id: 0x09b00b31,
    name: "Max Opacity",
    type: ExemplarValueType.Float32,
    desc: "Maximum alpha value for particles (0-255)",
  },
  0x09b00b32: {
    id: 0x09b00b32,
    name: "Fade-in Time",
    type: ExemplarValueType.Float32,
    desc: "Initial portion of particle life for fade-in (ms)",
  },
  0x09b00b33: {
    id: 0x09b00b33,
    name: "Fade-out Time",
    type: ExemplarValueType.Float32,
    desc: "Terminal portion of particle life for fade-out (ms)",
  },
  0x09b00b34: {
    id: 0x09b00b34,
    name: "Particle Count",
    type: ExemplarValueType.UInt32,
    desc: "Maximum number of fog particles",
  },
  0x09b00b35: {
    id: 0x09b00b35,
    name: "Fog Rate by Hour",
    type: ExemplarValueType.Float32,
    desc: "Fraction (0-1) of maximum particle rate by hour of the clock",
  },
  0x09b6d6ae: {
    id: 0x09b6d6ae,
    name: "Nighttime global colour",
    type: ExemplarValueType.Float32,
    desc: "Global lighting value for night time -- everything gets multiplied by this.",
  },
  0x09b73421: {
    id: 0x09b73421,
    name: "24HourClockNightBegin",
    type: ExemplarValueType.UInt32,
    desc: "Specifies the time (0-23) that night time graphically begins.",
  },
  0x09b73422: {
    id: 0x09b73422,
    name: "24HourClockNightEnd",
    type: ExemplarValueType.UInt32,
    desc: "Specifies the time (0-23) that night time graphically ends.",
  },
  0x09c2aef0: {
    id: 0x09c2aef0,
    name: "TextureBlendStrength",
    type: ExemplarValueType.Float32,
    desc: "Higher this value, the more weighage this texture gets while blending with others",
  },
  0x09c2aef3: {
    id: 0x09c2aef3,
    name: "TextureSpreadCurve_Z0",
    type: ExemplarValueType.Float32,
    desc: "Specifies how the texture strength falls off with distance",
  },
  0x09c2aef4: {
    id: 0x09c2aef4,
    name: "TextureSpreadCurve_Z1",
    type: ExemplarValueType.Float32,
    desc: "Specifies how the texture strength falls off with distance",
  },
  0x09c2aef5: {
    id: 0x09c2aef5,
    name: "TextureSpreadCurve_Z2",
    type: ExemplarValueType.Float32,
    desc: "Specifies how the texture strength falls off with distance",
  },
  0x09c2aef6: {
    id: 0x09c2aef6,
    name: "TextureSpreadCurve_Z3",
    type: ExemplarValueType.Float32,
    desc: "Specifies how the texture strength falls off with distance",
  },
  0x09c2aef7: {
    id: 0x09c2aef7,
    name: "TextureSpreadCurve_Z4",
    type: ExemplarValueType.Float32,
    desc: "Specifies how the texture strength falls off with distance",
  },
  0x09c80416: {
    id: 0x09c80416,
    name: "Model Resource Key",
    type: ExemplarValueType.UInt32,
    desc: "References Model file TGI ID",
  },
  0x09c80417: {
    id: 0x09c80417,
    name: "Auxiliary Model 1 Key (headlights)",
    type: ExemplarValueType.UInt32,
    desc: "References TGI ID for headlight/taillight model",
  },
  0x09f00e59: {
    id: 0x09f00e59,
    name: "Ignore lot state effects",
    type: ExemplarValueType.Bool,
    desc: "If set to true, specifies that the prop should ignore lot state effects (distressed, abandoned, etc.).",
  },
  0x0a10c772: {
    id: 0x0a10c772,
    name: "Water Pollution Effect Strength Curve",
    type: ExemplarValueType.Float32,
    desc: "Water Pollution Average Level to Water Pollution Decal Alpha curve",
  },
  0x0a10c773: {
    id: 0x0a10c773,
    name: "Air Pollution Effect Strength Curve",
    type: ExemplarValueType.Float32,
    desc: "Air Pollution Average Level to Air Pollution Particle Emission Rage curve",
  },
  0x0a10c774: {
    id: 0x0a10c774,
    name: "Radiation Pollution Effect Strength Curve",
    type: ExemplarValueType.Float32,
    desc: "Radiation Pollution Average Level to Radiation Effect Strength curve",
  },
  0x0a10c775: {
    id: 0x0a10c775,
    name: "Garbage Pollution Effect Strength Curve",
    type: ExemplarValueType.Float32,
    desc: "Radiation Pollution Average Level to Radiation Effect Strength curve",
  },
  0x0a25896b: {
    id: 0x0a25896b,
    name: "Audio:ZoomScoreEnable",
    type: ExemplarValueType.UInt8,
    desc: "A bit field describing which zoom levels the audio score is active for.",
  },
  0x0a2eced8: {
    id: 0x0a2eced8,
    name: "Power Pole Demolition Cost",
    type: ExemplarValueType.Float32,
    desc: "Cost to demolish a power pole. Lines are ignored",
  },
  0x0a36afa2: {
    id: 0x0a36afa2,
    name: "SFX:AlarmSoundId",
    type: ExemplarValueType.UInt32,
    desc: "GUID of sound played when alarm goes off",
  },
  0x0a36f410: {
    id: 0x0a36f410,
    name: "Audio:AmbienceAttentionSpanRadii",
    type: ExemplarValueType.Float32,
    desc: "Radii for attention per zoom",
  },
  0x0a3fb9a8: {
    id: 0x0a3fb9a8,
    name: "Budget: LoanPaybackMonths",
    type: ExemplarValueType.UInt32,
    desc: "Number of months to payback a Loan",
  },
  0x0a410ba0: {
    id: 0x0a410ba0,
    name: "Audio:ORFilters",
    type: ExemplarValueType.UInt32,
    desc: "Filter GUIDs any of which must be satisfied",
  },
  0x0a4168e1: {
    id: 0x0a4168e1,
    name: "Audio:(Occupant)Group Radius",
    type: ExemplarValueType.Float32,
    desc: "Size of glob for grouping single layer, or occupant",
  },
  0x0a469353: {
    id: 0x0a469353,
    name: "ProfitResponseCurve",
    type: ExemplarValueType.Float32,
    desc: "Maps supply-over-demand to profit factor",
  },
  0x0a4bc742: {
    id: 0x0a4bc742,
    name: "VolcanoLavaTotalLavaTimeInSecs",
    type: ExemplarValueType.Float32,
    desc: "Time In Seconds until lava flowing and solidification continues",
  },
  0x0a4bc752: {
    id: 0x0a4bc752,
    name: "VolcanoLavaOrificeRadius",
    type: ExemplarValueType.UInt32,
    desc: "Orifice Size of Lava Flow in Metres",
  },
  0x0a4c13cb: {
    id: 0x0a4c13cb,
    name: "SFX:Ambience Decayed Sound",
    type: ExemplarValueType.UInt32,
    desc: "GUID of sound played when building is around and damaged or decayed",
  },
  0x0a51188a: {
    id: 0x0a51188a,
    name: "Freight Train Density Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps city population to a multiplier (0.0-1.0) for freight train density",
  },
  0x0a53b2f9: {
    id: 0x0a53b2f9,
    name: "Health Funding to Coverage Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps difference between actual % funding and % ideal funding to % coverage",
  },
  0x0a53fd32: {
    id: 0x0a53fd32,
    name: "Sims Per Train Car",
    type: ExemplarValueType.UInt32,
    desc: "How many trips are satisfied by each train car. Determines train length.",
  },
  0x0a56212a: {
    id: 0x0a56212a,
    name: "Audio:CellGroupRadius",
    type: ExemplarValueType.Float32,
    desc: "Size of glob for grouping cells",
  },
  0x0a5f596b: {
    id: 0x0a5f596b,
    name: "Power line placement cost",
    type: ExemplarValueType.Float32,
    desc: "The cost of placing each cell with wire",
  },
  0x0a751675: {
    id: 0x0a751675,
    name: "PropInterval",
    type: ExemplarValueType.UInt32,
    desc: "How often the prop/effect becomes active, in days. Applies once PropStartingDate is active",
  },
  0x0a902434: {
    id: 0x0a902434,
    name: "SFX:Query Sound Abandoned",
    type: ExemplarValueType.UInt32,
    desc: "GUID of the sound to play when the occupant is clicked on with query tool and is abandoned.",
  },
  0x0a93036f: {
    id: 0x0a93036f,
    name: "SFX:Demolition Sound",
    type: ExemplarValueType.UInt32,
    desc: "GUID of the sound to play when an occupant is demolished",
  },
  0x0a946a57: {
    id: 0x0a946a57,
    name: "Audio:Max Playing One-Shots",
    type: ExemplarValueType.UInt32,
    desc: "Max playing one-shots",
  },
  0x0a9599bf: {
    id: 0x0a9599bf,
    name: "Audio:VolumeDecayLimit",
    type: ExemplarValueType.Float32,
    desc: "Max amount of full volume to change down per second",
  },
  0x0abfc024: {
    id: 0x0abfc024,
    name: "AppearanceZoomsFlag",
    type: ExemplarValueType.UInt32,
    desc: "Flag specifying the zooms in which the model should appear",
  },
  0x0b579c21: {
    id: 0x0b579c21,
    name: "MicroSecsPerTimeSlice",
    type: ExemplarValueType.UInt32,
    desc: "Secs of active time for background thread",
  },
  0x0b579c22: {
    id: 0x0b579c22,
    name: "SleepMicroSecsAfterTimeSlice",
    type: ExemplarValueType.UInt32,
    desc: "Secs of sleep time for background thread",
  },
  0x0b579c23: {
    id: 0x0b579c23,
    name: "ProcessCellsMaxTimeSliceMicroSecs",
    type: ExemplarValueType.UInt32,
    desc: "Sec budget for processing cells in main thread",
  },
  0x0b579c24: {
    id: 0x0b579c24,
    name: "OperationQuantaForOccupiedCell",
    type: ExemplarValueType.Float32,
  },
  0x0b579c25: {
    id: 0x0b579c25,
    name: "OperationQuantaForEmptyCell",
    type: ExemplarValueType.Float32,
  },
  0x0b579c26: {
    id: 0x0b579c26,
    name: "OperationQuantaBeforeTimerCall",
    type: ExemplarValueType.Float32,
  },
  0x0b579c27: {
    id: 0x0b579c27,
    name: "DisableBackgroundLoader",
    type: ExemplarValueType.Bool,
    desc: "if true, background loader is disabled",
  },
  0x0b579c28: {
    id: 0x0b579c28,
    name: "MinLoadRadius",
    type: ExemplarValueType.UInt32,
    desc: "Mininum extra radius to load (by zoom level)",
  },
  0x0b579c29: {
    id: 0x0b579c29,
    name: "ExtraLoadRadiusPerMeg",
    type: ExemplarValueType.Float32,
    desc: "extra radius to load per free meg (by zoom level)",
  },
  0x0bd86fd3: {
    id: 0x0bd86fd3,
    name: "Ferry Terminal Type",
    type: ExemplarValueType.UInt8,
    desc: "Type of ferry terminal",
  },
  0x0bd86fd4: {
    id: 0x0bd86fd4,
    name: "Funding to Damage Acceleration Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps funding (as percentage) to road/rail damage acceleration",
  },
  0x0bd86fd5: {
    id: 0x0bd86fd5,
    name: "Rail Damage Accident Factor",
    type: ExemplarValueType.Float32,
    desc: "Probability (0 to 1.0) that a train going over a rail pothole will cause derailment",
  },
  0x0bfa15a5: {
    id: 0x0bfa15a5,
    name: "UDIProp:AirplaneHangerType",
    type: ExemplarValueType.UInt8,
    desc: "Property is a key that controls what particular kind of Prop should appear. Some UDIProp Keys are tied in directly with UDI missions",
  },
  0x0bfc0a4c: {
    id: 0x0bfc0a4c,
    name: "Transit Switch Fare",
    type: ExemplarValueType.Float32,
    desc: "Simoleon charge per traveller to enter the switch",
  },
  0x0c032488: {
    id: 0x0c032488,
    name: "Budget:Initial Tax Rate",
    type: ExemplarValueType.Float32,
    desc: "Starting tax rate for all developer types, indexed by difficulty type",
  },
  0x0c0afdd7: {
    id: 0x0c0afdd7,
    name: "Fire Station:Total Plane Dispatches",
    type: ExemplarValueType.SInt32,
    desc: "(number of planes this station can send)",
  },
  0x0caaaeb8: {
    id: 0x0caaaeb8,
    name: "Customers/Traffic Noise Coefficient",
    type: ExemplarValueType.Float32,
    desc: "In an area around the lot in question, the traffic on the network tile with the highest morning traffic volume is added to the traffic on the network tile with the highest evening traffic volume, and then multiplied by this coefficient to generate a 0-255 value which is then used as a desirability factor for R and C zones, and shows up in the general query as low, medium, or high under Traffic Noise or Customers",
  },
  0x27812810: {
    id: 0x27812810,
    name: "Occupant Size",
    type: ExemplarValueType.Float32,
    desc: "In meters: X-Width, height, Z-Width",
  },
  0x27812820: {
    id: 0x27812820,
    name: "ResourceKeyType0",
    type: ExemplarValueType.UInt32,
    desc: "Specifies 1 model key for all Z/R",
  },
  0x27812821: {
    id: 0x27812821,
    name: "ResourceKeyType1",
    type: ExemplarValueType.UInt32,
    desc: "Specifies 1 model key for each Z/R",
  },
  0x27812822: {
    id: 0x27812822,
    name: "ResourceKeyType2",
    type: ExemplarValueType.UInt32,
    desc: "A unique instance ID for each zoom and rotation.",
  },
  0x27812823: {
    id: 0x27812823,
    name: "ResourceKeyType3",
    type: ExemplarValueType.UInt32,
    desc: "A unique instance ID for each zoom",
  },
  0x27812824: {
    id: 0x27812824,
    name: "ResourceKeyType4",
    type: ExemplarValueType.UInt32,
    desc: "Multi-model, multi state",
  },
  0x27812825: {
    id: 0x27812825,
    name: "ResourceKeyType5",
    type: ExemplarValueType.UInt32,
    desc: "Specifies 1 model key for each Z/R/state",
  },
  0x27812832: {
    id: 0x27812832,
    name: "Wealth",
    type: ExemplarValueType.UInt8,
    desc: "Wealth represented by the building",
  },
  0x27812833: {
    id: 0x27812833,
    name: "Purpose",
    type: ExemplarValueType.UInt8,
    desc: "1=R. 2=CS.3=CO.5=IR.6=ID.7=IM.8=IHT.",
  },
  0x27812834: {
    id: 0x27812834,
    name: "Capacity Satisfied",
    type: ExemplarValueType.UInt32,
    desc: "Paired values: First value is the Developer ID. 2nd value is how much capacity this building offers to that Developer. R$:1010.R$$:1020.R$$$:1030.CS$:3110.CS$$:3120.CS$$$:3130.CO$$:3320.CO$$$:3330.IResource:4100.ID:4200.IM:4300.IHT:4400. May be others",
  },
  0x27812836: {
    id: 0x27812836,
    name: "Allow Joint Occupancy",
    type: ExemplarValueType.Bool,
    desc: "if true, different types can occupy the building simultaneously",
  },
  0x27812837: {
    id: 0x27812837,
    name: "Growth Stage",
    type: ExemplarValueType.UInt8,
    desc: "Similar to density, but with more granularity. The smallest (1) is the first to appear",
  },
  0x2781283f: {
    id: 0x2781283f,
    name: "Monopoly Piece",
    type: ExemplarValueType.Bool,
    desc: "If true, this building is for debug and tuning use only",
  },
  0x27812840: {
    id: 0x27812840,
    name: "Demand Satisfied",
    type: ExemplarValueType.UInt32,
    desc: "Paired values: First value is Demand ID. 2nd Value is how much plopping this building supplies the resource",
  },
  0x27812841: {
    id: 0x27812841,
    name: "Demand Created",
    type: ExemplarValueType.UInt32,
    desc: "Paired values: First value is Demand ID. 2nd Value is how much plopping this building increases the demand for the resource",
  },
  0x27812842: {
    id: 0x27812842,
    name: "Demand Satisfied (float)",
    type: ExemplarValueType.Float32,
    desc: "IDs from Demand Satisfied are associated to these values instead of the Uint32 values",
  },
  0x27812843: {
    id: 0x27812843,
    name: "Demand Created (float)",
    type: ExemplarValueType.Float32,
    desc: "IDs from Demand Created are associated to these values instead of the Uint32 values",
  },
  0x27812844: {
    id: 0x27812844,
    name: "Demand Is Variable",
    type: ExemplarValueType.Bool,
    desc: "if true, the demand simulator ignores demand created and demand satisfied until instructed",
  },
  0x2781284f: {
    id: 0x2781284f,
    name: "Landmark Effect",
    type: ExemplarValueType.SInt32,
    desc: "magnitude, radius",
  },
  0x27812850: {
    id: 0x27812850,
    name: "Park Effect",
    type: ExemplarValueType.SInt32,
    desc: "magnitude, radius",
  },
  0x27812851: {
    id: 0x27812851,
    name: "Pollution at centre",
    type: ExemplarValueType.SInt32,
    desc: "Pollution generated: air, water, garbage, radiation (at centre of the area of effect)",
  },
  0x27812852: {
    id: 0x27812852,
    name: "Power Generated",
    type: ExemplarValueType.UInt32,
    desc: "Amount of power generated",
  },
  0x27812853: {
    id: 0x27812853,
    name: "Power Plant Type",
    type: ExemplarValueType.UInt32,
    desc: "Type of power plant",
  },
  0x27812854: {
    id: 0x27812854,
    name: "Power Consumed",
    type: ExemplarValueType.UInt32,
    desc: "Amount of power consumed",
  },
  0x27812870: {
    id: 0x27812870,
    name: "Building/prop Family",
    type: ExemplarValueType.UInt32,
    desc: "The family that this building or prop is a member of",
  },
  0x27812920: {
    id: 0x27812920,
    name: "ResourceKeyTypeMisc",
    type: ExemplarValueType.UInt32,
    desc: "References ATV/AVP file(s)",
  },
  0x27812921: {
    id: 0x27812921,
    name: "ResourceKeyType1xm",
    type: ExemplarValueType.UInt32,
    desc: "Specifies 1 model key for each Z/R",
  },
  0x27812922: {
    id: 0x27812922,
    name: "ResourceKeyType2xm",
    type: ExemplarValueType.UInt32,
    desc: "A unique instance ID for each zoom and rotation.",
  },
  0x27812923: {
    id: 0x27812923,
    name: "ResourceKeyType3xm",
    type: ExemplarValueType.UInt32,
    desc: "A unique instance ID for each zoom",
  },
  0x27812924: {
    id: 0x27812924,
    name: "ResourceKeyType4xm",
    type: ExemplarValueType.UInt32,
    desc: "Multi-model, multi state (see tuning docs)",
  },
  0x27812925: {
    id: 0x27812925,
    name: "ResourceKeyType5xm",
    type: ExemplarValueType.UInt32,
    desc: "Specifies 1 model key for each Z/R/state",
  },
  0x279d1707: {
    id: 0x279d1707,
    name: "MaxSlopeOnNetworkSide",
    type: ExemplarValueType.Float32,
    desc: "Range:[0.0 - 90.0]",
  },
  0x28ebbc30: {
    id: 0x28ebbc30,
    name: "Ordinance ID",
    type: ExemplarValueType.UInt32,
    desc: "ID of this ordinance",
  },
  0x28ebbc32: {
    id: 0x28ebbc32,
    name: "Name String (non-localizable)",
    type: ExemplarValueType.String,
    desc: "Ordinance name",
  },
  0x28ebbc34: {
    id: 0x28ebbc34,
    name: "Description String (non-localizable)",
    type: ExemplarValueType.String,
    desc: "Ordinance description string",
  },
  0x28ebbc35: {
    id: 0x28ebbc35,
    name: "Year Available",
    type: ExemplarValueType.UInt32,
    desc: "Year this ordinance becomes available",
  },
  0x28ebbc36: {
    id: 0x28ebbc36,
    name: "Monthly Chance",
    type: ExemplarValueType.Float32,
    desc: "Monthly chance of this ordinance becoming available",
  },
  0x28ebbc37: {
    id: 0x28ebbc37,
    name: "Enactment Income",
    type: ExemplarValueType.SInt32,
    desc: "Revenue generated by enacting this ordinance",
  },
  0x28ebbc38: {
    id: 0x28ebbc38,
    name: "Retractment Income",
    type: ExemplarValueType.SInt32,
    desc: "Cost of retracting this ordinance",
  },
  0x28ebbc39: {
    id: 0x28ebbc39,
    name: "Monthly Constant Income",
    type: ExemplarValueType.SInt32,
    desc: "Constant part of monthly income generated by this ordinance",
  },
  0x28ebbc3a: {
    id: 0x28ebbc3a,
    name: "Monthly Income Factor",
    type: ExemplarValueType.Float32,
    desc: "Factor applied to ordinance cost basis",
  },
  0x28ebbc3b: {
    id: 0x28ebbc3b,
    name: "Advisor ID",
    type: ExemplarValueType.UInt32,
    desc: "Advisor ID for this ordinance",
  },
  0x28ebbc3c: {
    id: 0x28ebbc3c,
    name: "Income Ordinance",
    type: ExemplarValueType.Bool,
    desc: "True for ordinances that should appear on income part of budget",
  },
  0x28ed0380: {
    id: 0x28ed0380,
    name: "Crime Effect",
    type: ExemplarValueType.Float32,
    desc: "Crime multiplier",
  },
  0x28f42aa0: {
    id: 0x28f42aa0,
    name: "Flammability Effect",
    type: ExemplarValueType.Float32,
    desc: "Effect (multiplier) this ordinance has on flammability",
  },
  0x29121e8b: {
    id: 0x29121e8b,
    name: "Power Min Acceptable Funding %",
    type: ExemplarValueType.Float32,
    desc: "Minimum acceptable percentage for Utility department funding",
  },
  0x2912202e: {
    id: 0x2912202e,
    name: "Utility Strike Duration",
    type: ExemplarValueType.UInt32,
    desc: "Maximum duration of a Utility strike, in months",
  },
  0x291351b5: {
    id: 0x291351b5,
    name: "Radiation Pollution Threshold",
    type: ExemplarValueType.UInt32,
    desc: "When a cell has this much radiation, it's considered polluted",
  },
  0x29136788: {
    id: 0x29136788,
    name: "Monthly Traffic Density Reduction",
    type: ExemplarValueType.Float32,
    desc: "Traffic density multiplied by this each month",
  },
  0x2918949e: {
    id: 0x2918949e,
    name: "Health Funding To Efficiency Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps difference between actual % funding and % ideal funding to % of Health output",
  },
  0x29189beb: {
    id: 0x29189beb,
    name: "Texture floor",
    type: ExemplarValueType.Float32,
    desc: "Brightness floor for terrain textures",
  },
  0x29189bec: {
    id: 0x29189bec,
    name: "Use environment map",
    type: ExemplarValueType.Bool,
    desc: "Whether to use art-supplied environment map for lighting",
  },
  0x29189bed: {
    id: 0x29189bed,
    name: "Test environment map",
    type: ExemplarValueType.Bool,
    desc: "Use test environment map to determine orientation",
  },
  0x29189bee: {
    id: 0x29189bee,
    name: "Terrain shadow amount",
    type: ExemplarValueType.Float32,
    desc: "How much models are shadowed by the terrain",
  },
  0x29189bef: {
    id: 0x29189bef,
    name: "Test terrain shadowing",
    type: ExemplarValueType.Bool,
    desc: "Test model shadowing by terrain",
  },
  0x29189bf0: {
    id: 0x29189bf0,
    name: "Daytime global colour",
    type: ExemplarValueType.Float32,
    desc: "Global lighting value for day time -- everything gets multiplied by this.",
  },
  0x29189bf1: {
    id: 0x29189bf1,
    name: "Flora terrain shadow amount",
    type: ExemplarValueType.Float32,
    desc: "How much flora are shadowed by the terrain",
  },
  0x29189bf2: {
    id: 0x29189bf2,
    name: "Model terrain shadow amount",
    type: ExemplarValueType.Float32,
    desc: "How much models (buildings) are shadowed by the terrain",
  },
  0x29189bf3: {
    id: 0x29189bf3,
    name: "Automata terrain shadow amount",
    type: ExemplarValueType.Float32,
    desc: "How much automata are shadowed by the terrain",
  },
  0x29189bf4: {
    id: 0x29189bf4,
    name: "Atmospheric scattering colour",
    type: ExemplarValueType.Float32,
    desc: "The colour the terrain gets tinted by in the distance",
  },
  0x29189bf5: {
    id: 0x29189bf5,
    name: "Atmospheric scattering",
    type: ExemplarValueType.Float32,
    desc: "How much the terrain gets tinted",
  },
  0x29189bf6: {
    id: 0x29189bf6,
    name: "LightingUpdateDelta",
    type: ExemplarValueType.Float32,
    desc: "The required change in brightness before the terrain gets updated",
  },
  0x29189bf7: {
    id: 0x29189bf7,
    name: "NightThreshold",
    type: ExemplarValueType.Float32,
    desc: "The brightness below which night falls",
  },
  0x2921a9cc: {
    id: 0x2921a9cc,
    name: "Hospital Population vs. Distance",
    type: ExemplarValueType.Float32,
    desc: "Maps distance from hospital to a % of population covered",
  },
  0x29233e8d: {
    id: 0x29233e8d,
    name: "FireProtectionSim:Funding Efficiency Curve",
    type: ExemplarValueType.Float32,
    desc: "See FireProtectionSimulator",
  },
  0x29233e8f: {
    id: 0x29233e8f,
    name: "FireProtectionSim:Max Allowed Funding",
    type: ExemplarValueType.Float32,
    desc: "100.0+ Maximum percentage you can fund a fire station",
  },
  0x29233e94: {
    id: 0x29233e94,
    name: "FireProtectionSim:Strike Efficiency Multiplier",
    type: ExemplarValueType.Float32,
    desc: "0.0-1.0 efficiency multiplier when stations are on strike",
  },
  0x29233e95: {
    id: 0x29233e95,
    name: "FireProtectionSim:Max Strike Duration",
    type: ExemplarValueType.SInt32,
    desc: "Maximum number of days a strike can last",
  },
  0x29233e96: {
    id: 0x29233e96,
    name: "FireProtectionSim:Min Funding To End Strikes",
    type: ExemplarValueType.Float32,
    desc: "0.0-100.0, See FireProtectionSimulator",
  },
  0x29233e98: {
    id: 0x29233e98,
    name: "FireProtectionSim:Strike Response Curve",
    type: ExemplarValueType.Float32,
    desc: "See FireProtectionSimulator",
  },
  0x29233e9a: {
    id: 0x29233e9a,
    name: "Fire Station, Dispatch Centre Strength",
    type: ExemplarValueType.SInt32,
    desc: "(in Fire Protection units)",
  },
  0x29233e9b: {
    id: 0x29233e9b,
    name: "Fire Station, Dispatch Exterior Strength",
    type: ExemplarValueType.SInt32,
    desc: "(in Fire Protection units)",
  },
  0x29233e9c: {
    id: 0x29233e9c,
    name: "Fire Station, Dispatch Radius",
    type: ExemplarValueType.Float32,
    desc: "(in meters)",
  },
  0x29244db5: {
    id: 0x29244db5,
    name: "Flammability",
    type: ExemplarValueType.UInt8,
    desc: "Flammability rating of this occupant",
  },
  0x2929cc6b: {
    id: 0x2929cc6b,
    name: "High Wealth EQ",
    type: ExemplarValueType.UInt8,
    desc: "EQ assigned to new High Wealth residents",
  },
  0x292d8f9b: {
    id: 0x292d8f9b,
    name: "Hospital Type ID List",
    type: ExemplarValueType.UInt32,
    desc: "Variable length list of type IDs for this hospital",
  },
  0x295961f2: {
    id: 0x295961f2,
    name: "RetainingWallPropertyWallTextures",
    type: ExemplarValueType.UInt32,
    desc: "Texture IDs for each zoom level.",
  },
  0x295961f3: {
    id: 0x295961f3,
    name: "RetainingWallPropertyWallTextureSize",
    type: ExemplarValueType.Float32,
    desc: "Size of a texture in meters. Defaults to standard city cell size.",
  },
  0x296e756e: {
    id: 0x296e756e,
    name: "Class ID: Aircraft",
  },
  0x296e88e9: {
    id: 0x296e88e9,
    name: "Wealth Filter",
    type: ExemplarValueType.UInt8,
    desc: "Zone wealth values compatible with automaton (none == can appear around any wealth)",
  },
  0x297f42b7: {
    id: 0x297f42b7,
    name: "Draw Unwatered Terrain Cell Colour",
    type: ExemplarValueType.Bool,
    desc: "Determines whether unwatered terrain cells are coloured in pipe view",
  },
  0x29ab15c0: {
    id: 0x29ab15c0,
    name: "WaterDepthForMaxAlpha",
    type: ExemplarValueType.Float32,
    desc: "At this depth (meters), water becomes opaque",
  },
  0x29ab15c1: {
    id: 0x29ab15c1,
    name: "WaterMinAlpha",
    type: ExemplarValueType.UInt8,
    desc: "Min alpha of water",
  },
  0x29ab15c2: {
    id: 0x29ab15c2,
    name: "WaterDepthToColorGradientFactor",
    type: ExemplarValueType.Float32,
    desc: "Number of pixels in the gradient corresponding to each meter of water depth",
  },
  0x29ab15c3: {
    id: 0x29ab15c3,
    name: "DisplayWaterSurface",
    type: ExemplarValueType.Bool,
    desc: "Enable/Disable the display of water surface",
  },
  0x29ab15c4: {
    id: 0x29ab15c4,
    name: "DisplayTerrainSurface",
    type: ExemplarValueType.Bool,
    desc: "Enable/Disable the display of terrain surface",
  },
  0x29ab15c5: {
    id: 0x29ab15c5,
    name: "WaterNightColorAdjustment",
    type: ExemplarValueType.Float32,
    desc: "Modifications to the RGB of water at night",
  },
  0x29ab15c6: {
    id: 0x29ab15c6,
    name: "CityEdgeLayerHeights",
    type: ExemplarValueType.Float32,
    desc: "Heights (meters) of all but the bottom-most layers on city edge",
  },
  0x29ab15c7: {
    id: 0x29ab15c7,
    name: "CityEdgeBrightnessKludgeFactor",
    type: ExemplarValueType.Float32,
    desc: "Multiplication factor to tune the brightness of cliffs on city edges",
  },
  0x29b40134: {
    id: 0x29b40134,
    name: "Flammability multiplier, abandonment",
    type: ExemplarValueType.Float32,
    desc: "flammability multiplier if building if abandoned",
  },
  0x29b4013b: {
    id: 0x29b4013b,
    name: "Flammability multiplier, no water",
    type: ExemplarValueType.Float32,
    desc: "flammability multiplier if building is not watered",
  },
  0x29b4013c: {
    id: 0x29b4013c,
    name: "Flammability, hotspot settings",
    type: ExemplarValueType.UInt32,
    desc: "hotspot settings: threshold value (0-255), radius (in tracts), minimum weight",
  },
  0x29b4013d: {
    id: 0x29b4013d,
    name: "Flammability, hotspot fire probability",
    type: ExemplarValueType.Float32,
    desc: "maps hotspot weight (# of cells above threshold) to monthly fire probability (in percent 0-100)",
  },
  0x29b4013e: {
    id: 0x29b4013e,
    name: "Flammability, random fire probability",
    type: ExemplarValueType.Float32,
    desc: "monthly fire probability (in percent 0-100) of random lot fire",
  },
  0x29b55f73: {
    id: 0x29b55f73,
    name: "Field Lots",
    type: ExemplarValueType.UInt32,
    desc: "A list of IDs of 1x1 lots that describe a field tile associated with this building (will choose 1 randomly)",
  },
  0x29dd40c1: {
    id: 0x29dd40c1,
    name: "Path Offset Range for Peds",
    type: ExemplarValueType.Float32,
    desc: "Minimum (left side) and maximum (right side) range of offset from paths for pedestrians",
  },
  0x29dd40c2: {
    id: 0x29dd40c2,
    name: "Path Offset Range for Vehicles",
    type: ExemplarValueType.Float32,
    desc: "Minimum (left side) and maximum (right side) range of offset from paths for vehicles",
  },
  0x2a0348ba: {
    id: 0x2a0348ba,
    name: "Flora: Cluster type",
    type: ExemplarValueType.UInt32,
    desc: "Flora type that results when combining this type and one of equal or lesser value.",
  },
  0x2a0348bb: {
    id: 0x2a0348bb,
    name: "Flora: Cluster max radius",
    type: ExemplarValueType.Float32,
    desc: "Maximum plane distance for this flora to cluster with others.",
  },
  0x2a0348bc: {
    id: 0x2a0348bc,
    name: "Flora: Cluster max height",
    type: ExemplarValueType.Float32,
    desc: "Maximum altitude differential for this flora to cluster with others.",
  },
  0x2a2d7824: {
    id: 0x2a2d7824,
    name: "Lot Developer: Cost Multiplier vs lot slope",
    type: ExemplarValueType.Float32,
    desc: "Cost to plop a lot is building + area x this response curve",
  },
  0x2a3143d7: {
    id: 0x2a3143d7,
    name: "CategoryMayorMisc",
    type: ExemplarValueType.UInt32,
    desc: "Controls which menu the tool belongs in. Some tools are attached to the menu that theyӲe in.",
  },
  0x2a35a25f: {
    id: 0x2a35a25f,
    name: "Audio:ZoomScaleFactor",
    type: ExemplarValueType.Float32,
    desc: "Scale factor for all zoom levels",
  },
  0x2a36e3cb: {
    id: 0x2a36e3cb,
    name: "Audio:ListenerRolloffFactor",
    type: ExemplarValueType.Float32,
    desc: "How fast sounds roll off with distance",
  },
  0x2a3fbde1: {
    id: 0x2a3fbde1,
    name: "Audio:ANDFilters",
    type: ExemplarValueType.UInt32,
    desc: "Filter GUIDs that MUST be satisfied",
  },
  0x2a3fbde5: {
    id: 0x2a3fbde5,
    name: "Audio:NOTFilters",
    type: ExemplarValueType.UInt32,
    desc: "Filter GUIDs that must NOT be satisfied",
  },
  0x2a3ff8cd: {
    id: 0x2a3ff8cd,
    name: "Audio:AmbienceExemplarIds",
    type: ExemplarValueType.UInt32,
    desc: "Array of exemplars to load",
  },
  0x2a499f85: {
    id: 0x2a499f85,
    name: "Query exemplar GUID",
    type: ExemplarValueType.UInt32,
    desc: "GUID for this building's Query exemplar",
  },
  0x2a49d7ca: {
    id: 0x2a49d7ca,
    name: "SubmenuKey:Utilities:SanitationMenu",
    type: ExemplarValueType.UInt32,
    desc: "Controls which menu the tool belongs in. Some tools are attached to the menu that they're in.",
  },
  0x2a511893: {
    id: 0x2a511893,
    name: "Commute Train Density Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps city population to a multiplier (0.0-1.0) for commute train density",
  },
  0x2a511cbc: {
    id: 0x2a511cbc,
    name: "Curve speed multiplier",
    type: ExemplarValueType.Float32,
    desc: "Multiplied by a vehicle's default speed when it goes around a curve",
  },
  0x2a53be13: {
    id: 0x2a53be13,
    name: "SFX:Alarm Ambience Sound",
    type: ExemplarValueType.UInt32,
    desc: "GUID of sound. Plays between alarm times.",
  },
  0x2a62d9f3: {
    id: 0x2a62d9f3,
    name: "Crime Type",
    type: ExemplarValueType.UInt32,
    desc: "Crime Sims only - which crime type this model represents",
  },
  0x2a653110: {
    id: 0x2a653110,
    name: "Demand Effect:Cs$",
    type: ExemplarValueType.Float32,
    desc: "This is the % Effect the Ordinance will have when active.",
  },
  0x2a653120: {
    id: 0x2a653120,
    name: "Demand Effect:Cs$$",
    type: ExemplarValueType.Float32,
    desc: "This is the % Effect the Ordinance will have when active.",
  },
  0x2a653130: {
    id: 0x2a653130,
    name: "Demand Effect:Cs$$$",
    type: ExemplarValueType.Float32,
    desc: "This is the % Effect the Ordinance will have when active.",
  },
  0x2a653320: {
    id: 0x2a653320,
    name: "Demand Effect:Co$$",
    type: ExemplarValueType.Float32,
    desc: "This is the % Effect the Ordinance will have when active.",
  },
  0x2a653330: {
    id: 0x2a653330,
    name: "Demand Effect:Co$$$",
    type: ExemplarValueType.Float32,
    desc: "This is the % Effect the Ordinance will have when active.",
  },
  0x2a654100: {
    id: 0x2a654100,
    name: "Demand Effect:I-Ag",
    type: ExemplarValueType.Float32,
    desc: "This is the % Effect the Ordinance will have when active.",
  },
  0x2a654200: {
    id: 0x2a654200,
    name: "Demand Effect:I-D",
    type: ExemplarValueType.Float32,
    desc: "This is the % Effect the Ordinance will have when active.",
  },
  0x2a654300: {
    id: 0x2a654300,
    name: "Demand Effect:I-M",
    type: ExemplarValueType.Float32,
    desc: "This is the % Effect the Ordinance will have when active.",
  },
  0x2a654400: {
    id: 0x2a654400,
    name: "Demand Effect:I-Ht",
    type: ExemplarValueType.Float32,
    desc: "This is the % Effect the Ordinance will have when active.",
  },
  0x2a89b677: {
    id: 0x2a89b677,
    name: "Prop Destroys Lot",
    type: ExemplarValueType.Bool,
    desc: "Whether or not prop destroys entire lot when it burns down.  Default is true for flammable props.",
  },
  0x2a9590de: {
    id: 0x2a9590de,
    name: "Audio:VolumeAttackLimit",
    type: ExemplarValueType.Float32,
    desc: "Max amount of full volume to change up per second",
  },
  0x2aa00fe7: {
    id: 0x2aa00fe7,
    name: "Landfill: Cost for Altitude Change",
    type: ExemplarValueType.SInt64,
    desc: "When zoning, the additional cost per cell for each meter of altitude changed",
  },
  0x2aa405d3: {
    id: 0x2aa405d3,
    name: "StringPropertyType",
    type: ExemplarValueType.String,
    desc: "ExemplarFile does not follow format. Possibly is a corrupted file",
  },
  0x2aa40ccc: {
    id: 0x2aa40ccc,
    name: "Audio:ListenerGranularity",
    type: ExemplarValueType.Float32,
    desc: "Values per zoom controlling update granularity in meters",
  },
  0x2aa84164: {
    id: 0x2aa84164,
    name: "Maximum HQ Boost",
    type: ExemplarValueType.Float32,
    desc: "Max HQ boost achievable without reward buildings.  Used to scale values for Sims opinion polls.",
  },
  0x2ab845e7: {
    id: 0x2ab845e7,
    name: "Lot Developer: Cost to Demolish Destroyed Tile",
    type: ExemplarValueType.UInt32,
    desc: "Cost to demolish a tile on a lot that has been destroyed",
  },
  0x2adb6b6d: {
    id: 0x2adb6b6d,
    name: "Riot, MaxLeaders",
    type: ExemplarValueType.UInt32,
    desc: "Maximum number of riot leaders created per instance",
  },
  0x2be8e61b: {
    id: 0x2be8e61b,
    name: "UI Driving Panel",
    type: ExemplarValueType.UInt32,
    desc: "Property is referenced by Instance ID, and points to the User Interface file for the U-Drive-IT Driving Panel",
  },
  0x2be8e6cb: {
    id: 0x2be8e6cb,
    name: "UI Icons:UDI",
    type: ExemplarValueType.UInt32,
    desc: "These are the main Icons/Images on the Driving Panel",
  },
  0x2be8e834: {
    id: 0x2be8e834,
    name: "UDI UI Display Control1",
    type: ExemplarValueType.UInt32,
    desc: "Controls/handles which different Measurement displays [like the Speedometer/Tachometer/etc] is displayed. Property is directly tied in with other UDI UI Properties.",
  },
  0x2be8fbf3: {
    id: 0x2be8fbf3,
    name: "UDI Vehicle Panel Exemplar Key",
    type: ExemplarValueType.UInt32,
    desc: "References a UDI Exemplar file by IID",
  },
  0x2c0c922e: {
    id: 0x2c0c922e,
    name: "MySim Walk Gender",
    type: ExemplarValueType.UInt32,
    desc: "Male=0. Female=1. Used by  MySim Ped chooser",
  },
  0x2c23a3a1: {
    id: 0x2c23a3a1,
    name: "Final Group Id",
    type: ExemplarValueType.UInt32,
    desc: "Automata group ID which controls the creation and driving properties for this automaton",
  },
  0x2c8f8746: {
    id: 0x2c8f8746,
    name: "Exemplar Category",
    type: ExemplarValueType.UInt32,
    desc: "Categorizes this exemplar; for debug and exemplar editors use only",
  },
  0x47bb3f10: {
    id: 0x47bb3f10,
    name: "Min Value",
    type: ExemplarValueType.SInt32,
    desc: "Minimum active demand, use 0x80000000 for none",
  },
  0x47bb3f11: {
    id: 0x47bb3f11,
    name: "Max Value",
    type: ExemplarValueType.SInt32,
    desc: "Maximum active demand, use 0x7fffffff for none",
  },
  0x47bb3f20: {
    id: 0x47bb3f20,
    name: "Initial Supply",
    type: ExemplarValueType.SInt32,
    desc: "Initial supply of this resource, [min, max]",
  },
  0x47bb3f21: {
    id: 0x47bb3f21,
    name: "Initial Demand",
    type: ExemplarValueType.SInt32,
    desc: "Initial demand for this resource, [min, max]",
  },
  0x47bb3f30: {
    id: 0x47bb3f30,
    name: "Drives",
    type: ExemplarValueType.UInt32,
    desc: "Demands increased by this resource (demandID, percentage)",
  },
  0x47bb3f31: {
    id: 0x47bb3f31,
    name: "Satisfies",
    type: ExemplarValueType.UInt32,
    desc: "Resources created by this resource (demandID, percentage)",
  },
  0x47bb3f32: {
    id: 0x47bb3f32,
    name: "Contributes",
    type: ExemplarValueType.UInt32,
    desc: "Demands increased by this demand (demandID, percentage)",
  },
  0x47bb3f41: {
    id: 0x47bb3f41,
    name: "Caps demand",
    type: ExemplarValueType.UInt32,
    desc: "Demand IDs capped by this resource, based on % depleted",
  },
  0x47bb3f50: {
    id: 0x47bb3f50,
    name: "Sums",
    type: ExemplarValueType.UInt32,
    desc: "List of demand IDs summed by this one",
  },
  0x47bb3f60: {
    id: 0x47bb3f60,
    name: "Region Use",
    type: ExemplarValueType.UInt8,
    desc: "Which part of the regional index is added to the local index",
  },
  0x47e2c200: {
    id: 0x47e2c200,
    name: "Tract Size",
    type: ExemplarValueType.UInt8,
    desc: "Power of 2; determines the size of the sim grid",
  },
  0x47e2c300: {
    id: 0x47e2c300,
    name: "Land Value Intrinsic Min/Max",
    type: ExemplarValueType.UInt8,
  },
  0x47e2c301: {
    id: 0x47e2c301,
    name: "Land Value Wealth Boundaries",
    type: ExemplarValueType.UInt8,
    desc: "Low/Medium boundary, Medium/High boundary",
  },
  0x47e2c310: {
    id: 0x47e2c310,
    name: "Land Value Water Effect",
    type: ExemplarValueType.UInt8,
    desc: "Effect of water on land value: size, radius",
  },
  0x47e2c320: {
    id: 0x47e2c320,
    name: "Land Value Altitude Effect",
    type: ExemplarValueType.Float32,
    desc: "Maps altitude to land value",
  },
  0x47e2c330: {
    id: 0x47e2c330,
    name: "Land Value Desirability IDs",
    type: ExemplarValueType.UInt32,
    desc: "Growth Developer IDs (see Effects)",
  },
  0x47e2c331: {
    id: 0x47e2c331,
    name: "Land Value Desirability Factors",
    type: ExemplarValueType.Float32,
    desc: "Size of effects (see IDs)",
  },
  0x47e2c332: {
    id: 0x47e2c332,
    name: "Land Value Desirability Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps desirability to land value",
  },
  0x47e2c380: {
    id: 0x47e2c380,
    name: "Construction Resources Min/Max",
    type: ExemplarValueType.UInt32,
    desc: "Amount of capacity that can be under construction at any one time",
  },
  0x47e2c381: {
    id: 0x47e2c381,
    name: "Construction Resources per Resident",
    type: ExemplarValueType.Float32,
    desc: "Factor applied to population to calculate construction resources",
  },
  0x47e2c382: {
    id: 0x47e2c382,
    name: "Construction Type Selection Bias",
    type: ExemplarValueType.UInt32,
    desc: "Improves that chance that low-demand types will have opportunity to build",
  },
  0x47e2c383: {
    id: 0x47e2c383,
    name: "Stage Population Multiplier",
    type: ExemplarValueType.Float32,
    desc: "Values >1 allow big stage buildings sooner. Indexed by difficulty level",
  },
  0x47e2c400: {
    id: 0x47e2c400,
    name: "Lot Developer Stay New Time",
    type: ExemplarValueType.UInt32,
    desc: "Number of days before a building can distress",
  },
  0x47e2c401: {
    id: 0x47e2c401,
    name: "Lot Developer Occupancy Thresholds",
    type: ExemplarValueType.Float32,
    desc: "When to abandon, distress, and renew. Values 0-1",
  },
  0x47e2c500: {
    id: 0x47e2c500,
    name: "Tract Developer Overbuild",
    type: ExemplarValueType.Float32,
    desc: "Factor applied to desired capacity when growing buildings in a tract",
  },
  0x47e2c501: {
    id: 0x47e2c501,
    name: "Tract Developer Reoccupy Thresholds",
    type: ExemplarValueType.Float32,
    desc: "Start and Stop percentage of desired capacity that can be fulfilled by abandoned buildings",
  },
  0x47e2c502: {
    id: 0x47e2c502,
    name: "Tract Developer Redevelop Size Threshold",
    type: ExemplarValueType.Float32,
    desc: "What percentage of the existing capacity must be demanded before we redevelop",
  },
  0x47e2c510: {
    id: 0x47e2c510,
    name: "Tract Developer Demolition Costs",
    type: ExemplarValueType.Float32,
    desc: "for occupied/abandoned buildings",
  },
  0x47e2c511: {
    id: 0x47e2c511,
    name: "Tract Developer New Lot Costs",
    type: ExemplarValueType.Float32,
    desc: "Fictional cost to aggregate a lot/subdivide a lot",
  },
  0x47e2c530: {
    id: 0x47e2c530,
    name: "Tract Developer Occupancy Variation",
    type: ExemplarValueType.Float32,
    desc: "Building occupancy rate +/- variation from tract rate",
  },
  0x47e2c531: {
    id: 0x47e2c531,
    name: "Tract Developer Min Vacancy Range",
    type: ExemplarValueType.Float32,
    desc: "When 100% full, subtract a little from the occupancy rate",
  },
  0x47e2c540: {
    id: 0x47e2c540,
    name: "Tract Developer Kick Out Lower Wealth",
    type: ExemplarValueType.Bool,
    desc: "If true, higher wealth buildings can replace non-empty lower wealth buildings",
  },
  0x47e2c550: {
    id: 0x47e2c550,
    name: "Tract Developer Available Styles",
    type: ExemplarValueType.UInt32,
    desc: "List of available (R and C) building styles",
  },
  0x47e2c551: {
    id: 0x47e2c551,
    name: "Tract Developer Years Between Styles",
    type: ExemplarValueType.SInt32,
    desc: "How often to change (R and C) building styles",
  },
  0x482cb441: {
    id: 0x482cb441,
    name: "MinClearance",
    type: ExemplarValueType.Float32,
    desc: "Min clearance below bridge (meters)",
  },
  0x482cb442: {
    id: 0x482cb442,
    name: "NumEndPieces",
    type: ExemplarValueType.UInt32,
    desc: "Number of end pieces",
  },
  0x482cb443: {
    id: 0x482cb443,
    name: "EndPieceExemplars",
    type: ExemplarValueType.UInt32,
    desc: "Exemplar ids for end pieces(in order)",
  },
  0x482cb444: {
    id: 0x482cb444,
    name: "EndPieceRotations",
    type: ExemplarValueType.UInt8,
    desc: "Model rotations for end pieces",
  },
  0x482cb445: {
    id: 0x482cb445,
    name: "RepeatPieceExemplar",
    type: ExemplarValueType.UInt32,
    desc: "Exemplar id for the repeat pieces",
  },
  0x482cb446: {
    id: 0x482cb446,
    name: "RepeatPieceRotation",
    type: ExemplarValueType.UInt8,
    desc: "Model rotation for repeat piece",
  },
  0x482cb447: {
    id: 0x482cb447,
    name: "SupportInterval",
    type: ExemplarValueType.UInt32,
    desc: "Number of cells between supports",
  },
  0x482cb448: {
    id: 0x482cb448,
    name: "NumSupportPieces",
    type: ExemplarValueType.UInt32,
    desc: "Number of support pieces(count one side only)",
  },
  0x482cb449: {
    id: 0x482cb449,
    name: "SupportPieceExemplars",
    type: ExemplarValueType.UInt32,
    desc: "Exemplar ids for support pieces(start at pillar)",
  },
  0x482cb44a: {
    id: 0x482cb44a,
    name: "SupportPieceRotations",
    type: ExemplarValueType.UInt8,
    desc: "Model rotations for support pieces",
  },
  0x482cb44b: {
    id: 0x482cb44b,
    name: "EndPieceSpanLocations",
    type: ExemplarValueType.Float32,
    desc: "Dist from top the two spans of each end piece are",
  },
  0x482cb44c: {
    id: 0x482cb44c,
    name: "ColumnTopPosForSupportPieces",
    type: ExemplarValueType.Float32,
    desc: "Dist from pivot point to the top of concrete column (-ve for no column)",
  },
  0x482cb44d: {
    id: 0x482cb44d,
    name: "ColumnTopPosForEndPieces",
    type: ExemplarValueType.Float32,
    desc: "Dist from pivot point to the top of concrete column (-ve for no column)",
  },
  0x482cb44e: {
    id: 0x482cb44e,
    name: "SupportColumnCorners",
    type: ExemplarValueType.Float32,
    desc: "(x,z) corresponding to the 4 corners of the support column w.r.t column centre",
  },
  0x482cb44f: {
    id: 0x482cb44f,
    name: "CanWorkAsLandBridge",
    type: ExemplarValueType.Bool,
    desc: "Set to true if this bridge can work as land bridge",
  },
  0x482cb450: {
    id: 0x482cb450,
    name: "CanWorkAsWaterBridge",
    type: ExemplarValueType.Bool,
    desc: "Set to true if this bridge can work as water bridge",
  },
  0x482cb455: {
    id: 0x482cb455,
    name: "MinHold",
    type: ExemplarValueType.Float32,
    desc: "The lowest suspend wire can get in the middle",
  },
  0x482cb456: {
    id: 0x482cb456,
    name: "MinEndHold",
    type: ExemplarValueType.Float32,
    desc: "The lowest suspend wire can get at the ends (leave it at 0 please)",
  },
  0x482cb457: {
    id: 0x482cb457,
    name: "PylonsHeight",
    type: ExemplarValueType.Float32,
    desc: "Pylons height (meters)",
  },
  0x482cb458: {
    id: 0x482cb458,
    name: "MinSpan",
    type: ExemplarValueType.UInt32,
    desc: "The shortest possible bridge of this type (tiles)",
  },
  0x482cb459: {
    id: 0x482cb459,
    name: "EndSupportInterval",
    type: ExemplarValueType.UInt32,
    desc: "Number of cells between supports at the ends of the bridge",
  },
  0x482cb45a: {
    id: 0x482cb45a,
    name: "MinPylons",
    type: ExemplarValueType.UInt32,
    desc: "Minimal number of pylons",
  },
  0x482cb45b: {
    id: 0x482cb45b,
    name: "MaxPylons",
    type: ExemplarValueType.UInt32,
    desc: "Maximal number of pylons",
  },
  0x482cb45c: {
    id: 0x482cb45c,
    name: "WireMainTexId",
    type: ExemplarValueType.UInt32,
    desc: "Texture ID for suspension wire",
  },
  0x482cb45d: {
    id: 0x482cb45d,
    name: "WireTileTexId",
    type: ExemplarValueType.UInt32,
    desc: "Texture ID for vertical suspension wires",
  },
  0x482cb45e: {
    id: 0x482cb45e,
    name: "MainPylonCorners",
    type: ExemplarValueType.Float32,
    desc: "(x,z) corresponding to the 4 corners of the pylon w.r.t pylon centre",
  },
  0x482cb45f: {
    id: 0x482cb45f,
    name: "BridgeWidth",
    type: ExemplarValueType.UInt32,
    desc: "Bridge width in tiles (defaults to 1)",
  },
  0x482cb467: {
    id: 0x482cb467,
    name: "MaxSpan",
    type: ExemplarValueType.UInt32,
    desc: "The longest possible bridge of this type (tiles)",
  },
  0x482cb468: {
    id: 0x482cb468,
    name: "CeilingHeight",
    type: ExemplarValueType.Float32,
    desc: "Distance from road top to ceiling of water passage below bridge tiles.",
  },
  0x482cb469: {
    id: 0x482cb469,
    name: "CableStayedFrontAnchors",
    type: ExemplarValueType.Float32,
    desc: "3D start and end (x,y,z) of cable attachments on front side of pylon.",
  },
  0x482cb46a: {
    id: 0x482cb46a,
    name: "CableStayedRearAnchors",
    type: ExemplarValueType.Float32,
    desc: "3D start and end (x,y,z) of cable attachments on rear side of pylon.",
  },
  0x482cb46b: {
    id: 0x482cb46b,
    name: "CableStayedWireTexture",
    type: ExemplarValueType.UInt32,
    desc: "Instance ID of texture to use for cable-stayed bridge wires.",
  },
  0x482cb46c: {
    id: 0x482cb46c,
    name: "CableStayedWireThickness",
    type: ExemplarValueType.Float32,
    desc: "Thickness of cable-stayed wires in meters.",
  },
  0x482cb46d: {
    id: 0x482cb46d,
    name: "CableStayedSpanAnchors",
    type: ExemplarValueType.Float32,
    desc: "Start and end positions for cable-stayed bridge wires on the span, relative to the pylon.",
  },
  0x482cb46e: {
    id: 0x482cb46e,
    name: "CableStayedWireCount",
    type: ExemplarValueType.UInt32,
    desc: "The number of wires on one side of a pylon on a cable-stayed bridge.",
  },
  0x482cb46f: {
    id: 0x482cb46f,
    name: "Bridge Image Key",
    type: ExemplarValueType.UInt32,
    desc: "Group and instance ID for preview image of bridge.",
  },
  0x482cb470: {
    id: 0x482cb470,
    name: "Bridge Costs",
    type: ExemplarValueType.UInt32,
    desc: "One-time and per-tile costs for bridge, in simoleons.",
  },
  0x482cb471: {
    id: 0x482cb471,
    name: "WireTilingUnit",
    type: ExemplarValueType.Float32,
    desc: "Height of a repeating wire tile for suspension bridges.",
  },
  0x482cb472: {
    id: 0x482cb472,
    name: "Bridge height bias",
    type: ExemplarValueType.Float32,
    desc: "Vertical displacement for all models in a bridge.",
  },
  0x482cd460: {
    id: 0x482cd460,
    name: "SuspensionWireBase",
    type: ExemplarValueType.Float32,
    desc: "Offset of suspension wire base",
  },
  0x482cd461: {
    id: 0x482cd461,
    name: "SuspensionWireInside",
    type: ExemplarValueType.Float32,
    desc: "Offset of suspension wire inside the bridge tile",
  },
  0x482cd462: {
    id: 0x482cd462,
    name: "SupportColumnBase",
    type: ExemplarValueType.Float32,
    desc: "Offset of pylon base",
  },
  0x482cd463: {
    id: 0x482cd463,
    name: "MinAltitudeAboveWater",
    type: ExemplarValueType.Float32,
    desc: "Minimum estimated elevation above water",
  },
  0x482cd464: {
    id: 0x482cd464,
    name: "MaxAltitudeAboveWater",
    type: ExemplarValueType.Float32,
    desc: "Maximum estimated elevation above water",
  },
  0x482cd465: {
    id: 0x482cd465,
    name: "MinEndIntervalFraction",
    type: ExemplarValueType.Float32,
    desc: "Force pylon-to-end distance to be at least some% of pylon-to-pylon distance.",
  },
  0x482cd466: {
    id: 0x482cd466,
    name: "Bridge Name Key",
    type: ExemplarValueType.UInt32,
    desc: "Group and instance ID for string name of bridge.",
  },
  0x4835c6a4: {
    id: 0x4835c6a4,
    name: "PivotPointPosition",
    type: ExemplarValueType.Float32,
    desc: "Relative to left, bottom, far corner of bounding box (x,y,z meters)",
  },
  0x4835c6a5: {
    id: 0x4835c6a5,
    name: "BoundingBox",
    type: ExemplarValueType.Float32,
    desc: "Dist (meters) from the pivot pt to left, right, back, front, bottom, top side of model",
  },
  0x489b6974: {
    id: 0x489b6974,
    name: "Test res key table",
    type: ExemplarValueType.UInt32,
    desc: "Test for Resource key table editor",
  },
  0x48cd7b20: {
    id: 0x48cd7b20,
    name: "MaxNormalTerrain eight",
    type: ExemplarValueType.Float32,
    desc: "Max normal height in fractally generated terrains, for different city size choices",
  },
  0x48cd7b21: {
    id: 0x48cd7b21,
    name: "SeaLevel",
    type: ExemplarValueType.Float32,
    desc: "Sea level (meters)",
  },
  0x48cd7b22: {
    id: 0x48cd7b22,
    name: "MinRegularHtFactor",
    type: ExemplarValueType.Float32,
    desc: "Factor governing the min ht for regular terrain",
  },
  0x48cd7b23: {
    id: 0x48cd7b23,
    name: "MaxRegularHtFactor",
    type: ExemplarValueType.Float32,
    desc: "Factor governing the max ht for regular terrain",
  },
  0x48cd7b24: {
    id: 0x48cd7b24,
    name: "MinMountainHtFactor",
    type: ExemplarValueType.Float32,
    desc: "Factor governing the min ht for mountain terrain",
  },
  0x48cd7b25: {
    id: 0x48cd7b25,
    name: "MaxMountainHtFactor",
    type: ExemplarValueType.Float32,
    desc: "Factor governing the max ht for mountain terrain",
  },
  0x48cd7b26: {
    id: 0x48cd7b26,
    name: "MaxTerrainHeight",
    type: ExemplarValueType.Float32,
    desc: "Maximum altitude of a terrain vertex",
  },
  0x48cd7b27: {
    id: 0x48cd7b27,
    name: "MinTerrainHeight",
    type: ExemplarValueType.Float32,
    desc: "Minimum altitude of a terrain vertex",
  },
  0x48cd7b28: {
    id: 0x48cd7b28,
    name: "ImageImportScaleFactor",
    type: ExemplarValueType.Float32,
    desc: "How many meters correspond to one unit of gray scale value in image",
  },
  0x48cd7b2a: {
    id: 0x48cd7b2a,
    name: "DefaultTerrainHeight",
    type: ExemplarValueType.Float32,
    desc: "Default terrain height for new city (meters)",
  },
  0x48cd7b30: {
    id: 0x48cd7b30,
    name: "TemperatureRangeFactor",
    type: ExemplarValueType.Float32,
    desc: "Factor governing the max temperature range for texture assignment",
  },
  0x48cd7b31: {
    id: 0x48cd7b31,
    name: "WaterProximityRangeFactor",
    type: ExemplarValueType.Float32,
    desc: "Factor governing the max water proximity range for texture assignment",
  },
  0x48cd7b40: {
    id: 0x48cd7b40,
    name: "NumInitialErosionPasses",
    type: ExemplarValueType.UInt32,
    desc: "Number of erosion passes at initial terrain creation time",
  },
  0x48cd7b41: {
    id: 0x48cd7b41,
    name: "NumHydraulicIterationsPerInitialErosionPass",
    type: ExemplarValueType.UInt32,
    desc: "Number of hydraulic erosion iterations in each initial erosion pass",
  },
  0x48cd7b42: {
    id: 0x48cd7b42,
    name: "NumWindIterationsPerInitialErosionPass",
    type: ExemplarValueType.UInt32,
    desc: "Number of wind erosion iterations in each initial erosion pass",
  },
  0x48cd7b43: {
    id: 0x48cd7b43,
    name: "SeaLevelChangeDueToWaterSlider",
    type: ExemplarValueType.Float32,
    desc: "The sea level change range (meters) corresponding to the water slider, for diff city sizes",
  },
  0x48cd7b50: {
    id: 0x48cd7b50,
    name: "MinCellsInUsefulFlatArea",
    type: ExemplarValueType.UInt32,
    desc: "do not auto flatten it",
  },
  0x48cd7b51: {
    id: 0x48cd7b51,
    name: "MaxHtChangeToFlattenFactor",
    type: ExemplarValueType.Float32,
    desc: "Controls the extent of height change allowed in auto-flattening",
  },
  0x48cd7b52: {
    id: 0x48cd7b52,
    name: "MaxTerraceAltitudeFactor",
    type: ExemplarValueType.Float32,
    desc: "Controls the maximum altitude up to which auto-flattening gets done",
  },
  0x48cd7b53: {
    id: 0x48cd7b53,
    name: "MinTerraceAltitudeFactor",
    type: ExemplarValueType.Float32,
    desc: "Controls the lowest altitude at which terraces get created",
  },
  0x48cd7b54: {
    id: 0x48cd7b54,
    name: "AutoFlatAreaEdgeSmootheningRadius",
    type: ExemplarValueType.UInt32,
    desc: "To what distance (in cells) around an auto-flattened area we do smoothing",
  },
  0x48cd7b60: {
    id: 0x48cd7b60,
    name: "MinShoreCliffSize",
    type: ExemplarValueType.UInt32,
    desc: "Minimum number of shore vertices in a shore cliff",
  },
  0x48cd7b61: {
    id: 0x48cd7b61,
    name: "MinShoreCliffCandidateHt",
    type: ExemplarValueType.Float32,
    desc: "Minimum pre-existing ht difference at shore for it to be considered for turning into a cliff",
  },
  0x48cd7b62: {
    id: 0x48cd7b62,
    name: "MinShoreCliffHt",
    type: ExemplarValueType.Float32,
    desc: "Minimum ht above sea level at a shore cliff (after cliff creation)",
  },
  0x48cd7b63: {
    id: 0x48cd7b63,
    name: "MaxShoreCliffHt",
    type: ExemplarValueType.Float32,
    desc: "Maximum ht above sea level at a shore cliff (after cliff creation)",
  },
  0x48cd7b64: {
    id: 0x48cd7b64,
    name: "MaxShoreCliffSize",
    type: ExemplarValueType.UInt32,
    desc: "Maximum number of shore vertices in a shore cliff",
  },
  0x48cd7b65: {
    id: 0x48cd7b65,
    name: "MaxNormalYForCliff",
    type: ExemplarValueType.Float32,
    desc: "A face is considered cliff if the y-component of its normal is less than this",
  },
  0x48cd7b70: {
    id: 0x48cd7b70,
    name: "MinSeaLevel",
    type: ExemplarValueType.Float32,
    desc: "Minimum sea altitude",
  },
  0x48cd7b71: {
    id: 0x48cd7b71,
    name: "MaxSeaLevel",
    type: ExemplarValueType.Float32,
    desc: "Maximum sea altitude",
  },
  0x48cd7b72: {
    id: 0x48cd7b72,
    name: "SeaRaiseLowerAmount",
    type: ExemplarValueType.Float32,
    desc: "Extent by which the sea level is raised/lowered for each player click",
  },
  0x48cd7b73: {
    id: 0x48cd7b73,
    name: "TerrainRaiseLowerAmount",
    type: ExemplarValueType.Float32,
    desc: "Extent by which the terrain level is raised/lowered each time raise/lower menu is selected",
  },
  0x48cd7b80: {
    id: 0x48cd7b80,
    name: "AutoFlattenUponCreation",
    type: ExemplarValueType.UInt8,
    desc: "Run auto-flatten tool upon initial terrain creation",
  },
  0x48cd7b81: {
    id: 0x48cd7b81,
    name: "ShoreCliffsUponCreation",
    type: ExemplarValueType.UInt8,
    desc: "Run cliff creation tool upon initial terrain creation",
  },
  0x48cd7ba0: {
    id: 0x48cd7ba0,
    name: "TypicalBrushAngleIncrement",
    type: ExemplarValueType.Float32,
    desc: "Angle (in degrees) by which the brush rotates between successive applications",
  },
  0x48cd7bf1: {
    id: 0x48cd7bf1,
    name: "NumFlowStepsPerWaterErosionBrushApplication",
    type: ExemplarValueType.UInt32,
    desc: "Number of water flow steps in each application of water erosion brush",
  },
  0x48cd7bf2: {
    id: 0x48cd7bf2,
    name: "NumWaterErosionIterationsPerInvocation",
    type: ExemplarValueType.UInt32,
    desc: "Number of water erosion steps in each application of water erosion tool",
  },
  0x48cd7bf3: {
    id: 0x48cd7bf3,
    name: "NumSmoothingIterationsAfterWaterErosion",
    type: ExemplarValueType.UInt32,
    desc: "Number of smoothing iterations after each application of water erosion tool",
  },
  0x48cd7c00: {
    id: 0x48cd7c00,
    name: "EdgeReconcilliationSmoothingRadiusVsHeightDiff",
    type: ExemplarValueType.Float32,
    desc: "Specifies the smoothing radius as a function of height adjustment needed",
  },
  0x48cd7c01: {
    id: 0x48cd7c01,
    name: "EdgeReconcilliationSmoothingIterations",
    type: ExemplarValueType.UInt32,
    desc: "Smoothing iterations for edge reconciliation",
  },
  0x48cd7c02: {
    id: 0x48cd7c02,
    name: "EdgeReconcilliationHtDifferenceThreshold",
    type: ExemplarValueType.Float32,
    desc: "If the height difference is less than this, don't reconcile",
  },
  0x48d71ed0: {
    id: 0x48d71ed0,
    name: "Police Station, Centre Strength",
    type: ExemplarValueType.SInt32,
    desc: "(in Protection units)",
  },
  0x48d71ed1: {
    id: 0x48d71ed1,
    name: "Police Station, Exterior Strength",
    type: ExemplarValueType.SInt32,
    desc: "(in Protection units)",
  },
  0x48d71ed2: {
    id: 0x48d71ed2,
    name: "Police Station, Radius",
    type: ExemplarValueType.Float32,
    desc: "(in meters)",
  },
  0x48d71ed5: {
    id: 0x48d71ed5,
    name: "Police Station, Total Dispatches",
    type: ExemplarValueType.SInt32,
    desc: "(number of trucks this station can send)",
  },
  0x48d71ed9: {
    id: 0x48d71ed9,
    name: "Police Station, Dispatch Centre Strength",
    type: ExemplarValueType.SInt32,
    desc: "(in Protection units)",
  },
  0x48d71eda: {
    id: 0x48d71eda,
    name: "Police Station, Dispatch Exterior Strength",
    type: ExemplarValueType.SInt32,
    desc: "(in Protection units)",
  },
  0x48d71edb: {
    id: 0x48d71edb,
    name: "Police Station, Dispatch Radius",
    type: ExemplarValueType.Float32,
    desc: "(in meters)",
  },
  0x48d71ee0: {
    id: 0x48d71ee0,
    name: "Jail, Inmate Capacity",
    type: ExemplarValueType.SInt32,
    desc: "Jail Inmate Capacity",
  },
  0x48d71ee4: {
    id: 0x48d71ee4,
    name: "Jail, Overcapacity Cost (per person)",
    type: ExemplarValueType.SInt32,
    desc: "Monthly cost, per convict, for every prisoner over regular (100%) capacity",
  },
  0x48ebd0b1: {
    id: 0x48ebd0b1,
    name: "Waste to energy monthly Capacity",
    type: ExemplarValueType.UInt32,
    desc: "Amount of trash converted to energy per month",
  },
  0x48ee7a44: {
    id: 0x48ee7a44,
    name: "Garbage Capacity",
    type: ExemplarValueType.UInt32,
    desc: "Amount of garbage the building can store in a month",
  },
  0x48f23a7e: {
    id: 0x48f23a7e,
    name: "Water Source",
    type: ExemplarValueType.UInt8,
    desc: "Where this water producer gets its water",
  },
  0x490e0aa6: {
    id: 0x490e0aa6,
    name: "Budget: LoanIncrement",
    type: ExemplarValueType.SInt64,
    desc: "Loans are issued in values that are of this increment",
  },
  0x49122036: {
    id: 0x49122036,
    name: "Utility Min Funding to End Strike",
    type: ExemplarValueType.Float32,
    desc: "Minimum funding percentage that must be restored to end a utility strike",
  },
  0x491332e6: {
    id: 0x491332e6,
    name: "Traffic Volume per Population",
    type: ExemplarValueType.Float32,
    desc: "Traffic volume generated per point of population in a building",
  },
  0x491332e7: {
    id: 0x491332e7,
    name: "Walking Speed",
    type: ExemplarValueType.Float32,
    desc: "Speed in KPH to Walk on: Road, Rail, Highway, Street, Pipes, PowerPoles, Avenue, Subway, Elevated Rail, Monorail, One-ways, DirtRoad, Ground Highway",
  },
  0x491332e8: {
    id: 0x491332e8,
    name: "Driving Speed",
    type: ExemplarValueType.Float32,
    desc: "Speed in KPH to Drive on: Road, Rail, Highway, Street, Pipes, PowerPoles, Avenue, Subway, Elevated Rail, Monorail, One-ways, DirtRoad, Ground Highway",
  },
  0x491332e9: {
    id: 0x491332e9,
    name: "Bus Speed",
    type: ExemplarValueType.Float32,
    desc: "Speed in KPH for Buses to travel on: Road, Rail, Highway, Street, Pipes, PowerPoles, Avenue, Subway, Elevated Rail, Monorail, One-ways, DirtRoad, Ground Highway",
  },
  0x491332ea: {
    id: 0x491332ea,
    name: "Train Speed",
    type: ExemplarValueType.Float32,
    desc: "Speed in KPH for Trains to travel on: Road, Rail, Highway, Street, Pipes, PowerPoles, Avenue, Subway, Elevated Rail, Monorail, One-ways, DirtRoad, Ground Highway",
  },
  0x491332eb: {
    id: 0x491332eb,
    name: "Truck Speed",
    type: ExemplarValueType.Float32,
    desc: "Speed in KPH for Trucks to travel on: Road, Rail, Highway, Street, Pipes, PowerPoles, Avenue, Subway, Elevated Rail, Monorail, One-ways, DirtRoad, Ground Highway",
  },
  0x491332ec: {
    id: 0x491332ec,
    name: "Freight Train Speed",
    type: ExemplarValueType.Float32,
    desc: "Speed in KPH for Trains to travel on: Road, Rail, Highway, Street, Pipes, PowerPoles, Avenue, Subway, Elevated Rail, Monorail, One-ways, DirtRoad, Ground Highway",
  },
  0x491332ed: {
    id: 0x491332ed,
    name: "Subway Trains Speed",
    type: ExemplarValueType.Float32,
    desc: "Speed in KPH for Subway Trains to travel on: Road, Rail, Highway, Street, Pipes, PowerPoles, Avenue, Subway, Elevated Rail, Monorail, One-ways, DirtRoad, Ground Highway",
  },
  0x491332ee: {
    id: 0x491332ee,
    name: "EI Train Speed",
    type: ExemplarValueType.Float32,
    desc: "Speed in KPH for EI Train to travel on: Road, Rail, Highway, Street, Pipes, PowerPoles, Avenue, Subway, Elevated Rail, Monorail, One-ways, DirtRoad, Ground Highway",
  },
  0x491332ef: {
    id: 0x491332ef,
    name: "Monorail Train Speed",
    type: ExemplarValueType.Float32,
    desc: "Speed in KPH for Monorail to travel on: : Road, Rail, Highway, Street, Pipes, PowerPoles, Avenue, Subway, Elevated Rail, Monorail, One-ways, DirtRoad, Ground Highway",
  },
  0x49134bd4: {
    id: 0x49134bd4,
    name: "Max garbage value for UI",
    type: ExemplarValueType.UInt32,
    desc: "Maximum number of garbage units reported to the UI, must be less than 32767",
  },
  0x49134bdd: {
    id: 0x49134bdd,
    name: "Max air pollution value for UI",
    type: ExemplarValueType.UInt32,
    desc: "Maximum air pollution value reported to the UI, must be less than 32767",
  },
  0x4918c925: {
    id: 0x4918c925,
    name: "Budget: Tax Multiplier_R$$$",
    type: ExemplarValueType.Float32,
    desc: "Multiplier to tweak the relative weighting of the R$$$ occupant type's taxes",
  },
  0x4918c92c: {
    id: 0x4918c92c,
    name: "Budget: Tax Multiplier_Cs$$",
    type: ExemplarValueType.Float32,
    desc: "Multiplier to tweak the relative weighting of the CS$$ occupant type's taxes",
  },
  0x4918c930: {
    id: 0x4918c930,
    name: "Budget: Tax Multiplier_Cs$$$",
    type: ExemplarValueType.Float32,
    desc: "Multiplier to tweak the relative weighting of the CS$$$ occupant type's taxes",
  },
  0x4918c93a: {
    id: 0x4918c93a,
    name: "Budget: Tax Multiplier_Co$$$",
    type: ExemplarValueType.Float32,
    desc: "Multiplier to tweak the relative weighting of the CO$$$ occupant type's taxes",
  },
  0x491b3ad5: {
    id: 0x491b3ad5,
    name: "Health Coverage Radius Effect",
    type: ExemplarValueType.Float32,
    desc: "Percentage (Min:0, Max: 200) by which this ordinance affects coverage radius of health buildings",
  },
  0x491b42af: {
    id: 0x491b42af,
    name: "Hospital Population vs. Average Age",
    type: ExemplarValueType.Float32,
    desc: "Maps average age to a % of population covered",
  },
  0x491c9c00: {
    id: 0x491c9c00,
    name: "RipplesEnabled",
    type: ExemplarValueType.Bool,
    desc: "Enable/disable ripples",
  },
  0x491c9c01: {
    id: 0x491c9c01,
    name: "RippleMinShoreSizeForPlacement",
    type: ExemplarValueType.UInt32,
    desc: "Places ripples only if the shore is this many cells long",
  },
  0x491c9c02: {
    id: 0x491c9c02,
    name: "RippleQuadWidth",
    type: ExemplarValueType.Float32,
    desc: "Approximate width of the quads along the ribbon axis (meters)",
  },
  0x491c9c03: {
    id: 0x491c9c03,
    name: "RippleLandVertexHtAboveSeaLevel",
    type: ExemplarValueType.Float32,
    desc: "Land-side of the ribbon is kept above sea level to get ripple washing the beach effect",
  },
  0x491c9c04: {
    id: 0x491c9c04,
    name: "RippleTextureUIncrementPerQuad",
    type: ExemplarValueType.Float32,
    desc: "What portion of the texture corresponds to each quad",
  },
  0x491c9c05: {
    id: 0x491c9c05,
    name: "RippleWaterSideRibbonWidth",
    type: ExemplarValueType.Float32,
    desc: "Dist (meters) from ribbon centre to the quad edge on water side",
  },
  0x491c9c06: {
    id: 0x491c9c06,
    name: "RippleLandSideRibbonWidth",
    type: ExemplarValueType.Float32,
    desc: "Dist (meters) from ribbon centre to the quad edge on land side",
  },
  0x491c9c07: {
    id: 0x491c9c07,
    name: "RippleMicroSecsPerFrame",
    type: ExemplarValueType.UInt32,
    desc: "Microseconds spent in each frame of animation",
  },
  0x491c9c08: {
    id: 0x491c9c08,
    name: "RippleLandVertexAlpha",
    type: ExemplarValueType.UInt8,
    desc: "Alpha values for the ribbon vertices on the land side",
  },
  0x491c9c09: {
    id: 0x491c9c09,
    name: "RippleWaterVertexAlpha",
    type: ExemplarValueType.UInt8,
    desc: "Alpha values for the ribbon vertices on the water side",
  },
  0x491c9c0a: {
    id: 0x491c9c0a,
    name: "RippleWaterSideRibbonWidthVariation",
    type: ExemplarValueType.Float32,
    desc: "Factor governing the variation of the ribbon width [0-1]",
  },
  0x491c9c0b: {
    id: 0x491c9c0b,
    name: "RippleConcavityThresholdAngle",
    type: ExemplarValueType.Float32,
    desc: "If the variation in ripple tangent direction is more than this, we break the ripple there",
  },
  0x491c9c0c: {
    id: 0x491c9c0c,
    name: "RippleTerrainUpdateAreaThreshold",
    type: ExemplarValueType.UInt32,
    desc: "If the area (square cells) of terrain edits exceeds this, ripples get re-evaluated",
  },
  0x491c9c0d: {
    id: 0x491c9c0d,
    name: "RippleAlphaIncrementSteps",
    type: ExemplarValueType.UInt32,
    desc: "On the edges of the ripples, alpha increments over these many steps to reach its max",
  },
  0x4929cc97: {
    id: 0x4929cc97,
    name: "High Wealth HQ",
    type: ExemplarValueType.UInt8,
    desc: "HQ assigned to new High Wealth residents",
  },
  0x4941a92b: {
    id: 0x4941a92b,
    name: "Life Expectancy to Workforce Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps Life Expectancy of a Tract to the % of that Tract that is in the workforce",
  },
  0x4953e8a3: {
    id: 0x4953e8a3,
    name: "Travel strategy percent WealthNone",
    type: ExemplarValueType.UInt8,
    desc: "Odds of selecting each travel strategy",
  },
  0x4953e8a4: {
    id: 0x4953e8a4,
    name: "Travel strategy percent Wealth$",
    type: ExemplarValueType.UInt8,
    desc: "Odds of selecting each travel strategy",
  },
  0x4953e8a5: {
    id: 0x4953e8a5,
    name: "Travel strategy percent Wealth$$",
    type: ExemplarValueType.UInt8,
    desc: "Odds of selecting each travel strategy",
  },
  0x4953e8a6: {
    id: 0x4953e8a6,
    name: "Travel strategy percent Wealth$$$",
    type: ExemplarValueType.UInt8,
    desc: "Odds of selecting each travel strategy",
  },
  0x496e564c: {
    id: 0x496e564c,
    name: "Underground Piece Depth",
    type: ExemplarValueType.Float32,
    desc: "Default depth of underground network piece below terrain",
  },
  0x496e5a36: {
    id: 0x496e5a36,
    name: "Use Pipe Depth",
    type: ExemplarValueType.Bool,
    desc: "If false, normal pipe pieces are placed as per intersections",
  },
  0x496e88f1: {
    id: 0x496e88f1,
    name: "Zone Purpose Filter",
    type: ExemplarValueType.UInt8,
    desc: "Zone purpose types compatible with automaton (none == can appear around any purpose)",
  },
  0x4975dd20: {
    id: 0x4975dd20,
    name: "ScrollingDeceleration",
    type: ExemplarValueType.Float32,
    desc: "Amount to decelerate scrolling speed per Paint tick.  Use with ScrollingDecelerationIsPercentage.",
  },
  0x4975dd25: {
    id: 0x4975dd25,
    name: "ScrollingDecelerationIsPercentage",
    type: ExemplarValueType.Bool,
    desc: "True if ScrollingDeceleration should be the percentage (0.0-1.0) to decelerate per Paint tick.  False if that amount should be the absolute amount to decrement the speed per tick.",
  },
  0x497f42a4: {
    id: 0x497f42a4,
    name: "Unwatered Building Colour",
    type: ExemplarValueType.UInt8,
    desc: "RGBA colour for unwatered buildings in pipe view",
  },
  0x4998c89c: {
    id: 0x4998c89c,
    name: "Vehicle Density Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps city population to a multiplier (0.0-1.0) for vehicle density",
  },
  0x4998c89d: {
    id: 0x4998c89d,
    name: "Active Travel Types",
    type: ExemplarValueType.UInt8,
    desc: "Which travel types are currently visible and simulated by  he automata system",
  },
  0x4998c89e: {
    id: 0x4998c89e,
    name: "Max Vehicles Per Second",
    type: ExemplarValueType.Float32,
    desc: "Max number of vehicles to cross a tile per second",
  },
  0x4998c89f: {
    id: 0x4998c89f,
    name: "Max Vehicles",
    type: ExemplarValueType.UInt32,
    desc: "Maximum number of vehicles at one time",
  },
  0x4998c900: {
    id: 0x4998c900,
    name: "Vehicle Min/Max KPH",
    type: ExemplarValueType.UInt32,
    desc: "Minimum and maximum DEFAULT speed for vehicles, in kilometres per hour",
  },
  0x4998c901: {
    id: 0x4998c901,
    name: "Ped Density Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps city population to a multiplier (0.0-1.0) for ped (sim) density",
  },
  0x4998c902: {
    id: 0x4998c902,
    name: "Vehicle Lifespan Range",
    type: ExemplarValueType.UInt8,
    desc: "Number of cells that occupant-trip vehicles should travel before disappearing",
  },
  0x4998c903: {
    id: 0x4998c903,
    name: "Max Peds Per Second",
    type: ExemplarValueType.Float32,
    desc: "Max number of peds to cross a tile per second",
  },
  0x4998c904: {
    id: 0x4998c904,
    name: "Max Peds",
    type: ExemplarValueType.UInt32,
    desc: "Maximum number of pedestrians at one time",
  },
  0x4998c905: {
    id: 0x4998c905,
    name: "Ped Min/Max KPH",
    type: ExemplarValueType.UInt32,
    desc: "Minimum and maximum DEFAULT speed for pedestrians, in kilometres per hour",
  },
  0x4998c908: {
    id: 0x4998c908,
    name: "Max Aircraft",
    type: ExemplarValueType.UInt32,
    desc: "Maximum number of aircraft at one time",
  },
  0x4998c909: {
    id: 0x4998c909,
    name: "Ped Lifespan Range",
    type: ExemplarValueType.UInt8,
    desc: "Number of cells that occupant-trip pedestrians should travel before disappearing",
  },
  0x4998c90a: {
    id: 0x4998c90a,
    name: "Occupant Trip Noise Range",
    type: ExemplarValueType.Float32,
    desc: "Range for random value used to dampen occupancy values when generating occupant trips",
  },
  0x4998c90b: {
    id: 0x4998c90b,
    name: "Max Watercraft",
    type: ExemplarValueType.UInt32,
    desc: "Maximum number of watercraft at one time",
  },
  0x4998c90c: {
    id: 0x4998c90c,
    name: "Commute clock",
    type: ExemplarValueType.Float32,
    desc: "Maps time of day on 24-hour clock to a percentage of commute automata generated (0.0 - 1.0)",
  },
  0x4998c90d: {
    id: 0x4998c90d,
    name: "Bus clock",
    type: ExemplarValueType.Float32,
    desc: "Maps time of day on 24-hour clock to a percentage of bus automata generated (0.0 - 1.0)",
  },
  0x4998c90e: {
    id: 0x4998c90e,
    name: "Freight train clock",
    type: ExemplarValueType.Float32,
    desc: "Maps time of day on 24-hour clock to a percentage of freight train automata generated (0.0 - 1.0)",
  },
  0x4998c90f: {
    id: 0x4998c90f,
    name: "Commute train clock",
    type: ExemplarValueType.Float32,
    desc: "Maps time of day on 24-hour clock to a percentage of commute train automata generated (0.0 - 1.0)",
  },
  0x4998c910: {
    id: 0x4998c910,
    name: "Occupant trip clock",
    type: ExemplarValueType.Float32,
    desc: "Maps time of day on 24-hour clock to a percentage of occupant trip automata generated (0.0 - 1.0)",
  },
  0x4998c911: {
    id: 0x4998c911,
    name: "Freight truck clock",
    type: ExemplarValueType.Float32,
    desc: "Maps time of day on 24-hour clock to a percentage of freight truck automata generated (0.0 - 1.0)",
  },
  0x4998c912: {
    id: 0x4998c912,
    name: "Stop Sign Delay",
    type: ExemplarValueType.Float32,
    desc: "How long in seconds an automaton will pause at a stop sign",
  },
  0x4998c913: {
    id: 0x4998c913,
    name: "Street Go Time",
    type: ExemplarValueType.Float32,
    desc: "How long in seconds traffic coming from secondary streets gets the green light",
  },
  0x4998c914: {
    id: 0x4998c914,
    name: "Road Go Time",
    type: ExemplarValueType.Float32,
    desc: "How long in seconds traffic coming from main roads gets the green light",
  },
  0x4998c915: {
    id: 0x4998c915,
    name: "Avenue Go Time",
    type: ExemplarValueType.Float32,
    desc: "How long in seconds traffic coming from avenues/boulevards gets the green light",
  },
  0x4998c916: {
    id: 0x4998c916,
    name: "Fade Time",
    type: ExemplarValueType.Float32,
    desc: "How long in seconds it takes automata to fade in or out",
  },
  0x4998c918: {
    id: 0x4998c918,
    name: "Vehicle Min Zoom Visibility",
    type: ExemplarValueType.UInt8,
    desc: "Lowest zoom level at which vehicles are visible",
  },
  0x4998c919: {
    id: 0x4998c919,
    name: "Pedestrian Min Zoom Visibility",
    type: ExemplarValueType.UInt8,
    desc: "Lowest zoom level at which pedestrians are visible",
  },
  0x4998c91a: {
    id: 0x4998c91a,
    name: "Aircraft Min Zoom Visibility",
    type: ExemplarValueType.UInt8,
    desc: "Lowest zoom level at which aircraft are visible",
  },
  0x4998c91b: {
    id: 0x4998c91b,
    name: "Watercraft Min Zoom Visibility",
    type: ExemplarValueType.UInt8,
    desc: "Lowest zoom level at which watercraft are visible",
  },
  0x4998c91c: {
    id: 0x4998c91c,
    name: "Use 24-hour clock",
    type: ExemplarValueType.Bool,
    desc: "Automata should base traffic levels on 24-hour clock",
  },
  0x4998c91d: {
    id: 0x4998c91d,
    name: "Occupant Trip Population Radius",
    type: ExemplarValueType.UInt8,
    desc: "How many cells around a road tile the system will check population for occupant trips",
  },
  0x499afa38: {
    id: 0x499afa38,
    name: "Construction Time",
    type: ExemplarValueType.UInt8,
    desc: "Construction time in Sim-days",
  },
  0x49a195c0: {
    id: 0x49a195c0,
    name: "Power line curve distance between points",
    type: ExemplarValueType.Float32,
    desc: "Distance between the points generated for power line curves",
  },
  0x49a1e05a: {
    id: 0x49a1e05a,
    name: "Requester Satisfaction",
    type: ExemplarValueType.UInt32,
    desc: "What prop requester this prop satisfies.",
  },
  0x49a1e8c4: {
    id: 0x49a1e8c4,
    name: "Power line control horiz. %",
    type: ExemplarValueType.Float32,
    desc: "Percent of line length at which to place control points, horizontally",
  },
  0x49a2e8be: {
    id: 0x49a2e8be,
    name: "Freight traffic scaling factor",
    type: ExemplarValueType.Float32,
    desc: "Percentage of industrial bldg. population that will generate freight trips",
  },
  0x49a34301: {
    id: 0x49a34301,
    name: "Crime Prop Request Curve",
    type: ExemplarValueType.Float32,
    desc: "Crime level (0-1) vs. Prop Share",
  },
  0x49be9565: {
    id: 0x49be9565,
    name: "Drive on Right",
    type: ExemplarValueType.Bool,
    desc: "DEBUG ONLY - Sims drive on the right side of the road, like proper Americans",
  },
  0x49beda31: {
    id: 0x49beda31,
    name: "MaxFireStage",
    type: ExemplarValueType.UInt8,
    desc: "(0-5) highest fire stage this occupant can reach",
  },
  0x49c9c93c: {
    id: 0x49c9c93c,
    name: "Nighttime State Change",
    type: ExemplarValueType.UInt8,
    desc: "How this prop reacts to night",
  },
  0x49cac341: {
    id: 0x49cac341,
    name: "Plop Cost",
    type: ExemplarValueType.SInt64,
    desc: "Cost to plop this building",
  },
  0x49d55951: {
    id: 0x49d55951,
    name: "NetworkPlacementPattern",
    type: ExemplarValueType.UInt8,
    desc: "NetworkPlacementPattern. Min:0:0. Max:3:3. Z+1:0 for each movement to the right. Z+0:1 for each movement down",
  },
  0x49e5522f: {
    id: 0x49e5522f,
    name: "AutoScrollSpeed",
    type: ExemplarValueType.Float32,
    desc: "Speed of scrolling when cursor hits screen edge.",
  },
  0x4a08c500: {
    id: 0x4a08c500,
    name: "QuakeBrushStrengthAtEpicenterVsQuakeIntensity",
    type: ExemplarValueType.Float32,
    desc: "Brush strength multiplier at epicentre vs. quake intensity",
  },
  0x4a08c501: {
    id: 0x4a08c501,
    name: "QuakeBrushWidthAtEpicenterVsQuakeIntensity",
    type: ExemplarValueType.Float32,
    desc: "Brush width multiplier at epicentre vs. quake intensity",
  },
  0x4a08c502: {
    id: 0x4a08c502,
    name: "QuakeBrushStrengthVsDistance",
    type: ExemplarValueType.Float32,
    desc: "Variation of brush strength with distance from epicentre",
  },
  0x4a08c503: {
    id: 0x4a08c503,
    name: "QuakeBrushWidthVsDistance",
    type: ExemplarValueType.Float32,
    desc: "Variation of brush width with distance from epicentre",
  },
  0x4a08c504: {
    id: 0x4a08c504,
    name: "QuakeDistBetweenEffects",
    type: ExemplarValueType.Float32,
    desc: "Distance in meters, specifying how far apart we place effects",
  },
  0x4a08c505: {
    id: 0x4a08c505,
    name: "QuakeFaultLineCurviness",
    type: ExemplarValueType.Float32,
    desc: "Max deviation from a straight fault line",
  },
  0x4a08c506: {
    id: 0x4a08c506,
    name: "QuakeMaxFaultLineSlopeVariation",
    type: ExemplarValueType.Float32,
    desc: "Max variation (degrees) in the slope of fault line",
  },
  0x4a08c507: {
    id: 0x4a08c507,
    name: "QuakeBrushTravelSpeed",
    type: ExemplarValueType.Float32,
    desc: "Speed (meters/sec) with which earthquake brush moves",
  },
  0x4a08c508: {
    id: 0x4a08c508,
    name: "QuakeMicroSecsBetweenShakeEffects",
    type: ExemplarValueType.UInt32,
    desc: "Microsecs between shake effects",
  },
  0x4a08c509: {
    id: 0x4a08c509,
    name: "QuakeDistBetweenAutomataRepulsors",
    type: ExemplarValueType.Float32,
    desc: "Distance in meters, specifying how far apart we place automata repulsers",
  },
  0x4a08c600: {
    id: 0x4a08c600,
    name: "PipeBurstMinLeakTimeBeforeBurst",
    type: ExemplarValueType.Float32,
    desc: "Min time (secs) from onset of leak until burst happens",
  },
  0x4a08c601: {
    id: 0x4a08c601,
    name: "PipeBurstMaxLeakTimeBeforeBurst",
    type: ExemplarValueType.Float32,
    desc: "Max time (secs) from onset of leak until burst happens",
  },
  0x4a08c700: {
    id: 0x4a08c700,
    name: "Effect Name",
    type: ExemplarValueType.String,
    desc: "Specifies base name of disaster effect",
  },
  0x4a08c701: {
    id: 0x4a08c701,
    name: "Disaster ID",
    type: ExemplarValueType.UInt32,
    desc: "Specifies the ID of the disaster manager to use",
  },
  0x4a08c702: {
    id: 0x4a08c702,
    name: "StopPickAtWaterSurface",
    type: ExemplarValueType.Bool,
    desc: "Mouse pick for disaster trigger should choose water surface instead of terrain bed underneath",
  },
  0x4a0b47e0: {
    id: 0x4a0b47e0,
    name: "DataView: Type filter",
    type: ExemplarValueType.UInt32,
    desc: "Occupant types to include or exclude (0=unused). This is for the city overlay",
  },
  0x4a0b47e1: {
    id: 0x4a0b47e1,
    name: "DataView: Invert filter",
    type: ExemplarValueType.Bool,
    desc: "If true, the occupant filter is exclusive rather than inclusive. This is for the city overlay",
  },
  0x4a0b47e2: {
    id: 0x4a0b47e2,
    name: "DataView: Hide zones",
    type: ExemplarValueType.Bool,
    desc: "If true, zoning decals are hidden.",
  },
  0x4a0b47e3: {
    id: 0x4a0b47e3,
    name: "DataView: View level",
    type: ExemplarValueType.UInt32,
    desc: "Controls the view level, specifying surface or underground view.",
  },
  0x4a0b47e4: {
    id: 0x4a0b47e4,
    name: "DataView: Colour ramp",
    type: ExemplarValueType.UInt32,
    desc: "Colour progression to use for data.",
  },
  0x4a0b47e5: {
    id: 0x4a0b47e5,
    name: "DataView: Data source",
    type: ExemplarValueType.UInt32,
    desc: "Data overlay to display.",
  },
  0x4a0b47e6: {
    id: 0x4a0b47e6,
    name: "DataView: Zone opacity",
    type: ExemplarValueType.UInt8,
    desc: "Override value for undeveloped zone opacity (0-255).",
  },
  0x4a0b47e7: {
    id: 0x4a0b47e7,
    name: "DataView: Interpolate data",
    type: ExemplarValueType.Bool,
    desc: "If true, data map is interpolated to city cell resolution.",
  },
  0x4a0b47e8: {
    id: 0x4a0b47e8,
    name: "DataView: Quantize lots",
    type: ExemplarValueType.UInt32,
    desc: "Force data to be uniform over lots, possibly of a specific type.",
  },
  0x4a0b47e9: {
    id: 0x4a0b47e9,
    name: "DataView: Highlight mode",
    type: ExemplarValueType.UInt32,
    desc: "Specifies building types for coverage rings and highlights.",
  },
  0x4a0b47ea: {
    id: 0x4a0b47ea,
    name: "DataView: Coverage effect",
    type: ExemplarValueType.String,
    desc: "Specifies visual effect for coverage rings for the Highlight mode buildings.",
  },
  0x4a0b47eb: {
    id: 0x4a0b47eb,
    name: "DataView: Custom view",
    type: ExemplarValueType.UInt32,
    desc: "Specifies a CLSID of special code to create a custom view.",
  },
  0x4a0b47ec: {
    id: 0x4a0b47ec,
    name: "DataView: Maximum scale",
    type: ExemplarValueType.UInt32,
    desc: "Specifies a scaling factor for 16-bit maps.",
  },
  0x4a0b47ed: {
    id: 0x4a0b47ed,
    name: "DataView: Demand type",
    type: ExemplarValueType.UInt32,
    desc: "Specifies a layer subtype for development layers (R$, CO$$, etc.)",
  },
  0x4a0b47ee: {
    id: 0x4a0b47ee,
    name: "DataView: Coverage circle colour",
    type: ExemplarValueType.UInt32,
    desc: "Enables coverage circles for current Highlight Mode type with given colour (0xRRGGBB, HTML-style).",
  },
  0x4a0b47ef: {
    id: 0x4a0b47ef,
    name: "DataView: Highlight colour",
    type: ExemplarValueType.UInt32,
    desc: "Shows highlighted buildings on 2D map with given colour (0xAARRGGBB).",
  },
  0x4a0b47f0: {
    id: 0x4a0b47f0,
    name: "DataView: Force zones",
    type: ExemplarValueType.Bool,
    desc: "If true, developed lots will show up as plain zone colouring.",
  },
  0x4a0b47f1: {
    id: 0x4a0b47f1,
    name: "DataView: Network Visible Level",
    type: ExemplarValueType.UInt8,
    desc: "Sets which Network(s) are visible.",
  },
  0x4a0b47f2: {
    id: 0x4a0b47f2,
    name: "DataView: Legends Colour",
    type: ExemplarValueType.UInt32,
    desc: "Set Colour for legend on Data view",
  },
  0x4a0b47f3: {
    id: 0x4a0b47f3,
    name: "DataView: Legends Labels",
    type: ExemplarValueType.UInt32,
    desc: "Controls the Labels for the Dataview maps, each ID usually referencing a text based file",
  },
  0x4a0b47f4: {
    id: 0x4a0b47f4,
    name: "DataView: Legends Header",
    type: ExemplarValueType.UInt32,
    desc: "Selects building types for coverage rings and highlights. Relates to the labels above the dataview maps for each map, ID referencing a text based file.",
  },
  0x4a0b47f5: {
    id: 0x4a0b47f5,
    name: "DataView: Show zone map",
    type: ExemplarValueType.Bool,
    desc: "Controls the RCI zonesto be displayed in the 2D Dataview map itself.",
  },
  0x4a149631: {
    id: 0x4a149631,
    name: "Prop Time of Day",
    type: ExemplarValueType.Float32,
    desc: "Range of hours on 24-hour clock (0-23) when prop will be at state 0 (visible).  If start and end times are both 0, always visible.",
  },
  0x4a1f38b5: {
    id: 0x4a1f38b5,
    name: "Demand: Neutral Tax Rate vs. Population",
    type: ExemplarValueType.Float32,
    desc: "What is the highest tax rate you can set before demand suffers?",
  },
  0x4a1f38b6: {
    id: 0x4a1f38b6,
    name: "Demand: Tax Modifier vs. Rate Variance",
    type: ExemplarValueType.Float32,
    desc: "How much is demand impacted by tax rates above or below neutral?",
  },
  0x4a1f38b7: {
    id: 0x4a1f38b7,
    name: "Demand: Days of Tax Penalty",
    type: ExemplarValueType.UInt32,
    desc: "How long a high tax rate depresses demand (even after it is lowered)",
  },
  0x4a1f38c5: {
    id: 0x4a1f38c5,
    name: "Demand Cap Relief: Neighbour Connections",
    type: ExemplarValueType.Float32,
    desc: "Commercial Cap Relief for first Neighbour Connection(more have diminishing returns)",
  },
  0x4a1f38c6: {
    id: 0x4a1f38c6,
    name: "Demand Cap Relief: Airports",
    type: ExemplarValueType.Float32,
    desc: "Commercial Cap Relief per connected Co population",
  },
  0x4a1f38c7: {
    id: 0x4a1f38c7,
    name: "Demand Cap Relief: Seaports",
    type: ExemplarValueType.Float32,
    desc: " Commercial Cap Relief per Industrial Trip",
  },
  0x4a1f38c8: {
    id: 0x4a1f38c8,
    name: "Demand Cap Relief: Trips",
    type: ExemplarValueType.Float32,
    desc: "Industrial Cap Relief per Neighbour Trip",
  },
  0x4a1f38c9: {
    id: 0x4a1f38c9,
    name: "Demand Cap Relief: Airports",
    type: ExemplarValueType.Float32,
    desc: "Industrial Cap Relief per connected Co population",
  },
  0x4a1f38ca: {
    id: 0x4a1f38ca,
    name: "Demand Cap Relief: Seaports",
    type: ExemplarValueType.Float32,
    desc: "Industrial Cap Relief per Industrial Trip",
  },
  0x4a1f629f: {
    id: 0x4a1f629f,
    name: "Nation: Demand ID list",
    type: ExemplarValueType.UInt32,
    desc: "List of IDs corresponding to Demand Modifiers",
  },
  0x4a1f62a0: {
    id: 0x4a1f62a0,
    name: "Nation: Default Demand Modifier vs. Month",
    type: ExemplarValueType.Float32,
    desc: "Demand boost over time",
  },
  0x4a1f62a1: {
    id: 0x4a1f62a1,
    name: "Nation: Demand Modifier 1 vs. Month",
    type: ExemplarValueType.Float32,
    desc: "Demand boost over time",
  },
  0x4a1f62a2: {
    id: 0x4a1f62a2,
    name: "Nation: Demand Modifier 2 vs. Month",
    type: ExemplarValueType.Float32,
    desc: "Demand boost over time",
  },
  0x4a1f62a3: {
    id: 0x4a1f62a3,
    name: "Nation: Demand Modifier 3 vs. Month",
    type: ExemplarValueType.Float32,
    desc: "Demand boost over time",
  },
  0x4a1f62a4: {
    id: 0x4a1f62a4,
    name: "Nation: Demand Modifier 4 vs. Month",
    type: ExemplarValueType.Float32,
    desc: "Demand boost over time",
  },
  0x4a1f62a5: {
    id: 0x4a1f62a5,
    name: "Nation: Demand Modifier 5 vs. Month",
    type: ExemplarValueType.Float32,
    desc: "Demand boost over time",
  },
  0x4a1f62a6: {
    id: 0x4a1f62a6,
    name: "Nation: Demand Modifier 6 vs. Month",
    type: ExemplarValueType.Float32,
    desc: "Demand boost over time",
  },
  0x4a1f62a7: {
    id: 0x4a1f62a7,
    name: "Nation: Demand Modifier 7 vs. Month",
    type: ExemplarValueType.Float32,
    desc: "Demand boost over time",
  },
  0x4a1f62a8: {
    id: 0x4a1f62a8,
    name: "Nation: Demand Modifier 8 vs. Month",
    type: ExemplarValueType.Float32,
    desc: "Demand boost over time",
  },
  0x4a1f62a9: {
    id: 0x4a1f62a9,
    name: "Nation: Demand Modifier 9 vs. Month",
    type: ExemplarValueType.Float32,
    desc: "Demand boost over time",
  },
  0x4a1f62b0: {
    id: 0x4a1f62b0,
    name: "Nation: Demand Modifier 10 vs. Month",
    type: ExemplarValueType.Float32,
    desc: "Demand boost over time",
  },
  0x4a1f62b1: {
    id: 0x4a1f62b1,
    name: "Nation: Demand Modifier 11 vs. Month",
    type: ExemplarValueType.Float32,
    desc: "Demand boost over time",
  },
  0x4a1f62b2: {
    id: 0x4a1f62b2,
    name: "Nation: Demand Modifier 12 vs. Month",
    type: ExemplarValueType.Float32,
    desc: "Demand boost over time",
  },
  0x4a1f6300: {
    id: 0x4a1f6300,
    name: "Nation: Difficulty Demand Modifier",
    type: ExemplarValueType.Float32,
    desc: "Demand boost, indexed by difficulty: Easy, Medium, Hard",
  },
  0x4a270db0: {
    id: 0x4a270db0,
    name: "Construction Crew Time",
    type: ExemplarValueType.Float32,
    desc: "Number of seconds the construction crew will spend per tile while building network",
  },
  0x4a270e94: {
    id: 0x4a270e94,
    name: "Construction Crew Vehicle Speed",
    type: ExemplarValueType.Float32,
    desc: "Speed of construction crew vehicles in meters/second",
  },
  0x4a271248: {
    id: 0x4a271248,
    name: "Construction Crew Lead Vehicle Instance",
    type: ExemplarValueType.UInt32,
    desc: "Instance ID of construction crew lead vehicle. Item relates to the animations that appear when laying down the different networks",
  },
  0x4a27124f: {
    id: 0x4a27124f,
    name: "Construction Crew Follow Vehicle Instance",
    type: ExemplarValueType.UInt32,
    desc: "Instance ID of construction crew follow vehicle. Item relates to the animations that appear when laying down the different networks",
  },
  0x4a275748: {
    id: 0x4a275748,
    name: "Construction Crew Vehicle Path Type",
    type: ExemplarValueType.UInt32,
    desc: "Type of path used by construction crew vehicles (0=None, 1=Auto, 2=Ped, 3=Train, 4=Subway",
  },
  0x4a280510: {
    id: 0x4a280510,
    name: "Landfill: Garbage Decay Rate",
    type: ExemplarValueType.Float32,
    desc: "The rate at which garbage decays in units per month",
  },
  0x4a280513: {
    id: 0x4a280513,
    name: "Landfill: Level Tolerance Threshold",
    type: ExemplarValueType.Float32,
    desc: "The altitude variance of the landfill zone before levelling will take place",
  },
  0x4a2d49b9: {
    id: 0x4a2d49b9,
    name: "Simoleon Cost Per Tile",
    type: ExemplarValueType.UInt32,
    desc: "Cost to create a tile of network using this tool",
  },
  0x4a4a88f0: {
    id: 0x4a4a88f0,
    name: "Road Corner Indicator",
    type: ExemplarValueType.UInt8,
    desc: "0C: Right Corner. 09: Left Corner. 08: Normal",
  },
  0x4a4bc714: {
    id: 0x4a4bc714,
    name: "VolcanoLavaCurveSolidifcationRate",
    type: ExemplarValueType.Float32,
    desc: "Solidification Rate for the Flow of Volcano Lava (Input Time in Fraction from [0, 1])",
  },
  0x4a4c132e: {
    id: 0x4a4c132e,
    name: "SFX:Activate Sound",
    type: ExemplarValueType.UInt32,
    desc: "GUID of sound played when building goes online",
  },
  0x4a511873: {
    id: 0x4a511873,
    name: "Bus Density Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps city population to a multiplier (0.0-1.0) for bus density",
  },
  0x4a5f5953: {
    id: 0x4a5f5953,
    name: "Power Pole: Cost",
    type: ExemplarValueType.UInt32,
    desc: "Cost to place a power pole using the power line tool",
  },
  0x4a5f7315: {
    id: 0x4a5f7315,
    name: "Desirability Effect Values",
    type: ExemplarValueType.Float32,
    desc: "Radius in cells, Max effect, and min effect for each developer",
  },
  0x4a5f7c4b: {
    id: 0x4a5f7c4b,
    name: "Desirability Effect IDs",
    type: ExemplarValueType.UInt32,
    desc: "Growth Developer IDs to go with next property",
  },
  0x4a652679: {
    id: 0x4a652679,
    name: "Max Garbage on Valve",
    type: ExemplarValueType.UInt32,
    desc: "Maximum amount of garbage units the valve can hold",
  },
  0x4a65267a: {
    id: 0x4a65267a,
    name: "Landfill Tile Capacity",
    type: ExemplarValueType.UInt32,
    desc: "Amount of garbage units each landfill tile can hold",
  },
  0x4a6676ad: {
    id: 0x4a6676ad,
    name: "Zoo Escape Chance Curve",
    type: ExemplarValueType.Float32,
    desc: "Input: park efficiency (0-100)  Output: Chance of zoo escape each month (0-100)",
  },
  0x4a677e5b: {
    id: 0x4a677e5b,
    name: "Landfill: Total Max Garbage Monthly",
    type: ExemplarValueType.UInt32,
    desc: "The max total amount of garbage units taken in by landfills monthly",
  },
  0x4a677e5c: {
    id: 0x4a677e5c,
    name: "Landfill: Monthly Max Garbage per Landfill",
    type: ExemplarValueType.UInt32,
    desc: "The max amount of garbage units taken in by each landfill monthly",
  },
  0x4a677e5d: {
    id: 0x4a677e5d,
    name: "Landfill: Move Landfill Tiles with Terrain",
    type: ExemplarValueType.Bool,
    desc: "Flag indicating whether or not to move landfill tiles with terrain",
  },
  0x4a677e5e: {
    id: 0x4a677e5e,
    name: "Landfill: Monthly Max Garbage Decayed per Landfill",
    type: ExemplarValueType.UInt32,
    desc: "The max amount of garbage units to decay in each landfill monthly",
  },
  0x4a677e5f: {
    id: 0x4a677e5f,
    name: "Landfill: Default Landfill Cell Maintenance Cost",
    type: ExemplarValueType.SInt64,
    desc: "Monthly maintenance cost of a landfill cell (can be overridden by the model budget cost property)",
  },
  0x4a678060: {
    id: 0x4a678060,
    name: "Pathfinding Heuristic",
    type: ExemplarValueType.Float32,
    desc: "Lower value means more accurate Pathfinding, but at a cost of more CPU time/usage",
  },
  0x4a70d491: {
    id: 0x4a70d491,
    name: "States as Frames",
    type: ExemplarValueType.Bool,
    desc: "Add this property only if prop states are visually depicted by different frames in an animated model instance",
  },
  0x4a751ad5: {
    id: 0x4a751ad5,
    name: "Prop Random Chance",
    type: ExemplarValueType.UInt8,
    desc: "Random chance (0-100) of this prop appearing according to time-of-day and simulator date",
  },
  0x4a764564: {
    id: 0x4a764564,
    name: "PropDuration",
    type: ExemplarValueType.UInt32,
    desc: "How long in Simulator Days the prop/effect will stay active once triggered",
  },
  0x4a7cb3ba: {
    id: 0x4a7cb3ba,
    name: "Audio: Min Music Volume Level",
    type: ExemplarValueType.UInt32,
    desc: "Minimum music volume level setting for slider in audio prefs (0-1024)",
  },
  0x4a7cb3bb: {
    id: 0x4a7cb3bb,
    name: "Audio: Min Sound Volume Level",
    type: ExemplarValueType.UInt32,
    desc: "Minimum sound volume level setting for slider in audio prefs (0-1024)",
  },
  0x4a7cb3bc: {
    id: 0x4a7cb3bc,
    name: "Audio: Max Music Volume Level",
    type: ExemplarValueType.UInt32,
    desc: "Max music volume level setting for slider in audio prefs (0-1024)",
  },
  0x4a7cb3bd: {
    id: 0x4a7cb3bd,
    name: "Audio: Max Sound Volume Level",
    type: ExemplarValueType.UInt32,
    desc: "Max sound volume level setting for slider in audio prefs (0-1024)",
  },
  0x4a7cb3be: {
    id: 0x4a7cb3be,
    name: "Audio: Music Vol Adjustment",
    type: ExemplarValueType.UInt32,
    desc: "Amount by which to adjust music volume such that at 80 percent it matches the sfx volume at full",
  },
  0x4a7cb3bf: {
    id: 0x4a7cb3bf,
    name: "Audio: Music Fadeout Time (ms)",
    type: ExemplarValueType.UInt32,
    desc: "Time (in ms) within which music fades out when switching radio stations",
  },
  0x4a89fcf3: {
    id: 0x4a89fcf3,
    name: "Previewable",
    type: ExemplarValueType.Bool,
    desc: "If set to true, the prop will appear in the building plop preview",
  },
  0x4a946a5d: {
    id: 0x4a946a5d,
    name: "Audio:Max Playing Sounds",
    type: ExemplarValueType.UInt32,
    desc: "Max playing sounds",
  },
  0x4a9f188b: {
    id: 0x4a9f188b,
    name: "Light",
    type: ExemplarValueType.Bool,
    desc: "Set if prop has a light mask and should light up at night with the lot building.",
  },
  0x4aa03db1: {
    id: 0x4aa03db1,
    name: "Audio:LayerVolumeSmoothDelta",
    type: ExemplarValueType.UInt32,
    desc: "Layer volume smoothing delta limit",
  },
  0x4aa60ebc: {
    id: 0x4aa60ebc,
    name: "Catalogue Capacity",
    type: ExemplarValueType.UInt32,
    desc: "Value for displaying capacity in the catalogue. Value is not actually simulated: is just a displayed amount",
  },
  0x4aa84161: {
    id: 0x4aa84161,
    name: "Maximum EQ Boost",
    type: ExemplarValueType.Float32,
    desc: "Max EQ boost achievable without reward buildings.  Used to scale values for Sims opinion polls.",
  },
  0x4ab70dac: {
    id: 0x4ab70dac,
    name: "Death's door effect chance",
    type: ExemplarValueType.Float32,
    desc: "Percent chance (0-100.0) that the effect will play for a tract that's at death's door.",
  },
  0x4ab71659: {
    id: 0x4ab71659,
    name: "Death's door effect height delta",
    type: ExemplarValueType.Float32,
    desc: "Random height variance for effect for a tract that's at death's door.",
  },
  0x4ac519b8: {
    id: 0x4ac519b8,
    name: "Budget: Land Value to Simoleons",
    type: ExemplarValueType.Float32,
    desc: "For each taxable square of the given land value, the number of Simoleons produced",
  },
  0x4b61ffc9: {
    id: 0x4b61ffc9,
    name: "MaxUnitCostForGarbageDealsRCurve",
    type: ExemplarValueType.Float32,
    desc: "Maps true simulation cost to synthetic cost value used by garbage deals.",
  },
  0x4b733e12: {
    id: 0x4b733e12,
    name: "Automaton Display Name",
    type: ExemplarValueType.String,
    desc: "Player-visible name of this automaton during query",
  },
  0x4bae8fe0: {
    id: 0x4bae8fe0,
    name: "Speed Multiplier by Network",
    type: ExemplarValueType.Float32,
    desc: "Has only a visual impact. Multiply by default speed on: Road, Rail, Highway, Street, Pipe, Powerline, Avenue, Subway, Elevated Rail, Monorail, 1-Way Road, Dirt Road, Ground Highway",
  },
  0x4bae8fe1: {
    id: 0x4bae8fe1,
    name: "Lane Switch Cost",
    type: ExemplarValueType.Float32,
    desc: "Cost to add per vehicle when deciding whether to switch lanes to pass slower-moving vehicles",
  },
  0x4bae8fe2: {
    id: 0x4bae8fe2,
    name: "Lane Switch Max Distance",
    type: ExemplarValueType.Float32,
    desc: "Max distance in meters that a vehicle will switch lanes on a multi-lane network",
  },
  0x4be09ec9: {
    id: 0x4be09ec9,
    name: "Congestion to Accident Probability",
    type: ExemplarValueType.Float32,
    desc: "Maps congestion to accident probability",
  },
  0x4be09eca: {
    id: 0x4be09eca,
    name: "Capacity to Accident Probability",
    type: ExemplarValueType.Float32,
    desc: "Maps capacity to accident probability",
  },
  0x4be09ecb: {
    id: 0x4be09ecb,
    name: "Accident Duration",
    type: ExemplarValueType.Float32,
    desc: "Time (in seconds) that a traffic accident lasts",
  },
  0x4be09ecc: {
    id: 0x4be09ecc,
    name: "Accident Check Period",
    type: ExemplarValueType.Float32,
    desc: "Period (in seconds) that the traffic sim tests for accidents",
  },
  0x4bfc47b0: {
    id: 0x4bfc47b0,
    name: "Transit Switch Capacity Effect",
    type: ExemplarValueType.Bool,
    desc: "If true, this building radiates capacity reduction like intersections do",
  },
  0x4bfdd955: {
    id: 0x4bfdd955,
    name: "Audio:AEMSVolumeCurve",
    type: ExemplarValueType.Float32,
    desc: "AEMS Volume curve",
  },
  0x4c1832f5: {
    id: 0x4c1832f5,
    name: "UDIProp:MarinaBoat6",
    type: ExemplarValueType.UInt8,
    desc: "Property is a key that controls what particular kind of Prop should appear. Some UDIProp Keys are tied in directly with UDI missions",
  },
  0x4c18336d: {
    id: 0x4c18336d,
    name: "UDIProp:MarinaBoat1",
    type: ExemplarValueType.UInt8,
    desc: "Property is a key that controls what particular kind of Prop should appear. Some UDIProp Keys are tied in directly with UDI missions",
  },
  0x66fbf7a9: {
    id: 0x66fbf7a9,
    name: "CloudsHeight",
    type: ExemplarValueType.Float32,
    desc: "Height that clouds float at",
  },
  0x66fbf7aa: {
    id: 0x66fbf7aa,
    name: "CloudsFormHeight",
    type: ExemplarValueType.Float32,
    desc: "Lowest terrain height that clouds form over",
  },
  0x66fbf7ab: {
    id: 0x66fbf7ab,
    name: "CloudsFadeInHeight",
    type: ExemplarValueType.Float32,
    desc: "Lowest terrain height that clouds have max opacity",
  },
  0x66fbf7ac: {
    id: 0x66fbf7ac,
    name: "CloudsFadeOutHeight",
    type: ExemplarValueType.Float32,
    desc: "Terrain height above which clouds begin to fade",
  },
  0x66fbf7ad: {
    id: 0x66fbf7ad,
    name: "CloudsDisperseHeight",
    type: ExemplarValueType.Float32,
    desc: "Terrain height above which clouds fade completely",
  },
  0x66fbf7ae: {
    id: 0x66fbf7ae,
    name: "CloudsSlowDownHeight",
    type: ExemplarValueType.Float32,
    desc: "Terrain height above which clouds begin to slow",
  },
  0x66fbf7af: {
    id: 0x66fbf7af,
    name: "CloudsStopHeight",
    type: ExemplarValueType.Float32,
    desc: "Terrain height above which clouds stop completely",
  },
  0x66fbf7b0: {
    id: 0x66fbf7b0,
    name: "CloudsSizeRange",
    type: ExemplarValueType.Float32,
    desc: "Min and Max of cloud size variation (meters)",
  },
  0x66fbf7b1: {
    id: 0x66fbf7b1,
    name: "CloudsAspectRange",
    type: ExemplarValueType.Float32,
    desc: "Min and Max of cloud aspect ratio variation (0-1)",
  },
  0x66fbf7b2: {
    id: 0x66fbf7b2,
    name: "CloudsOpacityRange",
    type: ExemplarValueType.Float32,
    desc: "Min and Max of cloud opacity variation (0-1)",
  },
  0x66fbf7b3: {
    id: 0x66fbf7b3,
    name: "CloudsIntensityRange",
    type: ExemplarValueType.Float32,
    desc: "Min and Max of cloud intensity variation (0-1)",
  },
  0x66fbf7b4: {
    id: 0x66fbf7b4,
    name: "CloudsSpeedRange",
    type: ExemplarValueType.Float32,
    desc: "Min and Max of cloud speed variation (meters/msec)",
  },
  0x66fbf7b5: {
    id: 0x66fbf7b5,
    name: "CloudsShadeOffsetRange",
    type: ExemplarValueType.Float32,
    desc: "Min and Max scale factors for ShadeOffsetDir",
  },
  0x66fbf7b6: {
    id: 0x66fbf7b6,
    name: "CloudsCursorHideRange",
    type: ExemplarValueType.Float32,
    desc: "Min and Max radii in world units where clouds are hidden by cursor.",
  },
  0x66fbf7b8: {
    id: 0x66fbf7b8,
    name: "CloudsShadeIntensity",
    type: ExemplarValueType.Float32,
    desc: "brightness of shadow quad as % of highlight (0-1)",
  },
  0x66fbf7ba: {
    id: 0x66fbf7ba,
    name: "CloudsSimSpeedFactor",
    type: ExemplarValueType.Float32,
    desc: "Multiplier for cloud speed based on sim speed. Slow Med Fast Paused",
  },
  0x66fbf7bb: {
    id: 0x66fbf7bb,
    name: "CloudsShadeOffsetDir",
    type: ExemplarValueType.Float32,
    desc: "X and Y(Z) offset of shade quad as a ratio of particle size (0-1)",
  },
  0x66fbf7bc: {
    id: 0x66fbf7bc,
    name: "CloudsMaxParticles",
    type: ExemplarValueType.UInt32,
    desc: "Max # of cloud particles that can exist at once",
  },
  0x66fbf7bd: {
    id: 0x66fbf7bd,
    name: "CloudsMinFadeInTime",
    type: ExemplarValueType.Float32,
    desc: "Min time for particles to fade in when they spawn visible, or to fade out when they die due to age. (Milliseconds)",
  },
  0x66fbf7be: {
    id: 0x66fbf7be,
    name: "CloudsParticleMaxAge",
    type: ExemplarValueType.Float32,
    desc: "Max particle lifetime (Milliseconds)",
  },
  0x66fbf7bf: {
    id: 0x66fbf7bf,
    name: "CloudsParticleGenRate",
    type: ExemplarValueType.Float32,
    desc: "Particle spawning rate (Particles per second)",
  },
  0x66fbf7c0: {
    id: 0x66fbf7c0,
    name: "CloudsAllowHiddenParticles",
    type: ExemplarValueType.Bool,
    desc: "if true, particles are still simulated outside of regions where clouds are visible",
  },
  0x66fbf7c1: {
    id: 0x66fbf7c1,
    name: "CloudsZoomFade",
    type: ExemplarValueType.Float32,
    desc: "Percent of normal opacity by zoom level. Set to 0 to disable a particular zoom. Top is zoom 1 bottom is zoom 5",
  },
  0x68ddae92: {
    id: 0x68ddae92,
    name: "Police:Max Jail Overcrowding Percentage",
    type: ExemplarValueType.Float32,
    desc: "0.0-100.0, See PoliceSimulator",
  },
  0x68ddae93: {
    id: 0x68ddae93,
    name: "Police:Funding To Efficiency Response Curve",
    type: ExemplarValueType.Float32,
    desc: "See PoliceSimulator",
  },
  0x68ddae95: {
    id: 0x68ddae95,
    name: "Police:Max Allowed Funding Percentage",
    type: ExemplarValueType.Float32,
    desc: "0.0-100.0, See PoliceSimulator",
  },
  0x68ddae97: {
    id: 0x68ddae97,
    name: "Police:Monthly Criminal Rehabilitation Percent",
    type: ExemplarValueType.Float32,
    desc: "0.0-100.0, See PoliceSimulator",
  },
  0x68ddae9a: {
    id: 0x68ddae9a,
    name: "Police:Strike Efficiency",
    type: ExemplarValueType.Float32,
    desc: "0.0-100.0, See PoliceSimulator",
  },
  0x68ddae9b: {
    id: 0x68ddae9b,
    name: "Police:Max Strike Duration",
    type: ExemplarValueType.UInt32,
    desc: "In days. See PoliceSimulator",
  },
  0x68ddae9c: {
    id: 0x68ddae9c,
    name: "Police:Min Funding To End Strikes",
    type: ExemplarValueType.Float32,
    desc: "0.0-100.0, See PoliceSimulator",
  },
  0x68ddae9e: {
    id: 0x68ddae9e,
    name: "Police:Strike Response Curve",
    type: ExemplarValueType.Float32,
    desc: "See PoliceSimulator",
  },
  0x68ddae9f: {
    id: 0x68ddae9f,
    name: "Police:Arrest Threshold",
    type: ExemplarValueType.UInt32,
    desc: "If crime is committed in a cell whose police protection value is above this, they'll get arrested",
  },
  0x68ddaea0: {
    id: 0x68ddaea0,
    name: "Jail, Funding To Efficiency Response Curve",
    type: ExemplarValueType.Float32,
    desc: "See PoliceSimulator",
  },
  0x68ed1736: {
    id: 0x68ed1736,
    name: "Recycling centre population served",
    type: ExemplarValueType.UInt32,
    desc: "Number of people that can be served by this recycling centre",
  },
  0x68ee9764: {
    id: 0x68ee9764,
    name: "Pollution Radius",
    type: ExemplarValueType.Float32,
    desc: "Radius for pollution generated: Air: Water: Garbage: Radiation",
  },
  0x68f26014: {
    id: 0x68f26014,
    name: "Map View Unsigned Colours",
    type: ExemplarValueType.UInt32,
    desc: "RGBA colour of 3D overlay of 2-color map view",
  },
  0x68f26015: {
    id: 0x68f26015,
    name: "Map View Signed Colours",
    type: ExemplarValueType.UInt32,
    desc: "RGBA colour of 3D overlay of 3-color map view",
  },
  0x68f5436a: {
    id: 0x68f5436a,
    name: "Water pipe effect radius",
    type: ExemplarValueType.UInt32,
    desc: "Number of cells surrounding water pipes that will also be watered",
  },
  0x68f5436b: {
    id: 0x68f5436b,
    name: "Fresh water pump reach",
    type: ExemplarValueType.UInt32,
    desc: "Number of cells away from fresh water a water pump can be placed",
  },
  0x68f5436c: {
    id: 0x68f5436c,
    name: "Salt water pump reach",
    type: ExemplarValueType.UInt32,
    desc: "Number of cells away from salt water a water pump can be placed",
  },
  0x68f5436d: {
    id: 0x68f5436d,
    name: "Fresh water distance loss",
    type: ExemplarValueType.UInt32,
    desc: "Percentage by which water production is reduced when not within range of fresh water source",
  },
  0x68fcff37: {
    id: 0x68fcff37,
    name: "FoundationSideTextures",
    type: ExemplarValueType.UInt32,
    desc: "Texture IDs for each zoom level. Mutually exclusive with building model properties.",
  },
  0x68fcff38: {
    id: 0x68fcff38,
    name: "FoundationTopTextures",
    type: ExemplarValueType.UInt32,
    desc: "Texture IDs for each zoom level. Mutually exclusive with building model properties.",
  },
  0x6911e2df: {
    id: 0x6911e2df,
    name: "Power Funding To Efficiency Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps difference between actual % funding and % ideal funding to % of a utility output",
  },
  0x691894a4: {
    id: 0x691894a4,
    name: "Health Strike Response Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps difference between actual % funding and % ideal funding to % chance of a Health strike",
  },
  0x691894c0: {
    id: 0x691894c0,
    name: "School Min Grade to End Strike",
    type: ExemplarValueType.Float32,
    desc: "Minimum grade that all schools must have to end a School strike",
  },
  0x691894c6: {
    id: 0x691894c6,
    name: "School Funding To Efficiency Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps difference between actual % funding and % ideal funding to % of Education output",
  },
  0x691b42b3: {
    id: 0x691b42b3,
    name: "School Coverage Radius",
    type: ExemplarValueType.Float32,
    desc: "Radius of a school's coverage, in meters",
  },
  0x69220415: {
    id: 0x69220415,
    name: "Hospital Patient Capacity",
    type: ExemplarValueType.UInt32,
    desc: "Maximum number of patients served by this hospital",
  },
  0x6929cc92: {
    id: 0x6929cc92,
    name: "Medium Wealth HQ",
    type: ExemplarValueType.UInt8,
    desc: "HQ assigned to new Medium Wealth residents",
  },
  0x692ef65a: {
    id: 0x692ef65a,
    name: "School EQ Decay Effect",
    type: ExemplarValueType.Float32,
    desc: "Percentage (from 0 to 200%) by which this ordinance affects the rate at which EQ decays",
  },
  0x6932dc00: {
    id: 0x6932dc00,
    name: "DistFromShoreToWaveStartLocation",
    type: ExemplarValueType.Float32,
    desc: "Distance (meters) from the shore to the starting location of waves",
  },
  0x6932dc01: {
    id: 0x6932dc01,
    name: "WaveMinProductionInterval",
    type: ExemplarValueType.Float32,
    desc: "Min time (sec) between the production of successive waves",
  },
  0x6932dc02: {
    id: 0x6932dc02,
    name: "WaveMaxProductionInterval",
    type: ExemplarValueType.Float32,
    desc: "Max time (sec) between the production of successive waves",
  },
  0x6932dc03: {
    id: 0x6932dc03,
    name: "WaveInnerRadius",
    type: ExemplarValueType.Float32,
    desc: "Inner radius (meter) of the wave arc",
  },
  0x6932dc04: {
    id: 0x6932dc04,
    name: "WaveOuterRadius",
    type: ExemplarValueType.Float32,
    desc: "Outer radius (meter) of the wave arc",
  },
  0x6932dc05: {
    id: 0x6932dc05,
    name: "WaveArcAngle",
    type: ExemplarValueType.Float32,
    desc: "Arc angle (degrees) for the wave",
  },
  0x6932dc06: {
    id: 0x6932dc06,
    name: "WaveMinTimeInState",
    type: ExemplarValueType.Float32,
    desc: "Min time (sec) the wave spends in each of the states",
  },
  0x6932dc07: {
    id: 0x6932dc07,
    name: "WaveMaxTimeInState",
    type: ExemplarValueType.Float32,
    desc: "Max time (sec) the wave spends in each of the states",
  },
  0x6932dc08: {
    id: 0x6932dc08,
    name: "WaveInitialMoveSpeed",
    type: ExemplarValueType.Float32,
    desc: "Initial movement speed (meter/sec) of  the wave",
  },
  0x6932dc09: {
    id: 0x6932dc09,
    name: "WaveInitialExpandSpeed",
    type: ExemplarValueType.Float32,
    desc: "Initial expansion speed (meter/sec) of  the wave",
  },
  0x6932dc0a: {
    id: 0x6932dc0a,
    name: "WaveMinMoveSpeed",
    type: ExemplarValueType.Float32,
    desc: "Min movement speed (meter/sec) of the wave",
  },
  0x6932dc0b: {
    id: 0x6932dc0b,
    name: "WaveMinExpandSpeed",
    type: ExemplarValueType.Float32,
    desc: "Min expansion speed (meter/sec) of the wave",
  },
  0x6932dc0c: {
    id: 0x6932dc0c,
    name: "WaveMaxMoveSpeed",
    type: ExemplarValueType.Float32,
    desc: "Max movement speed (meter/sec) of the wave",
  },
  0x6932dc0d: {
    id: 0x6932dc0d,
    name: "WaveMaxExpandSpeed",
    type: ExemplarValueType.Float32,
    desc: "Max expansion speed (meter/sec) of the wave",
  },
  0x6932dc0e: {
    id: 0x6932dc0e,
    name: "WaveMinExpandAcceleration",
    type: ExemplarValueType.Float32,
    desc: "Min acceleration of expansion in each of the states",
  },
  0x6932dc0f: {
    id: 0x6932dc0f,
    name: "WaveMaxExpandAcceleration",
    type: ExemplarValueType.Float32,
    desc: "Max acceleration of expansion in each of the states",
  },
  0x6932dc10: {
    id: 0x6932dc10,
    name: "WaveMinMoveAcceleration",
    type: ExemplarValueType.Float32,
    desc: "Min acceleration of movement in each of the states",
  },
  0x6932dc11: {
    id: 0x6932dc11,
    name: "WaveMaxMoveAcceleration",
    type: ExemplarValueType.Float32,
    desc: "Max acceleration of movement in each of the states",
  },
  0x6932dc12: {
    id: 0x6932dc12,
    name: "MaxWaves",
    type: ExemplarValueType.UInt32,
    desc: "Maximum number of waves in the city",
  },
  0x6932dc13: {
    id: 0x6932dc13,
    name: "InterWaveGap",
    type: ExemplarValueType.Float32,
    desc: "Gap (meters) between two waves",
  },
  0x6932dc14: {
    id: 0x6932dc14,
    name: "WaveMaxOrientationDifference",
    type: ExemplarValueType.Float32,
    desc: "Maximum difference in the orientation of different waves",
  },
  0x6941a67f: {
    id: 0x6941a67f,
    name: "Health Quotient to Life Expectancy Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps HQ of a tract to the Life Expectancy of that tract",
  },
  0x6941b022: {
    id: 0x6941b022,
    name: "Air Pollution to HQ Decay Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps amount of air pollution in a tract to the rate at which the HQ in that tract decays",
  },
  0x69501944: {
    id: 0x69501944,
    name: "Traffic air pollution factor",
    type: ExemplarValueType.Float32,
    desc: "Affects how traffic density equates to air pollution",
  },
  0x696e88db: {
    id: 0x696e88db,
    name: "Zone Filter",
    type: ExemplarValueType.UInt8,
    desc: "Zone types compatible with automaton (none == can appear in any zone)",
  },
  0x69987e60: {
    id: 0x69987e60,
    name: "LavaColorGradientMapFactor",
    type: ExemplarValueType.Float32,
    desc: "Number of pixels in colour gradient corresponding to every meter of lava depth",
  },
  0x69987e61: {
    id: 0x69987e61,
    name: "LavaMaxFlowRate",
    type: ExemplarValueType.Float32,
    desc: "Higher the viscosity, lower should this number be.",
  },
  0x69987e62: {
    id: 0x69987e62,
    name: "LavaHtDiffForMaxFlowRate",
    type: ExemplarValueType.Float32,
    desc: "Lava height differential at which the max flow rate is reached",
  },
  0x69987e63: {
    id: 0x69987e63,
    name: "LavaLiquidToSolidConversionFactor",
    type: ExemplarValueType.Float32,
    desc: "When unit amount of lava solidifies, it increases the terrain height by this much",
  },
  0x69987e64: {
    id: 0x69987e64,
    name: "LavaMinAlpha",
    type: ExemplarValueType.UInt8,
    desc: "Min alpha for lava",
  },
  0x69987e65: {
    id: 0x69987e65,
    name: "LavaMinAlphaDepth",
    type: ExemplarValueType.Float32,
    desc: "When the lava depth is less than this, we set alpha to be LavaMinAlpha",
  },
  0x69987e66: {
    id: 0x69987e66,
    name: "LavaMaxAlphaDepth",
    type: ExemplarValueType.Float32,
    desc: "If lava depth is more than this, it becomes opaque (i.e. max alpha)",
  },
  0x69987e67: {
    id: 0x69987e67,
    name: "LavaScorchedTerrainDecalSize",
    type: ExemplarValueType.Float32,
    desc: "Width of scorched terrain decal (meters)",
  },
  0x69987e68: {
    id: 0x69987e68,
    name: "LavaUnderWaterSolidificationMultiple",
    type: ExemplarValueType.Float32,
    desc: "Solidification rate under water this many times that over land",
  },
  0x69987e69: {
    id: 0x69987e69,
    name: "LavaDepthBurnThreshold",
    type: ExemplarValueType.Float32,
    desc: "The lava depth at which occupants will catch on fire",
  },
  0x69987e6a: {
    id: 0x69987e6a,
    name: "LavaDepthDeepFryThreshold",
    type: ExemplarValueType.Float32,
    desc: "The lava depth at which occupants will instantly burn down",
  },
  0x69987e6b: {
    id: 0x69987e6b,
    name: "LavaAnimationFrameDuration",
    type: ExemplarValueType.UInt32,
    desc: "Duration of each lava texture animation frame (microsecs)",
  },
  0x69987e6c: {
    id: 0x69987e6c,
    name: "LavaMinAmountForDepositToHappen",
    type: ExemplarValueType.Float32,
    desc: "If lava amount is less than this, we don't deposit it (We simply dry it up!)",
  },
  0x69987e6d: {
    id: 0x69987e6d,
    name: "LavaScorchDecalLifeTime",
    type: ExemplarValueType.UInt32,
    desc: "Life time of scorch decal(microsecs)",
  },
  0x69987e6e: {
    id: 0x69987e6e,
    name: "LavaScorchDecalFadeInTime",
    type: ExemplarValueType.Float32,
    desc: "Fade in time (Secs) of scorch decal",
  },
  0x69987e6f: {
    id: 0x69987e6f,
    name: "LavaScorchDecalFadeOutTime",
    type: ExemplarValueType.Float32,
    desc: "Fade out time (Secs) of scorch decal",
  },
  0x699b08a4: {
    id: 0x699b08a4,
    name: "LotConfigPropertyMinSlopeAllowed",
    type: ExemplarValueType.Float32,
    desc: "The Min slope this lot will develop on",
  },
  0x69a36e40: {
    id: 0x69a36e40,
    name: "Budget: TaxMultiplier_IAG",
    type: ExemplarValueType.Float32,
    desc: "Multiplier to tweak the relative weighting of the IAG occupant type's taxes",
  },
  0x69a437f6: {
    id: 0x69a437f6,
    name: "Garbage Prop Request Curve",
    type: ExemplarValueType.Float32,
    desc: "Shares of garbage props requested vs. garbage percentage of max",
  },
  0x69ac5640: {
    id: 0x69ac5640,
    name: "MinWaterDepthForDeepSeaBedTexture",
    type: ExemplarValueType.Float32,
    desc: "If the water depth exceeds this, we apply deep seabed texture",
  },
  0x69ac5641: {
    id: 0x69ac5641,
    name: "MaxWaterDepthForDeepSeaBedTexture",
    type: ExemplarValueType.Float32,
    desc: "Up to this water depth we use deep seabed texture for terrain (No texturing beyond that depth)",
  },
  0x69b425db: {
    id: 0x69b425db,
    name: "FireProtectionSim, StationNoRoad Multiplier",
    type: ExemplarValueType.Float32,
    desc: "(0.0 - 1.0)",
  },
  0x69db8d00: {
    id: 0x69db8d00,
    name: "TextureUpdateIntervalForTerrainBrushes",
    type: ExemplarValueType.UInt32,
    desc: "Controls how often terrain texture updates happen while applying terrain brushes",
  },
  0x69db8d01: {
    id: 0x69db8d01,
    name: "ModKeyStrengthMultiplier1",
    type: ExemplarValueType.Float32,
    desc: "Controls how the brush strength is modified by the control key",
  },
  0x69db8d02: {
    id: 0x69db8d02,
    name: "ModKeyWidthMultiplier1",
    type: ExemplarValueType.Float32,
    desc: "Controls how the brush strength is modified by the control key",
  },
  0x69db8d03: {
    id: 0x69db8d03,
    name: "ModKeyStrengthMultiplier2",
    type: ExemplarValueType.Float32,
    desc: "Controls how the brush strength is modified by the shift key",
  },
  0x69db8d04: {
    id: 0x69db8d04,
    name: "ModKeyWidthMultiplier2",
    type: ExemplarValueType.Float32,
    desc: "Controls how the brush strength is modified by the shift key",
  },
  0x69db8d05: {
    id: 0x69db8d05,
    name: "ApplicationTimeIntervalForFullBrushStrength",
    type: ExemplarValueType.Float32,
    desc: "Time interval (secs) between applications to get full brush strength",
  },
  0x69f14d33: {
    id: 0x69f14d33,
    name: "Orient To Slope",
    type: ExemplarValueType.Bool,
    desc: "Prop rotates x/z to match slope",
  },
  0x6a09f62f: {
    id: 0x6a09f62f,
    name: "Crime Sim multiplier",
    type: ExemplarValueType.Float32,
    desc: "Percentage (0.0-1.0) of actual crimes in a cell that will generate a corresponding crime sim",
  },
  0x6a09f630: {
    id: 0x6a09f630,
    name: "Sim Prop animation range",
    type: ExemplarValueType.UInt8,
    desc: "Min and Max number of times a one-shot sim will loop through its animation before fading out",
  },
  0x6a09f631: {
    id: 0x6a09f631,
    name: "Crime layer clock",
    type: ExemplarValueType.Float32,
    desc: "Maps time of day on 24-hour clock to a percentage of crime props genera ed (0.0 - 1.0)",
  },
  0x6a19f6b5: {
    id: 0x6a19f6b5,
    name: "Health Effect Radius",
    type: ExemplarValueType.Float32,
    desc: "Radius of generic health effect of this building",
  },
  0x6a2d49f4: {
    id: 0x6a2d49f4,
    name: "Simoleon Cost Per Meter Displaced",
    type: ExemplarValueType.Float32,
    desc: "Cost to raise/lower one vertex one meter when using this tool",
  },
  0x6a33d682: {
    id: 0x6a33d682,
    name: "SubmenuKey: Terraform: MakeMountains Menu",
    type: ExemplarValueType.UInt32,
    desc: "Controls which Menu the tool belongs in. Some tools area attached to the Menu that they're in",
  },
  0x6a359f22: {
    id: 0x6a359f22,
    name: "Audio:ZoomDistanceTweaks",
    type: ExemplarValueType.Float32,
    desc: "Tweak values to nudge each delta",
  },
  0x6a36afab: {
    id: 0x6a36afab,
    name: "SFX:AlarmTime",
    type: ExemplarValueType.Float32,
    desc: "24hour times i.e. 15.5",
  },
  0x6a36afac: {
    id: 0x6a36afac,
    name: "SFX:Occupant Instance Sound",
    type: ExemplarValueType.UInt32,
    desc: "GUID of sound played for the occupant. There will be one instance per occupant.",
  },
  0x6a37ebb6: {
    id: 0x6a37ebb6,
    name: "Flora: Wild",
    type: ExemplarValueType.Bool,
    desc: "Controls whether the flora appears in landscape mode (wild) or mayor mode (domestic).",
  },
  0x6a3fbdda: {
    id: 0x6a3fbdda,
    name: "Audio:LoopId",
    type: ExemplarValueType.UInt32,
    desc: "Ambient loop id",
  },
  0x6a3fc4c7: {
    id: 0x6a3fc4c7,
    name: "Audio:FreshSPL",
    type: ExemplarValueType.UInt32,
    desc: "Sound Pressure Level",
  },
  0x6a3fcc37: {
    id: 0x6a3fcc37,
    name: "Global Effect Trigger",
    type: ExemplarValueType.UInt32,
    desc: "Trigger ID for script-defined global effect that turns this prop on (state 0) and off (state 1).",
  },
  0x6a406201: {
    id: 0x6a406201,
    name: "Air Pollution Delta",
    type: ExemplarValueType.UInt32,
    desc: "Maximum amount of air pollution that can be added to/subtracted from each cell per month.",
  },
  0x6a410bf2: {
    id: 0x6a410bf2,
    name: "Water Funding To Efficiency Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps difference between actual % funding and % ideal funding to % of a utility output",
  },
  0x6a4132f3: {
    id: 0x6a4132f3,
    name: "Audio:Density2FreshVolumeCurve",
    type: ExemplarValueType.Float32,
    desc: "Density to freshness volume curve",
  },
  0x6a4132f6: {
    id: 0x6a4132f6,
    name: "Audio:Density2LoopVolumeCurve",
    type: ExemplarValueType.Float32,
    desc: "Density to loop volume curve",
  },
  0x6a416b21: {
    id: 0x6a416b21,
    name: "Name Key",
    type: ExemplarValueType.UInt32,
    desc: "Resource key of ordinance name resource",
  },
  0x6a43150f: {
    id: 0x6a43150f,
    name: "Hard Failure Type",
    type: ExemplarValueType.UInt32,
    desc: "Explosion type at end of life",
  },
  0x6a440d40: {
    id: 0x6a440d40,
    name: "Train Min/Max KPH",
    type: ExemplarValueType.UInt32,
    desc: "Min/max speed of trains in kilometres per hour",
  },
  0x6a469337: {
    id: 0x6a469337,
    name: "MinDealAmountWater",
    type: ExemplarValueType.Float32,
    desc: "Min deal amount for water deal",
  },
  0x6a469342: {
    id: 0x6a469342,
    name: "MinDealProfitFactor",
    type: ExemplarValueType.Float32,
    desc: "Min deal profit factor (1 + MinDealProfitFactor)",
  },
  0x6a4aeded: {
    id: 0x6a4aeded,
    name: "Graph Maximum value",
    type: ExemplarValueType.Float32,
    desc: "Overrides the automatic maximum value for the Graph.",
  },
  0x6a4aedef: {
    id: 0x6a4aedef,
    name: "Graph Increment",
    type: ExemplarValueType.Float32,
    desc: "Overrides the automatic spacing, controlling the incrementation of the Graphs.",
  },
  0x6a4aee40: {
    id: 0x6a4aee40,
    name: "Graph Data source 1",
    type: ExemplarValueType.UInt32,
    desc: "Contains source data references for information that is displayed in the Graph, with each ID representing a data source.",
  },
  0x6a4aee5f: {
    id: 0x6a4aee5f,
    name: "Graph Data source 2",
    type: ExemplarValueType.UInt32,
    desc: "Contains source data references for information that is combined with Graph Data Source1, with each ID representing a data source.",
  },
  0x6a4aee68: {
    id: 0x6a4aee68,
    name: "Graph Data source Combine",
    type: ExemplarValueType.UInt32,
    desc: "Array of ints, one per plot, each representing how the Graph Data sources 1 and 2 are combined (none, +, -, *, /).",
  },
  0x6a4aeedc: {
    id: 0x6a4aeedc,
    name: "Graph Label keys",
    type: ExemplarValueType.UInt32,
    desc: "References Text based files. Each ID represents a localized string key for the label.",
  },
  0x6a4aeedf: {
    id: 0x6a4aeedf,
    name: "Graph Data colour",
    type: ExemplarValueType.UInt8,
    desc: "Array of RGB values. 3 integers per Data Source, each representing a line colour.",
  },
  0x6a4aeee2: {
    id: 0x6a4aeee2,
    name: "Graph Data value adjuster",
    type: ExemplarValueType.Float32,
    desc: "Array of floats, one per data source, controlling the real value of data displayed in the graph. E.g. 1=100%, 0.01=10% of real value.",
  },
  0x6a4aeee3: {
    id: 0x6a4aeee3,
    name: "Graph Data series1",
    type: ExemplarValueType.UInt32,
    desc: "Array of ints, one per plot, each representing which series that data should be in.",
  },
  0x6a4aeee4: {
    id: 0x6a4aeee4,
    name: "Graph Data series fill colour2",
    type: ExemplarValueType.UInt8,
    desc: "Array of RGB triplets, 3 integers per series, each representing a fill colour for a whole series.",
  },
  0x6a4aeee5: {
    id: 0x6a4aeee5,
    name: "Graph Data series line colour3",
    type: ExemplarValueType.UInt8,
    desc: "Array of RGB triplets, 3 integers per series, each representing a outline colour a whole series.",
  },
  0x6a4bc8ed: {
    id: 0x6a4bc8ed,
    name: "VolcanoLavaShouldLavaFlow",
    type: ExemplarValueType.Bool,
    desc: "To Allow the flow of lava flow",
  },
  0x6a5a6700: {
    id: 0x6a5a6700,
    name: "Obliterate:ClusterWindowWidth",
    type: ExemplarValueType.UInt32,
    desc: "Width in cells of each demolition cluster window",
  },
  0x6a5a6701: {
    id: 0x6a5a6701,
    name: "Obliterate:NumClustersVsTime",
    type: ExemplarValueType.Float32,
    desc: "Cumulative number of clusters to demolish as a function of time (secs)",
  },
  0x6a5a6702: {
    id: 0x6a5a6702,
    name: "Obliterate:SmokeScreenFormationTime",
    type: ExemplarValueType.Float32,
    desc: "Time (secs) between the creation of Finale effect and our last big wipe-out sweep of the city",
  },
  0x6a5e0727: {
    id: 0x6a5e0727,
    name: "Active Lot State",
    type: ExemplarValueType.UInt8,
    desc: "What lot state this prop is active in.  Don't add the property if the prop is active in all lot states.",
  },
  0x6a6564f4: {
    id: 0x6a6564f4,
    name: "Trend Bar: Data Source",
    type: ExemplarValueType.UInt32,
    desc: "History data source for this trend bar",
  },
  0x6a6564f6: {
    id: 0x6a6564f6,
    name: "Trend Bar: Response Curve",
    type: ExemplarValueType.Float32,
    desc: "Converts from input data source range to {0,1}",
  },
  0x6a84493e: {
    id: 0x6a84493e,
    name: "Monthly cost for network tile",
    type: ExemplarValueType.Float32,
    desc: "Upkeep cost per tile of each network type: Road, Rail, Highway, Street, Pipes, Powerpoles, Avenue, Subway, ElevatedRail, Monorail, OneWayRoad, DirtRoad, GroundHighway",
  },
  0x6a845768: {
    id: 0x6a845768,
    name: "ModelIsPrelit",
    type: ExemplarValueType.UInt32,
    desc: "If this property is present the game will not apply deform and lighting to the model",
  },
  0x6a871b82: {
    id: 0x6a871b82,
    name: "PluginPackID",
    type: ExemplarValueType.UInt32,
    desc: "ID of the plugin pack to which the data belongs",
  },
  0x6a946a50: {
    id: 0x6a946a50,
    name: "Audio:VolumeLimitingCurve",
    type: ExemplarValueType.Float32,
    desc: "Volume limiting curve",
  },
  0x6a959e71: {
    id: 0x6a959e71,
    name: "Requires Power to Appear",
    type: ExemplarValueType.Bool,
    desc: "Prop only appears if lot is powered",
  },
  0x6a95e503: {
    id: 0x6a95e503,
    name: "Query as main building",
    type: ExemplarValueType.Bool,
    desc: "If set to true, when the prop is hover queried it will highlight both itself and the main building (and give the same hover data)",
  },
  0x6a9c7718: {
    id: 0x6a9c7718,
    name: "Budget: Initial Funds",
    type: ExemplarValueType.SInt64,
    desc: "Starting funds for a new city, by difficult level: Easy, Medium, Hard",
  },
  0x6a9edd07: {
    id: 0x6a9edd07,
    name: "Animated Prop Play Mode",
    type: ExemplarValueType.UInt8,
    desc: "Whether animated props should be looped, ping-pong, or one-shot. If not present, the default is Loop.",
  },
  0x6a9f6edd: {
    id: 0x6a9f6edd,
    name: "Coverage radius slop multiplier",
    type: ExemplarValueType.Float32,
    desc: "Coverage radii are multiplied by this value when computing tract coverage",
  },
  0x6ab70da7: {
    id: 0x6ab70da7,
    name: "Death's door HQ",
    type: ExemplarValueType.Float32,
    desc: "If a tract's HQ falls below this number, they're at death's door.",
  },
  0x6ab71654: {
    id: 0x6ab71654,
    name: "Death's door effect height",
    type: ExemplarValueType.Float32,
    desc: "Base height above terrain at which the effect will play for a tract that's at death's door.",
  },
  0x6ad54804: {
    id: 0x6ad54804,
    name: "Catalogue Monthly Cost",
    type: ExemplarValueType.SInt32,
    desc: "Value for displaying monthly cost in the catalogue. Value is not actually simulated, is just a display value",
  },
  0x6b42922c: {
    id: 0x6b42922c,
    name: "Simulation Speed multiplier",
    type: ExemplarValueType.Float32,
    desc: "Is just a visual representation. Multiplier for Automata speed when simulator is in: Turtle: Rhino: Cheetah: UDI mode. First 3 only apply when 'Variable Speed Automata' is on.",
  },
  0x6b588fad: {
    id: 0x6b588fad,
    name: "SuspensionPeriod",
    type: ExemplarValueType.Float32,
    desc: "Defaulted deals get suspended for this number of days.",
  },
  0x6b733233: {
    id: 0x6b733233,
    name: "MiniMap: Water ramp",
    type: ExemplarValueType.UInt32,
    desc: "Colour progression to use for water.",
  },
  0x6b7c5cdd: {
    id: 0x6b7c5cdd,
    name: "DataView: Travel Types",
    type: ExemplarValueType.UInt32,
    desc: "List of travel types",
  },
  0x6bac0b3e: {
    id: 0x6bac0b3e,
    name: "Path Lookahead Tiles",
    type: ExemplarValueType.UInt8,
    desc: "How many tiles traffic automations should look ahead when determining paths",
  },
  0x6c044bb5: {
    id: 0x6c044bb5,
    name: "SFX:ActiveSound",
    type: ExemplarValueType.UInt32,
    desc: "GUID array of sounds to play (per zoom) when occupant is 'active'",
  },
  0x6c1832d1: {
    id: 0x6c1832d1,
    name: "UDIProp:MarinaBoat8",
    type: ExemplarValueType.UInt8,
    desc: "Property is a key that controls what particular kind of Prop should appear. Some UDIProp Keys are tied in directly with UDI missions",
  },
  0x6c183ffb: {
    id: 0x6c183ffb,
    name: "UDIProp:MarinaBoat3",
    type: ExemplarValueType.UInt8,
    desc: "Property is a key that controls what particular kind of Prop should appear. Some UDIProp Keys are tied in directly with UDI missions",
  },
  0x6c200139: {
    id: 0x6c200139,
    name: "Playerdrive Vehicle Max Count",
    type: ExemplarValueType.UInt32,
    desc: "Desired maximum # of vehicles in the world during player-drive",
  },
  0x6c36283c: {
    id: 0x6c36283c,
    name: "UDIProp:CruiseShip",
    type: ExemplarValueType.UInt8,
    desc: "Property is a key that controls what particular kind of Prop should appear. Some UDIProp Keys are tied in directly with UDI missions",
  },
  0x8761abd0: {
    id: 0x8761abd0,
    name: "MonthsBetweenCellCoverage",
    type: ExemplarValueType.UInt32,
    desc: "MonthsBetweenCellCoverage",
  },
  0x879d12e7: {
    id: 0x879d12e7,
    name: "MaxSlopeAlongNetwork",
    type: ExemplarValueType.Float32,
    desc: "Range: [0.0 - 90.0]",
  },
  0x87cd6300: {
    id: 0x87cd6300,
    name: "Target Zone",
    type: ExemplarValueType.UInt8,
    desc: "The type of zone that is developed",
  },
  0x87cd6301: {
    id: 0x87cd6301,
    name: "Demand Source Index",
    type: ExemplarValueType.UInt32,
    desc: "Demand comes from this index OR source zone",
  },
  0x87cd6310: {
    id: 0x87cd6310,
    name: "Tract Size",
    type: ExemplarValueType.UInt8,
    desc: "Power of 2; determines the size of the demand grid",
  },
  0x87cd6330: {
    id: 0x87cd6330,
    name: "Wealth Type",
    type: ExemplarValueType.UInt8,
    desc: "Specifies (source and target) wealth type",
  },
  0x87cd6331: {
    id: 0x87cd6331,
    name: "Obsolete (Density Type)",
    type: ExemplarValueType.UInt8,
    desc: "Specifies density",
  },
  0x87cd6332: {
    id: 0x87cd6332,
    name: "Purpose Type",
    type: ExemplarValueType.UInt8,
    desc: "Specifies type of building created by this developer. 0x01=R, 0x02=CS, 0x03=CO, 0x05=IAG, 0x06=ID,0x07=IM,0x08=IHT",
  },
  0x87cd6333: {
    id: 0x87cd6333,
    name: "Land Value Range",
    type: ExemplarValueType.UInt8,
    desc: "Specifies acceptable land values (0, 0 disables)",
  },
  0x87cd633f: {
    id: 0x87cd633f,
    name: "Land Value Use Intrinsic",
    type: ExemplarValueType.Bool,
    desc: "True means use total land value",
  },
  0x87cd6340: {
    id: 0x87cd6340,
    name: "Land Value Effect",
    type: ExemplarValueType.Float32,
    desc: "How much land value is a factor in desirability",
  },
  0x87cd6341: {
    id: 0x87cd6341,
    name: "Park Effect",
    type: ExemplarValueType.Float32,
    desc: "How much park proximity affects desirability",
  },
  0x87cd6343: {
    id: 0x87cd6343,
    name: "Proximity Effect:R$",
    type: ExemplarValueType.Float32,
    desc: "How much proximity to R$ is a factor in desirability",
  },
  0x87cd6344: {
    id: 0x87cd6344,
    name: "Proximity Effect:R$$",
    type: ExemplarValueType.Float32,
    desc: "How much proximity to R$$ is a factor in desirability",
  },
  0x87cd6345: {
    id: 0x87cd6345,
    name: "Proximity Effect:R$$$",
    type: ExemplarValueType.Float32,
    desc: "How much proximity to R$$$ is a factor in desirability",
  },
  0x87cd6346: {
    id: 0x87cd6346,
    name: "Traffic Effect",
    type: ExemplarValueType.Float32,
    desc: "How much traffic volume is a factor in desirability",
  },
  0x87cd6347: {
    id: 0x87cd6347,
    name: "Trip Length Effect",
    type: ExemplarValueType.Float32,
    desc: "How much travel time is a factor in desirability",
  },
  0x87cd6348: {
    id: 0x87cd6348,
    name: "School Effect",
    type: ExemplarValueType.Float32,
    desc: "How much school grade is a factor in desirability",
  },
  0x87cd6349: {
    id: 0x87cd6349,
    name: "Hospital Effect",
    type: ExemplarValueType.Float32,
    desc: "How much hospital grade is a factor in desirability",
  },
  0x87cd634a: {
    id: 0x87cd634a,
    name: "Crime Effect",
    type: ExemplarValueType.Float32,
    desc: "How much crime is a factor in desirability",
  },
  0x87cd634b: {
    id: 0x87cd634b,
    name: "Pollution Effect:Air",
    type: ExemplarValueType.Float32,
    desc: "How much air pollution proximity affects desirability",
  },
  0x87cd634c: {
    id: 0x87cd634c,
    name: "Pollution Effect:Water",
    type: ExemplarValueType.Float32,
    desc: "How much water pollution proximity affects desirability",
  },
  0x87cd634d: {
    id: 0x87cd634d,
    name: "Pollution Effect:Garbage",
    type: ExemplarValueType.Float32,
    desc: "How much garbage pollution proximity affects desirability",
  },
  0x87cd634e: {
    id: 0x87cd634e,
    name: "Pollution Effect:Radiation",
    type: ExemplarValueType.Float32,
    desc: "How much radiation pollution proximity affects desirability",
  },
  0x87cd6354: {
    id: 0x87cd6354,
    name: "Desirability Threshold Decline",
    type: ExemplarValueType.SInt32,
    desc: "Tracts with desirability greater than this value never abandon.",
  },
  0x87cd6355: {
    id: 0x87cd6355,
    name: "Desirability Threshold Growth",
    type: ExemplarValueType.SInt32,
    desc: "Tracts with desirability less than this value never level. Tested before pruning.",
  },
  0x87cd6356: {
    id: 0x87cd6356,
    name: "Phantom Demand",
    type: ExemplarValueType.Bool,
    desc: "If true, unhappy Sims will create a demand for new growth, which results in migration",
  },
  0x87cd6357: {
    id: 0x87cd6357,
    name: "Baseline Desirability",
    type: ExemplarValueType.SInt32,
    desc: "Value for desirability, if no other effects are applicable",
  },
  0x87cd6360: {
    id: 0x87cd6360,
    name: "Stage Count",
    type: ExemplarValueType.UInt8,
    desc: "Number of growth stages",
  },
  0x87cd6361: {
    id: 0x87cd6361,
    name: "Stage 1 vs. Size",
    type: ExemplarValueType.Float32,
    desc: "Percentage of growth which should be of type 1, as a function of the population of the city",
  },
  0x87cd6362: {
    id: 0x87cd6362,
    name: "Stage 2 vs. Size",
    type: ExemplarValueType.Float32,
    desc: "Percentage of growth which should be of type 2, as a function of the population of the city",
  },
  0x87cd6363: {
    id: 0x87cd6363,
    name: "Stage 3 vs. Size",
    type: ExemplarValueType.Float32,
    desc: "Percentage of growth which should be of type 3, as a function of the population of the city",
  },
  0x87cd6364: {
    id: 0x87cd6364,
    name: "Stage 4 vs. Size",
    type: ExemplarValueType.Float32,
    desc: "Percentage of growth which should be of type 4, as a function of the population of the city",
  },
  0x87cd6365: {
    id: 0x87cd6365,
    name: "Stage 5 vs. Size",
    type: ExemplarValueType.Float32,
    desc: "Percentage of growth which should be of type 5, as a function of the population of the city",
  },
  0x87cd6366: {
    id: 0x87cd6366,
    name: "Stage 6 vs. Size",
    type: ExemplarValueType.Float32,
    desc: "Percentage of growth which should be of type 6, as a function of the population of the city",
  },
  0x87cd6367: {
    id: 0x87cd6367,
    name: "Stage 7 vs. Size",
    type: ExemplarValueType.Float32,
    desc: "Percentage of growth which should be of type 7, as a function of the population of the city",
  },
  0x87cd6368: {
    id: 0x87cd6368,
    name: "Stage 8 vs. Size",
    type: ExemplarValueType.Float32,
    desc: "Percentage of growth which should be of type 8, as a function of the population of the city",
  },
  0x87cd6370: {
    id: 0x87cd6370,
    name: "Water Supply Cap",
    type: ExemplarValueType.UInt8,
    desc: "Maximum density allowed without water service",
  },
  0x87cd6371: {
    id: 0x87cd6371,
    name: "Fire Coverage Cap",
    type: ExemplarValueType.UInt8,
    desc: "Maximum density allowed without fire protection",
  },
  0x87cd6372: {
    id: 0x87cd6372,
    name: "Park Cap",
    type: ExemplarValueType.UInt8,
    desc: "Maximum density allowed without a nearby park",
  },
  0x87cd6373: {
    id: 0x87cd6373,
    name: "Power Supply Cap",
    type: ExemplarValueType.UInt8,
    desc: "Maximum density allowed without power service",
  },
  0x87cd6381: {
    id: 0x87cd6381,
    name: "Use Monopoly Pieces",
    type: ExemplarValueType.UInt8,
    desc: "Specifies building selection mode",
  },
  0x87cd6391: {
    id: 0x87cd6391,
    name: "Proximity Effect:Co$$",
    type: ExemplarValueType.Float32,
    desc: "How much proximity to Co$$ is a factor in desirability",
  },
  0x87cd6392: {
    id: 0x87cd6392,
    name: "Proximity Effect:Co$$$",
    type: ExemplarValueType.Float32,
    desc: "How much proximity to Co$$$ is a factor in desirability",
  },
  0x87cd6397: {
    id: 0x87cd6397,
    name: "Transient Aura Effect",
    type: ExemplarValueType.Float32,
    desc: "How much transient aura effects (-128, 127) affect desirability",
  },
  0x87cd6398: {
    id: 0x87cd6398,
    name: "Slope Effect",
    type: ExemplarValueType.Float32,
    desc: "How much slope is a factor in desirability",
  },
  0x87cd6399: {
    id: 0x87cd6399,
    name: "Landmark Effect",
    type: ExemplarValueType.Float32,
    desc: "How much landmark proximity affects desirability. NIMBY/YIMBY: negative numbers in the first value denotes NIMBY, positive denotes YIMBY",
  },
  0x87cd63a0: {
    id: 0x87cd63a0,
    name: "Style Percentages",
    type: ExemplarValueType.UInt32,
    desc: "Pairs of occupant group IDs and percentages showing how often they should be used",
  },
  0x88ed1059: {
    id: 0x88ed1059,
    name: "Recycling centre percent reduction",
    type: ExemplarValueType.UInt32,
    desc: "Percentage by which recycling centre reduces trash",
  },
  0x88ed3303: {
    id: 0x88ed3303,
    name: "Water Produced",
    type: ExemplarValueType.UInt32,
    desc: "Amount of water produced",
  },
  0x88edc789: {
    id: 0x88edc789,
    name: "LotConfigPropertyVersion",
    type: ExemplarValueType.UInt8,
    desc: "Lot Config Property Version",
  },
  0x88edc790: {
    id: 0x88edc790,
    name: "LotConfigPropertySize",
    type: ExemplarValueType.UInt8,
    desc: "LotConfigPropertySize",
  },
  0x88edc791: {
    id: 0x88edc791,
    name: "LotConfigPropertyFamily",
    type: ExemplarValueType.UInt32,
    desc: "LotConfigPropertyFamily",
  },
  0x88edc792: {
    id: 0x88edc792,
    name: "LotConfigPropertyMaxSlopeBeforeLotFoundation",
    type: ExemplarValueType.Float32,
    desc: "The slope at which it switches to using a Lot foundation",
  },
  0x88edc793: {
    id: 0x88edc793,
    name: "LotConfigPropertyZoneTypes",
    type: ExemplarValueType.UInt8,
    desc: "0x00=Unzoned.0x01=LDR.0x02=MDR.0x03=HDR.0x04=LDC.0x05=MDC.0x06=HDC.0x07=IndustrialResource.0x08=LightIndustrail.0x09=HeavyIndustrail.0x0A=Military.0x0B=Airport.0x0C=Seaport.0x0D=Spaceport.0x0E=Landfill.0x0F=Plopped building",
  },
  0x88edc795: {
    id: 0x88edc795,
    name: "LotConfigPropertyWealthTypes",
    type: ExemplarValueType.UInt8,
    desc: "0x00=No Wealth.0x01=Low.0x02=Medium.0x03=High",
  },
  0x88edc796: {
    id: 0x88edc796,
    name: "LotConfigPropertyPurposeTypes",
    type: ExemplarValueType.UInt8,
    desc: "LotConfigPropertyPurposeTypes",
  },
  0x88edc797: {
    id: 0x88edc797,
    name: "LotConfigPropertyFenceDefinition",
    type: ExemplarValueType.UInt32,
    desc: "LotConfigPropertyFenceDefinition",
  },
  0x88edc798: {
    id: 0x88edc798,
    name: "LotConfigPropertyRetainingWallTypes",
    type: ExemplarValueType.UInt32,
    desc: "LotConfigPropertyRetainingWallTypes",
  },
  0x88edc900: {
    id: 0x88edc900,
    name: "LotConfigPropertyLotObject",
    type: ExemplarValueType.UInt32,
    desc: "LotConfigPropertyLotObject",
  },
  0x88edc901: {
    id: 0x88edc901,
    name: "LotConfigPropertyLotObjectData",
    type: ExemplarValueType.UInt32,
    desc: "Contains settings for a single config type for a single tile in a lot config property object.",
  },
  0x88edcdff: {
    id: 0x88edcdff,
    name: "LotConfigPropertyLotObjectData",
    type: ExemplarValueType.UInt32,
    desc: "Contains settings for a single config type for a single tile in a lot config property object.",
  },
  0x88fcc3e3: {
    id: 0x88fcc3e3,
    name: "FoundationMaxHeight",
    type: ExemplarValueType.Float32,
    desc: "The height a foundation can lift an occupant (usually a building or lot).",
  },
  0x88fcd877: {
    id: 0x88fcd877,
    name: "Building foundation",
    type: ExemplarValueType.UInt32,
    desc: "Foundation type ID for this building or lot. Absent for none.",
  },
  0x890e0a99: {
    id: 0x890e0a99,
    name: "Budget: MaxTaxRate",
    type: ExemplarValueType.Float32,
    desc: "Maximum Tax Rate. Value is hard-coded.",
  },
  0x890e0ab4: {
    id: 0x890e0ab4,
    name: "Budget: Loan: UpperLimit",
    type: ExemplarValueType.SInt64,
    desc: "The maximum amount of outstanding loan debt that is allowed",
  },
  0x89135044: {
    id: 0x89135044,
    name: "Max radiation pollution value for UI",
    type: ExemplarValueType.UInt32,
    desc: "Maximum radiation pollution value reported to the UI, must be less than 32767",
  },
  0x89136440: {
    id: 0x89136440,
    name: "LotConfigPropertyWaterCompatibility",
    type: ExemplarValueType.UInt8,
    desc: "LotConfigPropertyWaterCompatibility",
  },
  0x89189482: {
    id: 0x89189482,
    name: "Health Strike Efficiency",
    type: ExemplarValueType.Float32,
    desc: "Efficiency of Health buildings will drop to this % during a strike",
  },
  0x8918948b: {
    id: 0x8918948b,
    name: "Health Strike Duration",
    type: ExemplarValueType.UInt32,
    desc: "Maximum duration of a Health strike, in months",
  },
  0x89189495: {
    id: 0x89189495,
    name: "Health Min Grade to End Strike",
    type: ExemplarValueType.Float32,
    desc: "Minimum grade that all health buildings must have to end a Health strike",
  },
  0x891894ad: {
    id: 0x891894ad,
    name: "School Init/Max Allowed Funding",
    type: ExemplarValueType.Float32,
    desc: "Initial and Maximum allowed funding percentage for schools",
  },
  0x8918c937: {
    id: 0x8918c937,
    name: "Budget: Tax Multiplier_Co$$",
    type: ExemplarValueType.Float32,
    desc: "Multiplier to tweak the relative weighting of the CO$$ occupant type's taxes",
  },
  0x8918c93e: {
    id: 0x8918c93e,
    name: "Budget: Tax Multiplier_IM",
    type: ExemplarValueType.Float32,
    desc: "Multiplier to tweak the relative weighting of the Industrial Manufacturing occupant type's taxes",
  },
  0x891b3ae6: {
    id: 0x891b3ae6,
    name: "Health Effectiveness vs. Distance Effect",
    type: ExemplarValueType.Float32,
    desc: "Maps % of coverage distance from a hospital to HQ boost %",
  },
  0x8922041b: {
    id: 0x8922041b,
    name: "School Student Capacity",
    type: ExemplarValueType.UInt32,
    desc: "Maximum number of students served by this school",
  },
  0x892d9d02: {
    id: 0x892d9d02,
    name: "School Capacity Effect",
    type: ExemplarValueType.Float32,
    desc: "Percentage (from 0 to 200%) by which this ordinance affects the capacity of schools",
  },
  0x89590e6d: {
    id: 0x89590e6d,
    name: "Simulator Speeds",
    type: ExemplarValueType.UInt32,
    desc: "Milliseconds per day for Turtle, Rhino, Cheetah",
  },
  0x89590e6e: {
    id: 0x89590e6e,
    name: "AnimationTimeDilation",
    type: ExemplarValueType.Float32,
    desc: "Time dilation factor to apply to animations based on simulator speed (Pause, Turtle, Rhino, Cheetah,emergency/drive)",
  },
  0x897e709f: {
    id: 0x897e709f,
    name: "24 Hour Clock speed (time magnification)",
    type: ExemplarValueType.Float32,
    desc: "Specifies a multiplier from real time to the 24 hour clock's time.",
  },
  0x89861864: {
    id: 0x89861864,
    name: "VolcanicAshLifeTime",
    type: ExemplarValueType.UInt32,
    desc: "How long (microsecs) is the volcanic ash visible on screen",
  },
  0x8989ec22: {
    id: 0x8989ec22,
    name: "Segment Height",
    type: ExemplarValueType.Float32,
    desc: "Height of one growth level for scaffolding construction",
  },
  0x8989ec23: {
    id: 0x8989ec23,
    name: "Post Width",
    type: ExemplarValueType.Float32,
    desc: "Width of corner posts",
  },
  0x8989ec24: {
    id: 0x8989ec24,
    name: "Scaffold Gap",
    type: ExemplarValueType.Float32,
    desc: "Gap between scaffold and building",
  },
  0x8989ec25: {
    id: 0x8989ec25,
    name: "Plank Width",
    type: ExemplarValueType.Float32,
    desc: "Width of the planks that run around the top of the scaffold. This is just the part of the outer rim of the scaffolding ceiling, not the actual trestles/supports/etc",
  },
  0x8989ec26: {
    id: 0x8989ec26,
    name: "Plank Texture Scale",
    type: ExemplarValueType.Float32,
    desc: "How large the plank texture is, in meters",
  },
  0x8989ec27: {
    id: 0x8989ec27,
    name: "Scaffold Texture Scale",
    type: ExemplarValueType.Float32,
    desc: "How large the scaffold texture is, in meters",
  },
  0x8989ec28: {
    id: 0x8989ec28,
    name: "Girders Texture Scale",
    type: ExemplarValueType.Float32,
    desc: "How large the top girders texture is, in meters",
  },
  0x8989ec29: {
    id: 0x8989ec29,
    name: "Scaffold Growth Rate",
    type: ExemplarValueType.Float32,
    desc: "How fast scaffolding goes up in meters per day",
  },
  0x8989ec2a: {
    id: 0x8989ec2a,
    name: "Scaffold Removal Rate",
    type: ExemplarValueType.Float32,
    desc: "How fast scaffolding is removed in meters per day",
  },
  0x8989ec2b: {
    id: 0x8989ec2b,
    name: "Crane Post Width",
    type: ExemplarValueType.Float32,
    desc: "Width of the post that holds up the crane model",
  },
  0x8989ec2c: {
    id: 0x8989ec2c,
    name: "Crane Post Gap",
    type: ExemplarValueType.Float32,
    desc: "Size of gap between the crane post and the scaffold",
  },
  0x8989ec2d: {
    id: 0x8989ec2d,
    name: "Crane Height Above Scaffold",
    type: ExemplarValueType.Float32,
    desc: "How far above the scaffold to place the bottom of the crane",
  },
  0x8989ec2e: {
    id: 0x8989ec2e,
    name: "Crane Rotation Time",
    type: ExemplarValueType.Float32,
    desc: "Milliseconds to complete one full rotation",
  },
  0x899afbad: {
    id: 0x899afbad,
    name: "Item Name",
    type: ExemplarValueType.String,
    desc: "The item name that will be visible to the player",
  },
  0x89a18fc4: {
    id: 0x89a18fc4,
    name: "Power line vertical distance",
    type: ExemplarValueType.Float32,
    desc: "Controls Max vertical distance from the centre of the line at which the control points are placed",
  },
  0x89a1e8fb: {
    id: 0x89a1e8fb,
    name: "Minimum number of curve points",
    type: ExemplarValueType.UInt32,
    desc: "Minimum number of points to generate on power line Bezier curve",
  },
  0x89a312c0: {
    id: 0x89a312c0,
    name: "TerrainTexTilingFactor",
    type: ExemplarValueType.Float32,
    desc: "100 meters of terrain corresponds to this fraction of texture in farthest zoom",
  },
  0x89a312c2: {
    id: 0x89a312c2,
    name: "TextureRandomizationGridSize",
    type: ExemplarValueType.UInt32,
    desc: "Width of the coarse grid (in terrain cells) where we assign the same texture family member",
  },
  0x89aec88b: {
    id: 0x89aec88b,
    name: "EmergencyVehicle:Idle Time",
    type: ExemplarValueType.Float32,
    desc: "How long in seconds an emergency vehicle will remain idle when repathing or handling event",
  },
  0x89aec88c: {
    id: 0x89aec88c,
    name: "EmergencyVehicle:Max Cell Distance",
    type: ExemplarValueType.UInt8,
    desc: "Max distance in cells an emergency vehicle can stop from its dispatch destination",
  },
  0x89aec88d: {
    id: 0x89aec88d,
    name: "EmergencyVehicle:Repath Attempts",
    type: ExemplarValueType.UInt8,
    desc: "How many times an emergency vehicle will try to repath to its destination",
  },
  0x89aec88e: {
    id: 0x89aec88e,
    name: "EmergencyVehicle:KPH",
    type: ExemplarValueType.UInt32,
    desc: "Default speed for emergency vehicles, in kilometres per hour",
  },
  0x8a020101: {
    id: 0x8a020101,
    name: "BrushCost",
    type: ExemplarValueType.Float32,
    desc: "Cost/application at the different zoom levels",
  },
  0x8a020102: {
    id: 0x8a020102,
    name: "BrushWiggleAmount",
    type: ExemplarValueType.Float32,
    desc: "Cost/application at the different zoom levels",
  },
  0x8a020103: {
    id: 0x8a020103,
    name: "BrushActiveSound",
    type: ExemplarValueType.UInt32,
    desc: "The Sound heard when using the tool. Value references a Sound based file",
  },
  0x8a020104: {
    id: 0x8a020104,
    name: "BrushReleaseOneShot",
    type: ExemplarValueType.UInt32,
    desc: "The Sound heard when using the tool. Value references a Sound based file",
  },
  0x8a020200: {
    id: 0x8a020200,
    name: "TextureID1",
    type: ExemplarValueType.UInt32,
    desc: "Component1: Texture ID used for the tool. ID references a Greyscale image to form part of the Terraforming that the Tool does",
  },
  0x8a020201: {
    id: 0x8a020201,
    name: "AlignWithMouseMoveDirection1",
    type: ExemplarValueType.Bool,
    desc: "TextureID1: should be aligned with the mouse movement direction",
  },
  0x8a020202: {
    id: 0x8a020202,
    name: "DefaultRadius1",
    type: ExemplarValueType.Float32,
    desc: "Component1: DefaultRadius of Tool at each of the different zoom levels",
  },
  0x8a020203: {
    id: 0x8a020203,
    name: "DefaultStrenght1",
    type: ExemplarValueType.Float32,
    desc: "Component1: DefaultStrenght of tool at each of the different zoom levels",
  },
  0x8a020204: {
    id: 0x8a020204,
    name: "TextureDirection1",
    type: ExemplarValueType.UInt8,
    desc: "Component1: Base texture value. Raise/lower if value is more/less than this. Influences the Direction of Terraforming for the Tool",
  },
  0x8a020205: {
    id: 0x8a020205,
    name: "OperationID1",
    type: ExemplarValueType.UInt32,
    desc: "Component1: Operation ID of tool",
  },
  0x8a020206: {
    id: 0x8a020206,
    name: "DecalTextureID1",
    type: ExemplarValueType.UInt32,
    desc: "Component1: Decal texture ID for paint brush",
  },
  0x8a020207: {
    id: 0x8a020207,
    name: "MaxDecalRotation1",
    type: ExemplarValueType.Float32,
    desc: "Component1: Max rotation of decal texture (degrees)",
  },
  0x8a020208: {
    id: 0x8a020208,
    name: "MaxPlacementsPerCell1",
    type: ExemplarValueType.UInt32,
    desc: "Component1: Max # of effects/decals placed in a cell during a scrubbing session",
  },
  0x8a020209: {
    id: 0x8a020209,
    name: "EffectToPlace1",
    type: ExemplarValueType.UInt32,
    desc: "Component1: Controls the Type of Effect that is placed when using the tool. (Group ID, Instance ID).",
  },
  0x8a020300: {
    id: 0x8a020300,
    name: "TextureID2",
    type: ExemplarValueType.UInt32,
    desc: "Component2: Texture ID used for the tool. ID references a Greyscale image to form part of the Terraforming that the Tool does",
  },
  0x8a020301: {
    id: 0x8a020301,
    name: "AlignWithMouseMoveDirection2",
    type: ExemplarValueType.Bool,
    desc: "TextureID2: should be aligned with the mouse movement direction",
  },
  0x8a020302: {
    id: 0x8a020302,
    name: "DefaultRadius2",
    type: ExemplarValueType.Float32,
    desc: "Component2: DefaultRadius of Tool at each of the different zoom levels",
  },
  0x8a020303: {
    id: 0x8a020303,
    name: "DefaultStrenght2",
    type: ExemplarValueType.Float32,
    desc: "Component2: DefaultStrenght of tool at each of the different zoom levels",
  },
  0x8a020304: {
    id: 0x8a020304,
    name: "TextureDirection2",
    type: ExemplarValueType.UInt8,
    desc: "Component2: Base texture value. Raise/lower if value is more/less than this. Influences the Direction of Terraforming for the Tool",
  },
  0x8a020305: {
    id: 0x8a020305,
    name: "OperationID2",
    type: ExemplarValueType.UInt32,
    desc: "Component2: Operation ID of tool",
  },
  0x8a020306: {
    id: 0x8a020306,
    name: "DecalTextureID2",
    type: ExemplarValueType.UInt32,
    desc: "Component2: Decal texture ID for paint brush",
  },
  0x8a020307: {
    id: 0x8a020307,
    name: "MaxDecalRotation2",
    type: ExemplarValueType.Float32,
    desc: "Component2: Max rotation of decal texture (degrees)",
  },
  0x8a020308: {
    id: 0x8a020308,
    name: "MaxPlacementsPerCell2",
    type: ExemplarValueType.UInt32,
    desc: "Component2: Max # of effects/decals placed in a cell during a scrubbing session",
  },
  0x8a020309: {
    id: 0x8a020309,
    name: "EffectToPlace2",
    type: ExemplarValueType.UInt32,
    desc: "Component2: Controls the Type of Effect that is placed when using the tool. (Group ID, Instance ID).",
  },
  0x8a020400: {
    id: 0x8a020400,
    name: "TextureID3",
    type: ExemplarValueType.UInt32,
    desc: "Component3: Texture ID used for the tool. ID references a Greyscale image to form part of the Terraforming that the Tool does",
  },
  0x8a020401: {
    id: 0x8a020401,
    name: "AlignWithMouseMoveDirection3",
    type: ExemplarValueType.Bool,
    desc: "TextureID3: should be aligned with the mouse movement direction",
  },
  0x8a020402: {
    id: 0x8a020402,
    name: "DefaultRadius3",
    type: ExemplarValueType.Float32,
    desc: "Component3: DefaultRadius of Tool at each of the different zoom levels",
  },
  0x8a020403: {
    id: 0x8a020403,
    name: "DefaultStrenght3",
    type: ExemplarValueType.Float32,
    desc: "Component3: DefaultStrenght of tool at each of the different zoom levels",
  },
  0x8a020404: {
    id: 0x8a020404,
    name: "TextureDirection3",
    type: ExemplarValueType.UInt8,
    desc: "Component3: Base texture value. Raise/lower if value is more/less than this. Influences the Direction of Terraforming for the Tool",
  },
  0x8a020405: {
    id: 0x8a020405,
    name: "OperationID3",
    type: ExemplarValueType.UInt32,
    desc: "Component3: Operation ID",
  },
  0x8a020406: {
    id: 0x8a020406,
    name: "DecalTextureID3",
    type: ExemplarValueType.UInt32,
    desc: "Component3: Decal texture ID for paint brush",
  },
  0x8a020407: {
    id: 0x8a020407,
    name: "MaxDecalRotation3",
    type: ExemplarValueType.Float32,
    desc: "Component3: Max rotation of decal texture (degrees)",
  },
  0x8a020408: {
    id: 0x8a020408,
    name: "MaxPlacementsPerCell3",
    type: ExemplarValueType.UInt32,
    desc: "Component3: Max # of effects/decals placed in a cell during a scrubbing session",
  },
  0x8a020409: {
    id: 0x8a020409,
    name: "EffectToPlace3",
    type: ExemplarValueType.UInt32,
    desc: "Component3: Controls the Type of Effect that is placed when using the tool. (Group ID, Instance ID).",
  },
  0x8a020500: {
    id: 0x8a020500,
    name: "TextureID4",
    type: ExemplarValueType.UInt32,
    desc: "Component4: Texture ID used for the tool. ID references a Greyscale image to form part of the Terraforming that the Tool does",
  },
  0x8a020501: {
    id: 0x8a020501,
    name: "AlignWithMouseMoveDirection4",
    type: ExemplarValueType.Bool,
    desc: "TextureID4: should be aligned with the mouse movement direction",
  },
  0x8a020502: {
    id: 0x8a020502,
    name: "DefaultRadius4",
    type: ExemplarValueType.Float32,
    desc: "Component4: DefaultRadius of Tool at each of the different zoom levels",
  },
  0x8a020503: {
    id: 0x8a020503,
    name: "DefaultStrenght4",
    type: ExemplarValueType.Float32,
    desc: "Component4: DefaultStrenght of tool at each of the different zoom levels",
  },
  0x8a020504: {
    id: 0x8a020504,
    name: "TextureDirection4",
    type: ExemplarValueType.UInt8,
    desc: "Component4: Base texture value. Raise/lower if value is more/less than this. Influences the Direction of Terraforming for the Tool",
  },
  0x8a020505: {
    id: 0x8a020505,
    name: "OperationID4",
    type: ExemplarValueType.UInt32,
    desc: "Component4: Operation ID",
  },
  0x8a020506: {
    id: 0x8a020506,
    name: "DecalTextureID4",
    type: ExemplarValueType.UInt32,
    desc: "Component4: Decal texture ID for paint brush",
  },
  0x8a020507: {
    id: 0x8a020507,
    name: "MaxDecalRotation4",
    type: ExemplarValueType.Float32,
    desc: "Component4: Max rotation of decal texture (degrees)",
  },
  0x8a020508: {
    id: 0x8a020508,
    name: "MaxPlacementsPerCell4",
    type: ExemplarValueType.UInt32,
    desc: "Component4: Max # of effects/decals placed in a cell during a scrubbing session",
  },
  0x8a020509: {
    id: 0x8a020509,
    name: "EffectToPlace4",
    type: ExemplarValueType.UInt32,
    desc: "Component4: Controls the Type of Effect that is placed when using the tool. (Group ID, Instance ID)",
  },
  0x8a0b4103: {
    id: 0x8a0b4103,
    name: "Freight Receiving Capacity",
    type: ExemplarValueType.UInt32,
    desc: "Freight traffic that can arrive at this building",
  },
  0x8a0cbaa3: {
    id: 0x8a0cbaa3,
    name: "Crime, Jobless Indicator Smoothing factor",
    type: ExemplarValueType.Float32,
  },
  0x8a0cbaa4: {
    id: 0x8a0cbaa4,
    name: "Crime, R$: EQ -> Base Criminality Curve",
    type: ExemplarValueType.Float32,
  },
  0x8a0cbaa5: {
    id: 0x8a0cbaa5,
    name: "Crime, R$$: EQ -> Base Criminality Curve",
    type: ExemplarValueType.Float32,
  },
  0x8a0cbaa6: {
    id: 0x8a0cbaa6,
    name: "Crime, R$$$: EQ -> Base Criminality Curve",
    type: ExemplarValueType.Float32,
  },
  0x8a0cbaa7: {
    id: 0x8a0cbaa7,
    name: "Crime, R$: Jobless ratio -> Criminality Curve",
    type: ExemplarValueType.Float32,
  },
  0x8a0cbaa8: {
    id: 0x8a0cbaa8,
    name: "Crime, R$$: Jobless ratio -> Criminality Curve",
    type: ExemplarValueType.Float32,
  },
  0x8a0cbaa9: {
    id: 0x8a0cbaa9,
    name: "Crime, R$$$: Jobless ratio -> Criminality Curve",
    type: ExemplarValueType.Float32,
  },
  0x8a0cbaaa: {
    id: 0x8a0cbaaa,
    name: "Crime, Criminality -> Crimes Curve",
    type: ExemplarValueType.Float32,
  },
  0x8a0cbaab: {
    id: 0x8a0cbaab,
    name: "Crime, Police Protection -> Crime Attenuation",
    type: ExemplarValueType.Float32,
  },
  0x8a0cbaac: {
    id: 0x8a0cbaac,
    name: "Crime, Crime Grid Decay Factor",
    type: ExemplarValueType.Float32,
    desc: "Example: 0.5 means values get halved every month",
  },
  0x8a0cbaad: {
    id: 0x8a0cbaad,
    name: "Crime, Criminal Grid Decay Factor",
    type: ExemplarValueType.Float32,
    desc: "Fraction (0 to 1.0) of unjailed criminals that will commit crimes next month",
  },
  0x8a1c3e72: {
    id: 0x8a1c3e72,
    name: "Worth",
    type: ExemplarValueType.SInt64,
    desc: "If e.g., the occupant gets destroyed by a disaster, this is the reported damage amount",
  },
  0x8a1e07ee: {
    id: 0x8a1e07ee,
    name: "Age to output level response curve",
    type: ExemplarValueType.Float32,
    desc: "Converts the current age degradation of the plant to a multiplier for production level",
  },
  0x8a235c56: {
    id: 0x8a235c56,
    name: "Pipe burst probability",
    type: ExemplarValueType.Float32,
    desc: "Likelihood per month that a distressed pipe will burst",
  },
  0x8a2602a9: {
    id: 0x8a2602a9,
    name: "Item Description",
    type: ExemplarValueType.String,
    desc: "Human-readable description of this item",
  },
  0x8a2602b8: {
    id: 0x8a2602b8,
    name: "Item Icon",
    type: ExemplarValueType.UInt32,
    desc: "Resource instance ID of Menu Icon for this item",
  },
  0x8a2602b9: {
    id: 0x8a2602b9,
    name: "Item Order",
    type: ExemplarValueType.UInt32,
    desc: "Controls position in menu",
  },
  0x8a2602ba: {
    id: 0x8a2602ba,
    name: "Item Submenu",
    type: ExemplarValueType.UInt32,
    desc: "If needed: which sub menu this item belongs to",
  },
  0x8a2602bb: {
    id: 0x8a2602bb,
    name: "Item Button ID",
    type: ExemplarValueType.UInt32,
    desc: "If needed: the button id this  item corresponds to",
  },
  0x8a270fc3: {
    id: 0x8a270fc3,
    name: "Port Type Exemplar IDs",
    type: ExemplarValueType.UInt32,
    desc: "List of instance IDs for exemplars containing the properties for each distinct airport/seaport type",
  },
  0x8a2d49ea: {
    id: 0x8a2d49ea,
    name: "Simoleon Cost Per Bridge Tile",
    type: ExemplarValueType.UInt32,
    desc: "Cost to create a bridge tile of network using this tool",
  },
  0x8a2d49f0: {
    id: 0x8a2d49f0,
    name: "Simoleon Cost Per Tunnel Tile",
    type: ExemplarValueType.UInt32,
    desc: "Cost to create a tunnel tile of network using this tool",
  },
  0x8a3143b7: {
    id: 0x8a3143b7,
    name: "SubmenuKey: Terraform: LevelTerrain Menu",
    type: ExemplarValueType.UInt32,
    desc: "Controls which menu the tool belongs in. Some tools are attached to the menu that they're in. This Brush belongs to God mode, LevelTerrain Menu.",
  },
  0x8a3f131b: {
    id: 0x8a3f131b,
    name: "SubmenuKey: Terraform: CreateFauna Menu",
    type: ExemplarValueType.UInt32,
    desc: "Controls which menu the tool belongs in. Some tools are attached to the menu that they're in",
  },
  0x8a3f14dc: {
    id: 0x8a3f14dc,
    name: "SubmenuKey: Zoning: Commercial Menu",
    type: ExemplarValueType.UInt32,
    desc: "Controls which menu the tool belongs in. Some tools are attached to the menu that they're in",
  },
  0x8a3f1502: {
    id: 0x8a3f1502,
    name: "SubmenuKey: Zoning: Industrial Menu",
    type: ExemplarValueType.UInt32,
    desc: "Controls which menu the tool belongs in. Some tools are attached to the menu that they're in",
  },
  0x8a3f1505: {
    id: 0x8a3f1505,
    name: "SubmenuKey: Zoning: Residential Menu",
    type: ExemplarValueType.UInt32,
    desc: "Controls which menu the tool belongs in. Some tools are attached to the menu that they're in",
  },
  0x8a3fb98d: {
    id: 0x8a3fb98d,
    name: "Budget: LoanInterestRate",
    type: ExemplarValueType.Float32,
    desc: "Interest applied to principal once and added to total",
  },
  0x8a3fc5dd: {
    id: 0x8a3fc5dd,
    name: "Audio:LayerWeight",
    type: ExemplarValueType.Float32,
    desc: "Priority scalar",
  },
  0x8a40620b: {
    id: 0x8a40620b,
    name: "Water Pollution Delta",
    type: ExemplarValueType.UInt32,
    desc: "Maximum amount of water pollution that can be added to/subtracted from each cell per month.",
  },
  0x8a416a99: {
    id: 0x8a416a99,
    name: "User Visible Name Key",
    type: ExemplarValueType.UInt32,
    desc: "Resource key of the name of what this exemplar represents",
  },
  0x8a416b2e: {
    id: 0x8a416b2e,
    name: "Label [Crime]",
    type: ExemplarValueType.UInt32,
  },
  0x8a441c9c: {
    id: 0x8a441c9c,
    name: "Commute Train Length",
    type: ExemplarValueType.UInt8,
    desc: "Min/max length in cars, including engine, of commuter trains",
  },
  0x8a46933d: {
    id: 0x8a46933d,
    name: "MinDealAmountGarbage",
    type: ExemplarValueType.Float32,
    desc: "Min deal amount for garbage deal",
  },
  0x8a480df7: {
    id: 0x8a480df7,
    name: "Budget: Waning Wealth Tax Multiplier",
    type: ExemplarValueType.Float32,
    desc: "Multiplier applied to a building tax value for each level of difference in wealth level",
  },
  0x8a4efa75: {
    id: 0x8a4efa75,
    name: "Vehicle Skid",
    type: ExemplarValueType.Float32,
    desc: "Percentage (0.0 - 1.0) of skid that will be applied to vehicle turns.  0 = clamp to paths",
  },
  0x8a511dd1: {
    id: 0x8a511dd1,
    name: "Max Buses Per Second",
    type: ExemplarValueType.Float32,
    desc: "Max number of buses to cross a tile per second",
  },
  0x8a552758: {
    id: 0x8a552758,
    name: "Audio:LayerPositionMode",
    type: ExemplarValueType.UInt32,
    desc: "Layer Position Mode",
  },
  0x8a5e5db8: {
    id: 0x8a5e5db8,
    name: "Is Ground Model",
    type: ExemplarValueType.Bool,
    desc: "Present if this prop is a ground-based model suitable for demolish fx, shadows, and collision avoidance",
  },
  0x8a5e7b50: {
    id: 0x8a5e7b50,
    name: "Audio: Music Playlist Entry",
    type: ExemplarValueType.UInt32,
    desc: "Music playlist entries (Title, Filename, on/off).",
  },
  0x8a5e7b68: {
    id: 0x8a5e7b68,
    name: "Audio: Music Playlist Entry",
    type: ExemplarValueType.UInt32,
    desc: "Music playlist entries (Title, Filename, on/off).",
  },
  0x8a5f88e3: {
    id: 0x8a5f88e3,
    name: "MinForPurposeFundingPercentageToAnimate",
    type: ExemplarValueType.UInt32,
    desc: "(PurposeId, funding)The occupant needs to be funded by at least this much for the specified purpose, for it to animate",
  },
  0x8a612fee: {
    id: 0x8a612fee,
    name: "Travel Strategy Modifier",
    type: ExemplarValueType.SInt32,
    desc: "For each wealth type ($-$$$), modifies percentage of travellers using each of the three travel strategies",
  },
  0x8a63f2a1: {
    id: 0x8a63f2a1,
    name: "Average Salary for Demographic",
    type: ExemplarValueType.UInt32,
    desc: "The average salary for each of the three wealth levels and four education levels (12 total)",
  },
  0x8a67e373: {
    id: 0x8a67e373,
    name: "Air Effect by zone type",
    type: ExemplarValueType.Float32,
    desc: "Effect (multiplier) this ordinance has on air pollution for each zone type",
  },
  0x8a67e374: {
    id: 0x8a67e374,
    name: "Water Effect by zone type",
    type: ExemplarValueType.Float32,
    desc: "Effect (multiplier) this ordinance has on water pollution for each zone type",
  },
  0x8a67e376: {
    id: 0x8a67e376,
    name: "Garbage Effect by zone type",
    type: ExemplarValueType.Float32,
    desc: "Effect (multiplier) this ordinance has on garbage for each zone type",
  },
  0x8a67e378: {
    id: 0x8a67e378,
    name: "Traffic Air Pollution Effect",
    type: ExemplarValueType.Float32,
    desc: "Effect (multiplier) this ordinance has on air pollution generated by traffic",
  },
  0x8a70b1a2: {
    id: 0x8a70b1a2,
    name: "Audio:LayerDensityMode",
    type: ExemplarValueType.UInt32,
    desc: "Layer Density Mode",
  },
  0x8a84778f: {
    id: 0x8a84778f,
    name: "Monthly Cost Per Pipe",
    type: ExemplarValueType.Float32,
    desc: "Maintenance cost for each pipe occupant",
  },
  0x8a891421: {
    id: 0x8a891421,
    name: "School Capacity to Staff Divisor",
    type: ExemplarValueType.UInt32,
    desc: "The school's capacity is divided by this number to determine the number of teachers on staff",
  },
  0x8a89142a: {
    id: 0x8a89142a,
    name: "Hospital Capacity To Staff Divisor",
    type: ExemplarValueType.UInt32,
    desc: "The hospital's capacity is divided by this number to determine the number of doctors on staff",
  },
  0x8a94eee0: {
    id: 0x8a94eee0,
    name: "Catalogue Monthly Cost (float)",
    type: ExemplarValueType.Float32,
    desc: "Float value for displaying monthly cost in the catalo - not simulated",
  },
  0x8aa039b7: {
    id: 0x8aa039b7,
    name: "Audio:LayerPositionSmoothDelta",
    type: ExemplarValueType.UInt32,
    desc: "Layer position smoothing delta limit",
  },
  0x8aa864d5: {
    id: 0x8aa864d5,
    name: "Crime Incident ID",
    type: ExemplarValueType.UInt32,
    desc: "Which crime simulator incident this prop represents, or 0 if it's a generic crime prop.",
  },
  0x8b58c59e: {
    id: 0x8b58c59e,
    name: "UnsuspensionPeriod",
    type: ExemplarValueType.Float32,
    desc: "If after suspension period the deal's at default during this number of days it will get killed without being re-suspended.",
  },
  0x8bbd735e: {
    id: 0x8bbd735e,
    name: "Conditional Automaton",
    type: ExemplarValueType.Bool,
    desc: "If true, automaton will be ghosted in the earned vehicle catalo view until an advisor condition is satisfied",
  },
  0x8bfb1072: {
    id: 0x8bfb1072,
    name: "UDIProp:RunwayEndNumber",
    type: ExemplarValueType.UInt8,
    desc: "Property is a key that controls what particular kind of Prop should appear. Some UDIProp Keys are tied in directly with UDI missions. Indicates the location of the end of a runway. Must come in pairs.",
  },
  0x8c184040: {
    id: 0x8c184040,
    name: "UDIProp:MarinaBoat4",
    type: ExemplarValueType.UInt8,
    desc: "Property is a key that controls what particular kind of Prop should appear. Some UDIProp Keys are tied in directly with UDI missions",
  },
  0x8c19c3e9: {
    id: 0x8c19c3e9,
    name: "Garbage Transport Versus Landfill Tiles",
    type: ExemplarValueType.Float32,
    desc: "How much garbage can be delivered to the landfill each month",
  },
  0x8c376d4f: {
    id: 0x8c376d4f,
    name: "Audio:AEMSZoomVolumes",
    type: ExemplarValueType.Float32,
    desc: "Volume for AEMS system at each zoom level",
  },
  0x8c392d39: {
    id: 0x8c392d39,
    name: "UDIProp:MarinaBoat0",
    type: ExemplarValueType.UInt8,
    desc: "Property is a key that controls what particular kind of Prop should appear. Some UDIProp Keys are tied in directly with UDI missions",
  },
  0x8c3caef5: {
    id: 0x8c3caef5,
    name: "Ferry Fare",
    type: ExemplarValueType.Float32,
    desc: "Income per traveller from a ferry trip",
  },
  0x8c3e8185: {
    id: 0x8c3e8185,
    name: "Travellers per bus",
    type: ExemplarValueType.UInt32,
    desc: "How many travellers it takes to yield a bus automata",
  },
  0x8cb3511f: {
    id: 0x8cb3511f,
    name: "Occupant Types",
    type: ExemplarValueType.UInt32,
    desc: "Types of occupants",
  },
  0xa7607d70: {
    id: 0xa7607d70,
    name: "WeeksForCompleteTemperatureSimulation",
    type: ExemplarValueType.SInt32,
    desc: "WeeksForCompleteTemperatureSimulation",
  },
  0xa7607d71: {
    id: 0xa7607d71,
    name: "WeeksForCompleteMoistureSimulation",
    type: ExemplarValueType.SInt32,
    desc: "WeeksForCompleteMoistureSimulation",
  },
  0xa7607d72: {
    id: 0xa7607d72,
    name: "SimulationSpreadWritingRadius",
    type: ExemplarValueType.SInt32,
    desc: "SimulationSpreadWritingRadius",
  },
  0xa7607d73: {
    id: 0xa7607d73,
    name: "YearlyAmbientTemperature",
    type: ExemplarValueType.Float32,
    desc: "YearlyAmbientTemperature",
  },
  0xa7607d74: {
    id: 0xa7607d74,
    name: "YearlyAmbientTemperatureVariation",
    type: ExemplarValueType.Float32,
    desc: "YearlyAmbientTemperatureVariation",
  },
  0xa7607d75: {
    id: 0xa7607d75,
    name: "YearlyAmbientTemperatureVariationFactor",
    type: ExemplarValueType.Float32,
    desc: "YearlyAmbientTemperatureVariationFactor",
  },
  0xa7607d76: {
    id: 0xa7607d76,
    name: "SeaModerationRadius",
    type: ExemplarValueType.SInt32,
    desc: "SeaModerationRadius",
  },
  0xa7607d77: {
    id: 0xa7607d77,
    name: "SeaModerationFactor",
    type: ExemplarValueType.Float32,
    desc: "SeaModerationFactor",
  },
  0xa7607d78: {
    id: 0xa7607d78,
    name: "AltitudeTemperatureFactor",
    type: ExemplarValueType.Float32,
    desc: "AltitudeTemperatureFactor",
  },
  0xa7607d79: {
    id: 0xa7607d79,
    name: "WindChillTemperatureFactor",
    type: ExemplarValueType.Float32,
    desc: "WindChillTemperatureFactor",
  },
  0xa7607d7a: {
    id: 0xa7607d7a,
    name: "YearlyAmbientMoisture",
    type: ExemplarValueType.Float32,
    desc: "YearlyAmbientMoisture",
  },
  0xa7607d7b: {
    id: 0xa7607d7b,
    name: "YearlyAmbientMoistureVariation",
    type: ExemplarValueType.Float32,
    desc: "YearlyAmbientMoistureVariation",
  },
  0xa7607d7c: {
    id: 0xa7607d7c,
    name: "YearlyAmbientMoistureVariationFactor",
    type: ExemplarValueType.Float32,
    desc: "YearlyAmbientMoistureVariationFactor",
  },
  0xa7607d7d: {
    id: 0xa7607d7d,
    name: "MoistureHillFactor",
    type: ExemplarValueType.Float32,
    desc: "Wind effect on hill moisture (H20 fractional units per m/s of perpendicular wind penetration)",
  },
  0xa7607d7e: {
    id: 0xa7607d7e,
    name: "ValleyMoistureBoost",
    type: ExemplarValueType.Float32,
    desc: "Mo store boost for areas detected as valleys (0-1)",
  },
  0xa7607d7f: {
    id: 0xa7607d7f,
    name: "MoistureValleySlopeThreshold",
    type: ExemplarValueType.Float32,
    desc: "Minimum concavity required to detect area as valley (linear height deviation in meters)",
  },
  0xa7607d80: {
    id: 0xa7607d80,
    name: "MoistureVariationScale",
    type: ExemplarValueType.UInt32,
    desc: "Amplitude of plasma-based noise in moisture map (map creation only)",
  },
  0xa7607d81: {
    id: 0xa7607d81,
    name: "MoistureDitherScale",
    type: ExemplarValueType.UInt32,
    desc: "Amplitude of high-freq. dithering noise in moisture map (map creation only)",
  },
  0xa7607d86: {
    id: 0xa7607d86,
    name: "YearlyAmbientWindSpeed",
    type: ExemplarValueType.Float32,
    desc: "YearlyAmbientWindSpeed",
  },
  0xa7607d87: {
    id: 0xa7607d87,
    name: "YearlyAmbientWindDirection[0]",
    type: ExemplarValueType.Float32,
    desc: "YearlyAmbientWindDirection[0]",
  },
  0xa7607d88: {
    id: 0xa7607d88,
    name: "YearlyAmbientWindDirection[1]",
    type: ExemplarValueType.Float32,
    desc: "YearlyAmbientWindDirection[1]",
  },
  0xa7607d89: {
    id: 0xa7607d89,
    name: "WindPerturbationRange",
    type: ExemplarValueType.Float32,
    desc: "Angular window for periodic variation of ambient wind direction (0-90 degrees)",
  },
  0xa8ebcf0c: {
    id: 0xa8ebcf0c,
    name: "Incinerator monthly capacity",
    type: ExemplarValueType.UInt32,
    desc: "Amount of trash burned per month",
  },
  0xa8f149c5: {
    id: 0xa8f149c5,
    name: "FloraFamily",
    type: ExemplarValueType.UInt32,
    desc: "FloraFamilyProperty",
  },
  0xa8f4eb0c: {
    id: 0xa8f4eb0c,
    name: "Water Use Reduction",
    type: ExemplarValueType.Float32,
    desc: "Effect (multiplier) this ordinance has on water use",
  },
  0xa90f5dec: {
    id: 0xa90f5dec,
    name: "IntelliScrollOuterRadiusPixels",
    type: ExemplarValueType.UInt32,
    desc: "When right-click scrolling, this is the number of pixels away from the anchor at which the scrolling speed maxes out.",
  },
  0xa911e2f1: {
    id: 0xa911e2f1,
    name: "Power radiation radius",
    type: ExemplarValueType.UInt32,
    desc: "Number of cells surrounding buildings and zones that will also be powered",
  },
  0xa9132ef9: {
    id: 0xa9132ef9,
    name: "Power line monthly upkeep",
    type: ExemplarValueType.Float32,
    desc: "Cost of maintaining each cell of wire connected to this power pole",
  },
  0xa91351a6: {
    id: 0xa91351a6,
    name: "Air Pollution Threshold",
    type: ExemplarValueType.UInt32,
    desc: "When a cell has this much air pollution, it's considered polluted",
  },
  0xa9188ef5: {
    id: 0xa9188ef5,
    name: "Budget: TaxMultiplier_R$",
    type: ExemplarValueType.Float32,
    desc: "Multiplier to tweak the relative weighting of the R$ occupant type's taxes",
  },
  0xa9189479: {
    id: 0xa9189479,
    name: "Health Init/Max Allowed Funding",
    type: ExemplarValueType.Float32,
    desc: "Initial and Maximum allowed funding percentage for health department",
  },
  0xa91894bc: {
    id: 0xa91894bc,
    name: "School Strike Duration",
    type: ExemplarValueType.UInt32,
    desc: "Maximum duration of a School strike, in months",
  },
  0xa918c929: {
    id: 0xa918c929,
    name: "Budget: TaxMultiplier_Cs$",
    type: ExemplarValueType.Float32,
    desc: "Multiplier to tweak the relative weighting of the CS$ occupant type's taxes",
  },
  0xa918c942: {
    id: 0xa918c942,
    name: "Budget: TaxMultiplier_ID",
    type: ExemplarValueType.Float32,
    desc: "Multiplier to tweak the relative weighting of the IDirty occupant type's taxes",
  },
  0xa91b3af4: {
    id: 0xa91b3af4,
    name: "School Coverage Radius % Effect",
    type: ExemplarValueType.Float32,
    desc: "Percentage (from 0 to 200) by which this ordinance affects coverage radius of schools",
  },
  0xa91b3afa: {
    id: 0xa91b3afa,
    name: "School Effectiveness vs. Distance Effect",
    type: ExemplarValueType.Float32,
    desc: "Maps % of coverage distance from a school to EQ boost %",
  },
  0xa91cbe00: {
    id: 0xa91cbe00,
    name: "ShimmerMinQuadWidth",
    type: ExemplarValueType.Float32,
    desc: "Min quad widths (meters) in different zooms",
  },
  0xa91cbe01: {
    id: 0xa91cbe01,
    name: "ShimmerMaxQuadWidth",
    type: ExemplarValueType.Float32,
    desc: "Max quad widths (meters) in different zooms",
  },
  0xa91cbe02: {
    id: 0xa91cbe02,
    name: "ShimmerQuadDensity",
    type: ExemplarValueType.UInt32,
    desc: "Number of shimmer quads to have if all of a 256x256 happened to be water",
  },
  0xa92356ae: {
    id: 0xa92356ae,
    name: "Max roads funding percent",
    type: ExemplarValueType.Float32,
    desc: "Maximum allowed funding percentage for roads",
  },
  0xa92356af: {
    id: 0xa92356af,
    name: "Max mass transit funding percent",
    type: ExemplarValueType.Float32,
    desc: "Maximum allowed funding percentage for mass transit",
  },
  0xa92356b0: {
    id: 0xa92356b0,
    name: "Damaged road extra step cost",
    type: ExemplarValueType.Float32,
    desc: "Additional cost to travel on a damaged road tile",
  },
  0xa92356b1: {
    id: 0xa92356b1,
    name: "Income per tile by travel type",
    type: ExemplarValueType.Float32,
    desc: "Income gained for each tile: Walk, Drive, Bus, Passenger rail, Truck, Freight rail, Subway",
  },
  0xa92356b2: {
    id: 0xa92356b2,
    name: "Mass Transit Usage Chance",
    type: ExemplarValueType.UInt8,
    desc: "Percent chance an RCI trip will allow use of mass transit",
  },
  0xa92356b3: {
    id: 0xa92356b3,
    name: "Network Traffic Capacity",
    type: ExemplarValueType.Float32,
    desc: "Road, Rail, Highway, Street, Pipes, PowerPoles, Avenue, Subway, Elevated Rail, Monorail, One-ways, DirtRoad, Ground Highway",
  },
  0xa92356b4: {
    id: 0xa92356b4,
    name: "Travel type generates traffic",
    type: ExemplarValueType.Bool,
    desc: "Order: Walk, Car, Bus, PassengerRail, Truck, FreightRail, Subway. Determines whether a form of transportation will create congestion if volume exceeds capacity.",
  },
  0xa92356b5: {
    id: 0xa92356b5,
    name: "Travel type can reach destination",
    type: ExemplarValueType.Bool,
    desc: "Order: Walk, Car, Bus, Pass. Rail, Truck, Freight Rail, Subway",
  },
  0xa92356b8: {
    id: 0xa92356b8,
    name: "Maximum distance from origin to network",
    type: ExemplarValueType.UInt32,
    desc: "How far a trip can jump from its starting zone to a road/rail/etc",
  },
  0xa92356b9: {
    id: 0xa92356b9,
    name: "Congestion vs Speed",
    type: ExemplarValueType.Float32,
    desc: "Maps speed multiplier as a function of congestion",
  },
  0xa92356ba: {
    id: 0xa92356ba,
    name: "Commute trip max time",
    type: ExemplarValueType.Float32,
    desc: "Maximum time for a commute trip in minutes",
  },
  0xa92356bb: {
    id: 0xa92356bb,
    name: "Intersection and Turn Capacity Effect",
    type: ExemplarValueType.Float32,
    desc: "Diminishing effect of an intersection or turn on capacity. The first value is the intersection tile, the next two values are the two tiles after the intersection tile.",
  },
  0xa92356bc: {
    id: 0xa92356bc,
    name: "Trip Starting Cost by travel type",
    type: ExemplarValueType.Float32,
    desc: "Starting overhead cost in time for each travel type",
  },
  0xa92356bd: {
    id: 0xa92356bd,
    name: "Job Scaling Constant",
    type: ExemplarValueType.Float32,
    desc: "Multiplies building capacity to determine number of jobs there",
  },
  0xa92356be: {
    id: 0xa92356be,
    name: "Population Background Traffic",
    type: ExemplarValueType.Float32,
    desc: "Amount of background (non-trip) traffic volume generated per population point for R, C, and I zones",
  },
  0xa92356bf: {
    id: 0xa92356bf,
    name: "Travel type affected by traffic",
    type: ExemplarValueType.Bool,
    desc: "Order: Walk, Car, Bus, Pass. Rail, Truck, Freight Rail, Subway. Determines if a form of transportation suffers a speed reduction when congestion is above 100%.",
  },
  0xa92ae3bd: {
    id: 0xa92ae3bd,
    name: "Hospital Effectiveness vs. Average Age",
    type: ExemplarValueType.Float32,
    desc: "Maps Average age of a tract to the % HQ boost the hospital gives the tract",
  },
  0xa92ae446: {
    id: 0xa92ae446,
    name: "School EQ boost",
    type: ExemplarValueType.Float32,
    desc: "The EQ boost the school gives at its origin",
  },
  0xa92d8e40: {
    id: 0xa92d8e40,
    name: "School Type ID List",
    type: ExemplarValueType.UInt32,
    desc: "Variable length list of type IDs for this school",
  },
  0xa92d9d7a: {
    id: 0xa92d9d7a,
    name: "School EQ Boost Effect",
    type: ExemplarValueType.Float32,
    desc: "Percentage (from 0 to 200%) by which this ordinance affects all EQ values",
  },
  0xa92d9fcd: {
    id: 0xa92d9fcd,
    name: "Hospital Effectiveness vs. Wealth",
    type: ExemplarValueType.Float32,
    desc: "Maps wealth level to HQ boost %",
  },
  0xa941b028: {
    id: 0xa941b028,
    name: "Water Pollution to HQ Decay Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps amount of water pollution in a tract to the rate at which the HQ in that tract decays",
  },
  0xa96e5641: {
    id: 0xa96e5641,
    name: "Underground Trench Floor Depth",
    type: ExemplarValueType.Float32,
    desc: "Default depth of underground network trench floor below terrain",
  },
  0xa977a86b: {
    id: 0xa977a86b,
    name: "Prop occupant class ID",
    type: ExemplarValueType.UInt32,
    desc: "Uint32: The class ID of the prop occupant to create. If not present, then 'kGZCLSID_cSC4PropOccupant' is used.",
  },
  0xa97f42ce: {
    id: 0xa97f42ce,
    name: "Watered Terrain Colour",
    type: ExemplarValueType.UInt8,
    desc: "RGBA colour for watered terrain cells in pipe view",
  },
  0xa9a36e47: {
    id: 0xa9a36e47,
    name: "Budget: TaxMultiplier_IHT",
    type: ExemplarValueType.Float32,
    desc: "Multiplier to tweak the relative weighting of the IHighTech occupant type's taxes",
  },
  0xa9af1e54: {
    id: 0xa9af1e54,
    name: "Occupant Trip Zone Filter",
    type: ExemplarValueType.UInt8,
    desc: "Which zone types will generate occupant trips",
  },
  0xa9af1e55: {
    id: 0xa9af1e55,
    name: "Occupant Trip Purpose Filter",
    type: ExemplarValueType.UInt8,
    desc: "Which zone purpose types will generate occupant trips",
  },
  0xa9b6ecd3: {
    id: 0xa9b6ecd3,
    name: "Stage Time",
    type: ExemplarValueType.UInt32,
    desc: "Ticks to next fire stage by stage",
  },
  0xa9b6ecd4: {
    id: 0xa9b6ecd4,
    name: "Spread Time",
    type: ExemplarValueType.UInt32,
    desc: "Ticks between spread attempts per stage",
  },
  0xa9b6ecd5: {
    id: 0xa9b6ecd5,
    name: "Spread Radius",
    type: ExemplarValueType.UInt32,
    desc: "In meters beyond occupant/lot boundaries",
  },
  0xa9b6ecd6: {
    id: 0xa9b6ecd6,
    name: "Wind Scalar",
    type: ExemplarValueType.Float32,
    desc: "Wind effect on spread direction is directly scaled by this",
  },
  0xa9b6ecd7: {
    id: 0xa9b6ecd7,
    name: "Fires / Area (Top)",
    type: ExemplarValueType.Float32,
    desc: "Number of top fires per unit area",
  },
  0xa9b6ecd8: {
    id: 0xa9b6ecd8,
    name: "Fires / Area (Side)",
    type: ExemplarValueType.Float32,
    desc: "Number of side fires per unit area",
  },
  0xa9b6ecd9: {
    id: 0xa9b6ecd9,
    name: "Extinguish Rate vs. Protection",
    type: ExemplarValueType.Float32,
    desc: "The rate at which a fire declines as a function of protection",
  },
  0xa9b6ecda: {
    id: 0xa9b6ecda,
    name: "Percent FireStart vs. Flammability",
    type: ExemplarValueType.Float32,
    desc: "Maps Flammability(0-255) to percent chance(0-100) of fire starting when ignited",
  },
  0xa9c283d0: {
    id: 0xa9c283d0,
    name: "MaxBeachWidth",
    type: ExemplarValueType.UInt8,
    desc: "How far from water (in cells) does the beach extend",
  },
  0xa9c283d1: {
    id: 0xa9c283d1,
    name: "MaxBeachAltitude",
    type: ExemplarValueType.Float32,
    desc: "How high above the sea level(meters), does the beach extend",
  },
  0xa9d6cc17: {
    id: 0xa9d6cc17,
    name: "Fire Crew Offsets",
    type: ExemplarValueType.Float32,
    desc: "Offsets (in meters) of fire team from centre of engine and director from front of engine",
  },
  0xa9d6cc18: {
    id: 0xa9d6cc18,
    name: "Fire Crew Competence Pct",
    type: ExemplarValueType.Float32,
    desc: "Min Percentage (0.0-1.0) of fire team efficiency that will give the super, normal, and incompetent animations",
  },
  0xa9e581fb: {
    id: 0xa9e581fb,
    name: "KeyboardScrollSpeed",
    type: ExemplarValueType.Float32,
    desc: "Speed of scrolling when arrow key is held down.",
  },
  0xaa120972: {
    id: 0xaa120972,
    name: "NetworkLotConfigPropertyMaxSlopeAllowed",
    type: ExemplarValueType.Float32,
    desc: "The Max slope this lot will develop on. Min:00. Max:90.",
  },
  0xaa120973: {
    id: 0xaa120973,
    name: "NetworkLotConfigPropertyMinSlopeAllowed",
    type: ExemplarValueType.Float32,
    desc: "The Min slope this lot will develop on. Min:00. Max:90.",
  },
  0xaa12fcb0: {
    id: 0xaa12fcb0,
    name: "Crime Name",
    type: ExemplarValueType.String,
  },
  0xaa12fcb1: {
    id: 0xaa12fcb1,
    name: "Icon Resource Key",
    type: ExemplarValueType.UInt32,
    desc: "type, group, and instance ID",
  },
  0xaa12fcb2: {
    id: 0xaa12fcb2,
    name: "Zone Filter",
    type: ExemplarValueType.UInt8,
    desc: "Zone types compatible with crime (none == can appear in any zone)",
  },
  0xaa12fcb3: {
    id: 0xaa12fcb3,
    name: "Wealth Filter",
    type: ExemplarValueType.UInt8,
    desc: "Zone wealth values compatible with crime (none == can appear around any wealth)",
  },
  0xaa12fcb4: {
    id: 0xaa12fcb4,
    name: "Zone Purpose Filter",
    type: ExemplarValueType.UInt8,
    desc: "Zone purpose types compatible with crime (none == can appear around any purpose)",
  },
  0xaa12fcb5: {
    id: 0xaa12fcb5,
    name: "Crime Grid Value",
    type: ExemplarValueType.UInt8,
    desc: "The crime grid tract value will be increased by this amount",
  },
  0xaa12fcb6: {
    id: 0xaa12fcb6,
    name: "Trigger Fire",
    type: ExemplarValueType.UInt8,
    desc: "If set to non-zero value, this will trigger a fire",
  },
  0xaa12fcb7: {
    id: 0xaa12fcb7,
    name: "Lot Condition Filter",
    type: ExemplarValueType.UInt8,
    desc: "Lot conditions compatible with crime",
  },
  0xaa12fcb8: {
    id: 0xaa12fcb8,
    name: "Relative Occurrence",
    type: ExemplarValueType.Float32,
    desc: "Relative occurrence weight of this crime, only has meaning relative to values for other crimes.",
  },
  0xaa161f81: {
    id: 0xaa161f81,
    name: "Max acceptable pumped water pollution level",
    type: ExemplarValueType.UInt32,
    desc: "Water pumps will not function if water pollution higher than this level",
  },
  0xaa19f6ea: {
    id: 0xaa19f6ea,
    name: "Health effect strength",
    type: ExemplarValueType.Float32,
    desc: "Strength of generic health effect of this building (positive or negative)",
  },
  0xaa1dd396: {
    id: 0xaa1dd396,
    name: "OccupantGroups",
    type: ExemplarValueType.UInt32,
    desc: "List of groups this occupant belongs to. Function and values vary for different Exemplar types.",
  },
  0xaa1dd397: {
    id: 0xaa1dd397,
    name: "SFX:Query Sound",
    type: ExemplarValueType.UInt32,
    desc: "GUID of the sound to play when the occupant is clicked on with query tool",
  },
  0xaa1f8ab7: {
    id: 0xaa1f8ab7,
    name: "Garbage service cost per unit of garbage",
    type: ExemplarValueType.Float32,
    desc: "Cost per unit of garbage sent to landfill, incinerator or w2e",
  },
  0xaa230baf: {
    id: 0xaa230baf,
    name: "Industrial Building Type",
    type: ExemplarValueType.UInt8,
    desc: "Which type of Industrial (Anchor/Out/Mech)",
  },
  0xaa2ed800: {
    id: 0xaa2ed800,
    name: "ToolEffectActiveID",
    type: ExemplarValueType.UInt32,
    desc: "UI Effect in Active State. Is a pointer to an Effect within Effects Directory Tree",
  },
  0xaa2ed801: {
    id: 0xaa2ed801,
    name: "ToolEffectIdleID",
    type: ExemplarValueType.UInt32,
    desc: "UI Effect in Idle state. Is a pointer to an Effect within Effects Directory Tree",
  },
  0xaa2ed802: {
    id: 0xaa2ed802,
    name: "IconEffectActiveID",
    type: ExemplarValueType.UInt32,
    desc: "Icon Effect in Active state. Is a pointer to an Effect within Effects Directory Tree",
  },
  0xaa2ed803: {
    id: 0xaa2ed803,
    name: "IconEffectIdleID",
    type: ExemplarValueType.UInt32,
    desc: "Icon Effect in Idle state. Is a pointer to an Effect within Effects Directory Tree",
  },
  0xaa2ed804: {
    id: 0xaa2ed804,
    name: "ToolCursorActiveID",
    type: ExemplarValueType.UInt32,
    desc: "References PNG based Cursor files for the Tools Cursor in an Active state.",
  },
  0xaa2ed805: {
    id: 0xaa2ed805,
    name: "ToolCursorIdleID",
    type: ExemplarValueType.UInt32,
    desc: "References PNG based Cursor files for the Tools Cursor in an Idle state.",
  },
  0xaa3fbdde: {
    id: 0xaa3fbdde,
    name: "Audio:ZoomLoopEnable",
    type: ExemplarValueType.UInt8,
    desc: "Bit field describing which zoom levels loop is active for",
  },
  0xaa3fc48e: {
    id: 0xaa3fc48e,
    name: "Audio:FreshVolume",
    type: ExemplarValueType.UInt32,
    desc: "Freshness Volume",
  },
  0xaa46934b: {
    id: 0xaa46934b,
    name: "MinDealTerm",
    type: ExemplarValueType.Float32,
    desc: "Min term, in Years, a deal can be had before renewal.",
  },
  0xaa4bc72a: {
    id: 0xaa4bc72a,
    name: "VolcanoLavaScaleIntensityOfProduction",
    type: ExemplarValueType.Float32,
    desc: "Multiplying Factor to the Response curve so response curve shape preserves",
  },
  0xaa4c0d1b: {
    id: 0xaa4c0d1b,
    name: "Graph type",
    type: ExemplarValueType.UInt32,
    desc: "Type of the graph to be shown (line, bar, etc.)",
  },
  0xaa5832f3: {
    id: 0xaa5832f3,
    name: "Pollution at outer edge of circle",
    type: ExemplarValueType.SInt32,
    desc: "Pollution generated: air, water, garbage, radiation (at outer radius of area of effect)",
  },
  0xaa5a9633: {
    id: 0xaa5a9633,
    name: "Ignore Lighting",
    type: ExemplarValueType.Bool,
    desc: "Automaton should not be lit by the lighting manager",
  },
  0xaa5b8407: {
    id: 0xaa5b8407,
    name: "Mayor Rating",
    type: ExemplarValueType.SInt32,
    desc: "This value get added globally to mayor rating",
  },
  0xaa5c04c5: {
    id: 0xaa5c04c5,
    name: "Radiation Spew Intensity",
    type: ExemplarValueType.Float32,
    desc: "Intensity of radiation spew when power plant blows up",
  },
  0xaa5c04c8: {
    id: 0xaa5c04c8,
    name: "Radiation Spew Radius",
    type: ExemplarValueType.Float32,
    desc: "Radius of radiation spew when power plant blows up",
  },
  0xaa5c23fa: {
    id: 0xaa5c23fa,
    name: "Landmark Homage Key",
    type: ExemplarValueType.UInt32,
    desc: "Resource key of string to be displayed in the landmark's query dialog",
  },
  0xaa60e745: {
    id: 0xaa60e745,
    name: "Goofy Stat Response Curve",
    type: ExemplarValueType.Float32,
    desc: "Response curve for the Goofy Stat field in query dialogs",
  },
  0xaa713782: {
    id: 0xaa713782,
    name: "Funding percentage to power pole decay/repair",
    type: ExemplarValueType.Float32,
    desc: "Converts a funding level (percentage) into a decay rate (negative numbers) or repair rate (positive numbers)",
  },
  0xaa83558f: {
    id: 0xaa83558f,
    name: "Crane Hints",
    type: ExemplarValueType.UInt8,
    desc: "What kind of crane to use",
  },
  0xaa87817a: {
    id: 0xaa87817a,
    name: "SFX:Intersection Sound",
    type: ExemplarValueType.UInt32,
    desc: "GUID of the sound to play when the occupant approaches an intersection",
  },
  0xaa905ab9: {
    id: 0xaa905ab9,
    name: "SFX:Query Sound decayed",
    type: ExemplarValueType.UInt32,
    desc: "GUID of the sound to play when the occupant is clicked on with query tool and is decayed.",
  },
  0xaabaa0d3: {
    id: 0xaabaa0d3,
    name: "Audio:Max Concurrent One-Shots",
    type: ExemplarValueType.UInt32,
    desc: "Max concurrent playing one-shots",
  },
  0xab9ec143: {
    id: 0xab9ec143,
    name: "DV/RegionalTransport: Colour table",
    type: ExemplarValueType.UInt32,
    desc: "Colour table for regional transport map: Street, Rail, road, 1 way road, Avenue, Monorail, Elevated Rail, GroundHighway, Elevated Highway, Airport, Seaport, Recreational, RailStations, Default Zone.",
  },
  0xabb90e58: {
    id: 0xabb90e58,
    name: "UDIProp:Helipad Type",
    type: ExemplarValueType.UInt8,
    desc: "Property is a key that controls what particular kind of Prop should appear. Some UDIProp Keys are tied in directly with UDI missions",
  },
  0xabe1af70: {
    id: 0xabe1af70,
    name: "Item Icon(UDI)",
    type: ExemplarValueType.UInt32,
    desc: "References a PNG file for UDI Menu icon. UDI have two of these properties.",
  },
  0xabe1b5a3: {
    id: 0xabe1b5a3,
    name: "BridgeObstruction",
    type: ExemplarValueType.Bool,
    desc: "This property prevents water automata from crossing under the bridge tile.",
  },
  0xabe8e6cc: {
    id: 0xabe8e6cc,
    name: "UDI UI Display Control2",
    type: ExemplarValueType.UInt32,
    desc: "Controls/handles the way in which the different Measurement displays [like the Speedometer/Tachometer/etc] is controlled/displayed when UDI vehicles are active and/or moving around. Property is directly tied in with other UDI UI Properties.",
  },
  0xac183320: {
    id: 0xac183320,
    name: "UDIProp:MarinaBoat2",
    type: ExemplarValueType.UInt8,
    desc: "Property is a key that controls what particular kind of Prop should appear. Some UDIProp Keys are tied in directly with UDI missions",
  },
  0xac18330c: {
    id: 0xac18330c,
    name: "UDIProp:MarinaBoat5",
    type: ExemplarValueType.UInt8,
    desc: "Property is a key that controls what particular kind of Prop should appear. Some UDIProp Keys are tied in directly with UDI missions",
  },
  0xac2bc81c: {
    id: 0xac2bc81c,
    name: "Shadow Model Key",
    type: ExemplarValueType.UInt32,
    desc: "Model TGI for shadow model",
  },
  0xac43826d: {
    id: 0xac43826d,
    name: "Hospital Capacity Chunk Size",
    type: ExemplarValueType.UInt32,
    desc: "How many people are represented by one unit in the coverage map",
  },
  0xc7b36ca4: {
    id: 0xc7b36ca4,
    name: "MaxTerrainHtIncrease",
    type: ExemplarValueType.Float32,
    desc: "How much can terrain be raised during network placement [0.0 - 100000.0]",
  },
  0xc7b36ca5: {
    id: 0xc7b36ca5,
    name: "MaxTerrainHtDecrease",
    type: ExemplarValueType.Float32,
    desc: "How much can terrain be lowered during network placement [0.0 - 100000.0]",
  },
  0xc804dd86: {
    id: 0xc804dd86,
    name: "MaxNetworkHtAdjustment",
    type: ExemplarValueType.Float32,
    desc: "Range: [0.0 - 100000.0]",
  },
  0xc804dd87: {
    id: 0xc804dd87,
    name: "MinTerrainSlopeForTunnelStart",
    type: ExemplarValueType.Float32,
    desc: "Min terrain slope to trigger tunnel placement. Min:10. Max:89.5",
  },
  0xc804dd88: {
    id: 0xc804dd88,
    name: "MaxTunnelSlope",
    type: ExemplarValueType.Float32,
    desc: "Maximum slope of tunnel (in degrees)",
  },
  0xc804dd89: {
    id: 0xc804dd89,
    name: "MaxDisplacementBeyondRefPlane",
    type: ExemplarValueType.Float32,
    desc: "Maximum amount (in meters) by which a network vertex is allowed to move beyond reference plane",
  },
  0xc804dd90: {
    id: 0xc804dd90,
    name: "UseFreehandMode",
    type: ExemplarValueType.Bool,
    desc: "Use freehand mode of placement (i.e., anchor points freeze)",
  },
  0xc804dd91: {
    id: 0xc804dd91,
    name: "NumFramesBetweenAnchorPtFreeze",
    type: ExemplarValueType.UInt32,
    desc: "[deprecated] Number of frame updates between the freezing of successive anchor points",
  },
  0xc804dd92: {
    id: 0xc804dd92,
    name: "NumCellsBetweenAnchorPtFreeze",
    type: ExemplarValueType.UInt32,
    desc: "Min number of cells between successive anchor points in different zooms",
  },
  0xc804dd93: {
    id: 0xc804dd93,
    name: "MaxDistFromTerrain",
    type: ExemplarValueType.Float32,
    desc: "How far away from the terrain is the network allowed to be [0.0 - 100000.0]",
  },
  0xc804dd94: {
    id: 0xc804dd94,
    name: "MaxRetainingWallHt",
    type: ExemplarValueType.Float32,
    desc: "Max height of the retaining walls [0.0 - 100000.0]",
  },
  0xc804dd95: {
    id: 0xc804dd95,
    name: "MaxPylonHt",
    type: ExemplarValueType.Float32,
    desc: "Max height of the supporting pylons [Reating wall ht - 100000.0]",
  },
  0xc804dd96: {
    id: 0xc804dd96,
    name: "MaxHtDiffBetweenLandBridgeEnds",
    type: ExemplarValueType.Float32,
    desc: "Max allowed terrain height diff between the two ends of land bridges",
  },
  0xc804dd97: {
    id: 0xc804dd97,
    name: "SmoothenOnlyConnectedTiles",
    type: ExemplarValueType.Bool,
    desc: "Smoothen only those tiles that are connected to the segment being placed",
  },
  0xc804dd98: {
    id: 0xc804dd98,
    name: "SmoothingProgressionSteps",
    type: ExemplarValueType.UInt32,
    desc: "Number of times we attempt expanding the smoothing region before giving up",
  },
  0xc804dd99: {
    id: 0xc804dd99,
    name: "SmoothingProgressionAdded",
    type: ExemplarValueType.UInt32,
    desc: "How much (in cells) does the smoothing region expand per each SmoothingProgressionStep",
  },
  0xc804dd9a: {
    id: 0xc804dd9a,
    name: "NetworkPositionFixing",
    type: ExemplarValueType.Float32,
    desc: "The height change that requires fixing if an existing network moves by less than this, otherwise no attempt to fix it (for efficiency)",
  },
  0xc804dd9b: {
    id: 0xc804dd9b,
    name: "TimeBetweenAnchorPtFreeze",
    type: ExemplarValueType.UInt32,
    desc: "Time in milliseconds between the freezing of successive anchor points",
  },
  0xc8ebd131: {
    id: 0xc8ebd131,
    name: "Water Treatment monthly capacity",
    type: ExemplarValueType.UInt32,
    desc: "Amount of water treated per month",
  },
  0xc8ed2d84: {
    id: 0xc8ed2d84,
    name: "Water Consumed",
    type: ExemplarValueType.UInt32,
    desc: "Amount of water consumed",
  },
  0xc910b4ce: {
    id: 0xc910b4ce,
    name: "Power plant energy conversion cost",
    type: ExemplarValueType.Float32,
    desc: "Cost to produce one unit of electricity, not including infrastructure maintenance",
  },
  0xc911eda0: {
    id: 0xc911eda0,
    name: "FoundationSideTextureSize",
    type: ExemplarValueType.Float32,
    desc: "Size of a texture in meters. Defaults to standard city cell size.",
  },
  0xc911eda1: {
    id: 0xc911eda1,
    name: "FoundationTopTextureSize",
    type: ExemplarValueType.Float32,
    desc: "Size of a texture in meters. Defaults to standard city cell size.",
  },
  0xc91894a8: {
    id: 0xc91894a8,
    name: "(OBS) School Min Acceptable Funding %",
    type: ExemplarValueType.Float32,
    desc: "Minimum acceptable percentage for School department funding",
  },
  0xc91894cb: {
    id: 0xc91894cb,
    name: "School Strike Response Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps difference between actual % funding and % ideal funding to % chance of a School strike",
  },
  0xc91b3b02: {
    id: 0xc91b3b02,
    name: "School Effectiveness vs. Average Age Effect",
    type: ExemplarValueType.Float32,
    desc: "Maps average age to EQ boost %",
  },
  0xc9299659: {
    id: 0xc9299659,
    name: "Hospital HQ boost",
    type: ExemplarValueType.Float32,
    desc: "Inherent HQ boost of this hospital",
  },
  0xc9299662: {
    id: 0xc9299662,
    name: "School Effectiveness vs. Average Age",
    type: ExemplarValueType.Float32,
    desc: "Maps Average age of a tract to the % EQ boost the school gives the tract",
  },
  0xc929c433: {
    id: 0xc929c433,
    name: "EQ Decay",
    type: ExemplarValueType.Float32,
    desc: "Amount by which EQ decays each month",
  },
  0xc929c652: {
    id: 0xc929c652,
    name: "Low Wealth Average Age",
    type: ExemplarValueType.UInt8,
    desc: "Average age assigned to new Low Wealth residents",
  },
  0xc929cc58: {
    id: 0xc929cc58,
    name: "Low Wealth EQ",
    type: ExemplarValueType.UInt8,
    desc: "EQ assigned to new Low Wealth residents",
  },
  0xc929cc8d: {
    id: 0xc929cc8d,
    name: "Low Wealth HQ",
    type: ExemplarValueType.UInt8,
    desc: "HQ assigned to new Low Wealth residents",
  },
  0xc92d7ec0: {
    id: 0xc92d7ec0,
    name: "School Effectiveness vs. Wealth",
    type: ExemplarValueType.Float32,
    desc: "Maps wealth level to EQ boost %",
  },
  0xc92d9c7a: {
    id: 0xc92d9c7a,
    name: "Health Quotient Decay Effect",
    type: ExemplarValueType.Float32,
    desc: "Percentage (from 0 to 200%) by which this ordinance affects the rate at which HQ decays",
  },
  0xc941b02e: {
    id: 0xc941b02e,
    name: "Garbage Pollution to HQ Decay Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps amount of garbage pollution in a tract to the rate at which the HQ in that tract decays",
  },
  0xc973c9aa: {
    id: 0xc973c9aa,
    name: "Layer Filter",
    type: ExemplarValueType.UInt8,
    desc: "Which automata layers this model can appear in",
  },
  0xc98204b8: {
    id: 0xc98204b8,
    name: "Visual effect name 0",
    type: ExemplarValueType.String,
  },
  0xc98204b9: {
    id: 0xc98204b9,
    name: "Visual effect name 1",
    type: ExemplarValueType.String,
  },
  0xc9a5a1be: {
    id: 0xc9a5a1be,
    name: "NetworkPieceID",
    type: ExemplarValueType.UInt32,
    desc: "References the Network Piece/File(s) that this item should appear on/with",
  },
  0xc9b40128: {
    id: 0xc9b40128,
    name: "Flammability multiplier, summer",
    type: ExemplarValueType.Float32,
    desc: "flammability multiplier during summer",
  },
  0xc9b93a56: {
    id: 0xc9b93a56,
    name: "SFX:Default Plop Sound",
    type: ExemplarValueType.UInt32,
    desc: "GUID of sound played when building is plopped",
  },
  0xc9c18eae: {
    id: 0xc9c18eae,
    name: "Moving Van Frequency",
    type: ExemplarValueType.Float32,
    desc: "How often (0.0-1.0) a moving van will be created in response to a new residence",
  },
  0xc9da95d4: {
    id: 0xc9da95d4,
    name: "Attraction Threshold",
    type: ExemplarValueType.Float32,
    desc: "Magnitude of a repulser or attractor at which peds will break their paths to get away from or closer to it",
  },
  0xc9dbdd00: {
    id: 0xc9dbdd00,
    name: "Flora: burnt sweep interval",
    type: ExemplarValueType.Float32,
    desc: "Days between sweeps for burnt stumps (may be fractional)",
  },
  0xc9dbdd01: {
    id: 0xc9dbdd01,
    name: "Flora: burnt sweep size",
    type: ExemplarValueType.Float32,
    desc: "Maximum number of burnt stumps removed per sweep (may be fractional)",
  },
  0xc9dbdd02: {
    id: 0xc9dbdd02,
    name: "Flora: elevation scale range",
    type: ExemplarValueType.Float32,
    desc: "Meters from sea level over which to distribute the 16 elevation rows",
  },
  0xc9e69af6: {
    id: 0xc9e69af6,
    name: "Auxiliary Model 2 Key",
    type: ExemplarValueType.UInt32,
    desc: "Type/Group/Instance for additional model (e.g. flashing lights on emergency vehicles)",
  },
  0xc9ee640a: {
    id: 0xc9ee640a,
    name: "Grade max angle",
    type: ExemplarValueType.Float32,
    desc: "Maximum angle (in degrees) of network grade that will change the speed of a vehicle",
  },
  0xc9ee640b: {
    id: 0xc9ee640b,
    name: "Grade speed multiplier",
    type: ExemplarValueType.Float32,
    desc: "Percentage that will be added to/subtracted from a vehicle's speed when driving up/down a grade at max angle",
  },
  0xc9ee640c: {
    id: 0xc9ee640c,
    name: "Fire Crew Max Stream Dist",
    type: ExemplarValueType.Float32,
    desc: "Max distance between fire and crew for the crew to aim its water stream at it",
  },
  0xc9ee640d: {
    id: 0xc9ee640d,
    name: "EmergencyVehicle:ClearRadius",
    type: ExemplarValueType.UInt8,
    desc: "Number of tiles around emergency vehicles on which traffic will be removed",
  },
  0xca027307: {
    id: 0xca027307,
    name: "Average Age reset value",
    type: ExemplarValueType.UInt8,
    desc: "When average age reaches life expectancy in a tract, the tract's average age is set to this value",
  },
  0xca027325: {
    id: 0xca027325,
    name: "EQ reset percent",
    type: ExemplarValueType.Float32,
    desc: "When average age reaches life expectancy in a tract, the tract's EQ is multiplied by this value",
  },
  0xca027328: {
    id: 0xca027328,
    name: "HQ reset percent",
    type: ExemplarValueType.Float32,
    desc: "When average age reaches life expectancy in a tract, the tract's HQ is multiplied by this value",
  },
  0xca19d7ca: {
    id: 0xca19d7ca,
    name: "SFX:Ambience Good Sound",
    type: ExemplarValueType.UInt32,
    desc: "GUID of sound played when building is around and in good working order",
  },
  0xca271780: {
    id: 0xca271780,
    name: "Num Growth Stages",
    type: ExemplarValueType.UInt32,
    desc: "Number of growth stages (i.e. number of lots) for this particular airport type",
  },
  0xca271781: {
    id: 0xca271781,
    name: "Lot stage template IDs",
    type: ExemplarValueType.UInt32,
    desc: "List of template IDs for each growth stage. Each ID references an Exemplar file",
  },
  0xca271782: {
    id: 0xca271782,
    name: "Obsolete! (Demand Thresholds List)",
    type: ExemplarValueType.Float32,
    desc: "List of demand thresholds for each growth stage. What this value refers to is zone type specific.",
  },
  0xca271783: {
    id: 0xca271783,
    name: "Budget Requirements List",
    type: ExemplarValueType.SInt64,
    desc: "Lists budget requirements for each growth stage",
  },
  0xca271784: {
    id: 0xca271784,
    name: "Trip Capacity List",
    type: ExemplarValueType.UInt32,
    desc: "Lists Maximum Trip capacities for each growth stage for airport or seaport",
  },
  0xca271785: {
    id: 0xca271785,
    name: "Efficiency Distress Threshold",
    type: ExemplarValueType.Float32,
    desc: "Efficiency percentage under which the port lot distresses",
  },
  0xca271786: {
    id: 0xca271786,
    name: "Stage Upgrade Cost",
    type: ExemplarValueType.SInt64,
    desc: "Lists cost associated with each growth stage",
  },
  0xca271787: {
    id: 0xca271787,
    name: "Port Size",
    type: ExemplarValueType.UInt8,
    desc: "Port Size identifier. 1=small, 2=medium, 3=large",
  },
  0xca271788: {
    id: 0xca271788,
    name: "Port Width",
    type: ExemplarValueType.UInt8,
    desc: "Width of the port lot (in North rotation)",
  },
  0xca271789: {
    id: 0xca271789,
    name: "Port Height",
    type: ExemplarValueType.UInt8,
    desc: "Height of the port lot (in North rotation)",
  },
  0xca271800: {
    id: 0xca271800,
    name: "Height Map",
    type: ExemplarValueType.Float32,
    desc: "Optional list of vertex altitude values corresponding to each cell in the lot for airport or seaport",
  },
  0xca359f17: {
    id: 0xca359f17,
    name: "Audio:ZoomDistances",
    type: ExemplarValueType.Float32,
    desc: "Distance above ground or sea for microphone position",
  },
  0xca383ca2: {
    id: 0xca383ca2,
    name: "ScrollingDeceleration",
    type: ExemplarValueType.Float32,
    desc: "Percent amount to decelerate scrolling speed per GZPaint tick.",
  },
  0xca383ca3: {
    id: 0xca383ca3,
    name: "IntelliScrollOuterRadiusPixels",
    type: ExemplarValueType.UInt32,
    desc: "When right-click scrolling, this is the number of pixels away from the anchor at which the scrolling speed maxes out.",
  },
  0xca383ca4: {
    id: 0xca383ca4,
    name: "IntelliScrollInnerRadiusPixels",
    type: ExemplarValueType.UInt32,
    desc: "When right-click scrolling, this is the number of pixels away from the anchor that the user must move before scrolling begins.",
  },
  0xca383ca5: {
    id: 0xca383ca5,
    name: "HullHorizontal",
    type: ExemplarValueType.UInt32,
    desc: "Horizontal scroll hull edge in pixels.",
  },
  0xca383ca6: {
    id: 0xca383ca6,
    name: "HullVertical",
    type: ExemplarValueType.UInt32,
    desc: "Vertical scroll hull edge in pixels.",
  },
  0xca383ca7: {
    id: 0xca383ca7,
    name: "ScrollGradient",
    type: ExemplarValueType.Float32,
    desc: "# of pixels per speed increase (higher is slower).",
  },
  0xca383ca8: {
    id: 0xca383ca8,
    name: "WaterErosionIterations",
    type: ExemplarValueType.UInt32,
    desc: "Auto gen region: water erosion steps.",
  },
  0xca383ca9: {
    id: 0xca383ca9,
    name: "FlowStepsForWaterErosion",
    type: ExemplarValueType.UInt32,
    desc: "Auto gen region: water erosion flow steps.",
  },
  0xca383caa: {
    id: 0xca383caa,
    name: "SmoothingStepsForWindErosion",
    type: ExemplarValueType.UInt32,
    desc: "Auto gen region: wind erosion steps.",
  },
  0xca383cab: {
    id: 0xca383cab,
    name: "RegionUI: Grid colour",
    type: ExemplarValueType.UInt32,
    desc: "Colour of regional grid, in 0xRRGGBB form.",
  },
  0xca383cac: {
    id: 0xca383cac,
    name: "RegionUI: Highlight",
    type: ExemplarValueType.UInt32,
    desc: "Colour of regional highlight, in 0xRRGGBB form.",
  },
  0xca383cad: {
    id: 0xca383cad,
    name: "RegionUI: Plains map level",
    type: ExemplarValueType.UInt8,
    desc: "Height map fill value for new cities in plains regions (0-255).",
  },
  0xca383cae: {
    id: 0xca383cae,
    name: "RegionUI: Water map level",
    type: ExemplarValueType.UInt8,
    desc: "Height map fill value for new cities in water regions (0-255).",
  },
  0xca383cb1: {
    id: 0xca383cb1,
    name: "RegionUI: Cloud opacity range",
    type: ExemplarValueType.UInt8,
    desc: "Range of opacity values for clouds (min,max; 0-255).",
  },
  0xca4132e9: {
    id: 0xca4132e9,
    name: "Audio:Density2FreshPlayCurve",
    type: ExemplarValueType.Float32,
    desc: "Density to freshness play percentage curve",
  },
  0xca416ab5: {
    id: 0xca416ab5,
    name: "Item Description Key",
    type: ExemplarValueType.UInt32,
    desc: "Resource key of the string resource of the description. References a Text based file by TGI",
  },
  0xca416b2a: {
    id: 0xca416b2a,
    name: "Description Key",
    type: ExemplarValueType.UInt32,
    desc: "Resource key of ordinance description. References a Text based file by TGI",
  },
  0xca416b3f: {
    id: 0xca416b3f,
    name: "My Sim: Name Resource key",
    type: ExemplarValueType.UInt32,
    desc: "My sim default name resource key. References a Text based file by TGI",
  },
  0xca46931f: {
    id: 0xca46931f,
    name: "MinTermToSustainSellDealCost",
    type: ExemplarValueType.Float32,
    desc: "Min term, in Months, required for the neighbour to be able to sustain sell deal cost",
  },
  0xca469346: {
    id: 0xca469346,
    name: "MaxDealProfitFactor",
    type: ExemplarValueType.Float32,
    desc: "Max deal profit factor (1 + MinDealProfitFactor)",
  },
  0xca480830: {
    id: 0xca480830,
    name: "Efficiency Distress Threshold",
    type: ExemplarValueType.Float32,
    desc: "Efficiency value under which the lot begins to distress",
  },
  0xca51189a: {
    id: 0xca51189a,
    name: "Freight Truck Density Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps city population to a multiplier (0.0-1.0) for freight truck density",
  },
  0xca511de6: {
    id: 0xca511de6,
    name: "Max Commute Trains Per Second",
    type: ExemplarValueType.Float32,
    desc: "Max number of commute trains to cross a tile per second",
  },
  0xca511df2: {
    id: 0xca511df2,
    name: "Max Freight Trucks Per Second",
    type: ExemplarValueType.Float32,
    desc: "Max number of freight trucks to cross a tile per second",
  },
  0xca5545ea: {
    id: 0xca5545ea,
    name: "Vehicle Blur Speed KPH",
    type: ExemplarValueType.UInt32,
    desc: "Speed in KPH at which vehicles will draw motion blur effect.",
  },
  0xca5b9305: {
    id: 0xca5b9305,
    name: "Mayor Rating Effect",
    type: ExemplarValueType.SInt32,
    desc: "Mayor rating effect: magnitude, radius",
  },
  0xca5b9306: {
    id: 0xca5b9306,
    name: "Crime Effect",
    type: ExemplarValueType.UInt8,
    desc: "Crime effect: magnitude, radius. Doesn't increase overall crime, but can negate effects of police stations",
  },
  0xca5f7821: {
    id: 0xca5f7821,
    name: "Transit Switch Entry Cost vs. Budget",
    type: ExemplarValueType.Float32,
    desc: "Maps the budget percent (0-100) to a multiplier on the time cost of using a transit switch",
  },
  0xca7138c4: {
    id: 0xca7138c4,
    name: "Funding percentage to pipe decay/repair",
    type: ExemplarValueType.Float32,
    desc: "Converts a funding level (percentage) into a decay rate (negative numbers) or repair rate (positive numbers)",
  },
  0xca7515cc: {
    id: 0xca7515cc,
    name: "PropStartingDate",
    type: ExemplarValueType.UInt8,
    desc: "First value is Simulator MONTH (1-12): Second value is Simulator DAY (1-31): for when props/effects start their interval",
  },
  0xca76013b: {
    id: 0xca76013b,
    name: "Trip Length to Minutes Display Multiplier",
    type: ExemplarValueType.Float32,
    desc: "Multiply the trip length map values (0-255, 255 = Max Commute Time) by this value to get a time in minutes for display purposes",
  },
  0xca81b8d4: {
    id: 0xca81b8d4,
    name: "Pattern Size",
    type: ExemplarValueType.UInt8,
    desc: "Min:0x03, Max:0x04",
  },
  0xca821b8c: {
    id: 0xca821b8c,
    name: "Zoom Level",
    type: ExemplarValueType.UInt8,
    desc: "Specifies the GO TO Camera Zoom level to use for this disaster",
  },
  0xcaa9ab92: {
    id: 0xcaa9ab92,
    name: "Hover Query Only",
    type: ExemplarValueType.Bool,
    desc: "If present, the occupant will respond to hover queries but not to click-queries",
  },
  0xcab1ce3a: {
    id: 0xcab1ce3a,
    name: "Subjective Factor Threshold (Min value)",
    type: ExemplarValueType.SInt32,
    desc: "Min value of desirability for subjective factors (Pollution:Garbage:School:Hospital:Crime:Traffic:Triplength).",
  },
  0xcab1ce3c: {
    id: 0xcab1ce3c,
    name: "Subjective Factor Threshold (Max value)",
    type: ExemplarValueType.SInt32,
    desc: "Max value of desirability for subjective factors (Pollution:Garbage:School:Hospital:Crime:Traffic:Triplength).",
  },
  0xcad64136: {
    id: 0xcad64136,
    name: "Trip Starting Cost by travel type for Car Pref",
    type: ExemplarValueType.Float32,
    desc: "Starting overhead cost in time for each travel type for car preferred trips",
  },
  0xcadb6b3e: {
    id: 0xcadb6b3e,
    name: "Riot: MaxInstances",
    type: ExemplarValueType.UInt32,
    desc: "Maximum number of simultaneous riot instances",
  },
  0xcba5895b: {
    id: 0xcba5895b,
    name: "Spawn/Recall: Streets",
    type: ExemplarValueType.Float32,
    desc: "A x% (0.0-1.0) chance of adding/removing automaton to/from a tile when actual auto count is y% (0.0-1.0) lower/higher than desired.",
  },
  0xcba5895c: {
    id: 0xcba5895c,
    name: "Spawn/Recall: Roads",
    type: ExemplarValueType.Float32,
    desc: "A x% (0.0-1.0) chance of adding/removing automaton to/from a tile when actual auto count is y% (0.0-1.0) lower/higher than desired.",
  },
  0xcba5895d: {
    id: 0xcba5895d,
    name: "Spawn/Recall: Avenues",
    type: ExemplarValueType.Float32,
    desc: "A x% (0.0-1.0) chance of adding/removing automaton to/from a tile when actual auto count is y% (0.0-1.0) lower/higher than desired.",
  },
  0xcba5895e: {
    id: 0xcba5895e,
    name: "Spawn/Recall: Highway",
    type: ExemplarValueType.Float32,
    desc: "A x% (0.0-1.0) chance of adding/removing automaton to/from a tile when actual auto count is y% (0.0-1.0) lower/higher than desired.",
  },
  0xcba5895f: {
    id: 0xcba5895f,
    name: "Spawn/Recall: Rail",
    type: ExemplarValueType.Float32,
    desc: "a% (0.0-1.0) chance of adding/removing automaton to/from a tile when actual auto count is b% (0.0-1.0) lower/higher than desired.",
  },
  0xcba58a5b: {
    id: 0xcba58a5b,
    name: "Congestion to CPS: Streets",
    type: ExemplarValueType.Float32,
    desc: "Response curve of congestion vs. expected automata per second on a tile",
  },
  0xcba58a5c: {
    id: 0xcba58a5c,
    name: "Congestion to CPS: Roads",
    type: ExemplarValueType.Float32,
    desc: "Response curve of congestion vs. expected automata per second on a tile",
  },
  0xcba58a5d: {
    id: 0xcba58a5d,
    name: "Congestion to CPS: Avenues",
    type: ExemplarValueType.Float32,
    desc: "Response curve of congestion vs. expected automata per second on a tile",
  },
  0xcba58a5e: {
    id: 0xcba58a5e,
    name: "Congestion to CPS: Highway",
    type: ExemplarValueType.Float32,
    desc: "Response curve of congestion vs. expected automata per second on a tile",
  },
  0xcba58a5f: {
    id: 0xcba58a5f,
    name: "Congestion to CPS: Rail",
    type: ExemplarValueType.Float32,
    desc: "Response curve of congestion vs. expected automata per second on a tile",
  },
  0xcbbba52f: {
    id: 0xcbbba52f,
    name: "Sound Bank ID",
    type: ExemplarValueType.UInt32,
    desc: "References an .abk file with player-drive sounds",
  },
  0xcbfb03fa: {
    id: 0xcbfb03fa,
    name: "Audio:AEMSMaxVolume",
    type: ExemplarValueType.Float32,
    desc: "Max volume for AEMS systems",
  },
  0xcbfb03ff: {
    id: 0xcbfb03ff,
    name: "Audio:AEMSMasterFxLevel",
    type: ExemplarValueType.Float32,
    desc: "Master FX level",
  },
  0xcc0b0705: {
    id: 0xcc0b0705,
    name: "Police Station: Total Copter Dispatches",
    type: ExemplarValueType.SInt32,
    desc: "Number of police helicopters this station can send",
  },
  0xcc101142: {
    id: 0xcc101142,
    name: "Playerdrive Vehicles Per Second",
    type: ExemplarValueType.Float32,
    desc: "Desired # of vehicles per second that will be generated on roads during player-drive",
  },
  0xcc21420d: {
    id: 0xcc21420d,
    name: "Auto-load Auxiliary Models",
    type: ExemplarValueType.UInt32,
    desc: "Index (1,2,3,etc.) of auxiliary model to load automatically on Init",
  },
  0xcc3a1723: {
    id: 0xcc3a1723,
    name: "UDIProp:SeaportBoat0",
    type: ExemplarValueType.UInt8,
    desc: "Property is a key that controls what particular kind of Prop should appear. Some UDIProp Keys are tied in directly with UDI missions",
  },
  0xcc3e4755: {
    id: 0xcc3e4755,
    name: "FlipsAllowed",
    type: ExemplarValueType.UInt8,
    desc: "Controls what Flipping/Mirroring is allowed for the item. True,False,Both",
  },
  0xe82b68eb: {
    id: 0xe82b68eb,
    name: "PropType",
    type: ExemplarValueType.UInt32,
    desc: "If assigned to an occupant, this property denotes it as a prop. Must use a valid prop ID as a property value. See PropOccupant",
  },
  0xe83a081d: {
    id: 0xe83a081d,
    name: "BuildingModelRotation",
    type: ExemplarValueType.Bool,
    desc: "If property is present (regardless of value), then the model can be rotated and contains 'full geometry'.",
  },
  0xe8ec2720: {
    id: 0xe8ec2720,
    name: "Crime Update Period",
    type: ExemplarValueType.UInt32,
    desc: "How often the Crime simulator updates, in days",
  },
  0xe8ec2721: {
    id: 0xe8ec2721,
    name: "Crime Police Factor",
    type: ExemplarValueType.Float32,
    desc: "Crime Police Factor",
  },
  0xe8f79c8b: {
    id: 0xe8f79c8b,
    name: "Effect: Water",
    type: ExemplarValueType.Float32,
    desc: "Effect (multiplier) this ordinance has on water pollution",
  },
  0xe8f79c90: {
    id: 0xe8f79c90,
    name: "Effect: Garbage",
    type: ExemplarValueType.Float32,
    desc: "Effect (multiplier) this ordinance has on garbage",
  },
  0xe900ea24: {
    id: 0xe900ea24,
    name: "MaxCellAltitudeDeltaForFlatness",
    type: ExemplarValueType.Float32,
    desc: "MaxCellAltitudeDeltaForFlatness",
  },
  0xe900ea25: {
    id: 0xe900ea25,
    name: "MaxSlopeForFlatness",
    type: ExemplarValueType.Float32,
    desc: "MaxSlopeForFlatness",
  },
  0xe900ea26: {
    id: 0xe900ea26,
    name: "DefaultLotFoundationType",
    type: ExemplarValueType.UInt32,
    desc: "DefaultLotFoundationTypeProperty",
  },
  0xe900ea27: {
    id: 0xe900ea27,
    name: "ShouldAttemptLotLevelling",
    type: ExemplarValueType.UInt32,
    desc: "ShouldAttemptLotLevellingProperty",
  },
  0xe900ea28: {
    id: 0xe900ea28,
    name: "ShouldAttemptInternalLotLevelling",
    type: ExemplarValueType.UInt32,
    desc: "ShouldAttemptInternalLotLevellingProperty",
  },
  0xe900ea29: {
    id: 0xe900ea29,
    name: "LotAutoLevelInternalAltitudeDelta",
    type: ExemplarValueType.Float32,
    desc: "LotAutoLevelInternalAltitudeDeltaProperty",
  },
  0xe900ea2a: {
    id: 0xe900ea2a,
    name: "MaxAreaSlopeAllowedForLevelling",
    type: ExemplarValueType.Float32,
    desc: "MaxAreaSlopeAllowedForLevellingProperty",
  },
  0xe900ea2b: {
    id: 0xe900ea2b,
    name: "Lot Developer: Night Update Interval",
    type: ExemplarValueType.UInt32,
    desc: "Update interval in milliseconds for toggling building lights.",
  },
  0xe900ea2c: {
    id: 0xe900ea2c,
    name: "Lot Developer: Night Update Count",
    type: ExemplarValueType.UInt32,
    desc: "Number of buildings to toggle lights on per update interval (integer).",
  },
  0xe90e25a1: {
    id: 0xe90e25a1,
    name: "Transit Switch Point",
    type: ExemplarValueType.UInt8,
    desc: "Paired entries indicating this building allows a travelling Sim to switch between transit types",
  },
  0xe90e25a2: {
    id: 0xe90e25a2,
    name: "Transit Switch Entry Cost",
    type: ExemplarValueType.Float32,
    desc: "Step cost to enter this transit switch",
  },
  0xe90e25a3: {
    id: 0xe90e25a3,
    name: "Transit Switch Traffic Capacity",
    type: ExemplarValueType.Float32,
    desc: "Amount of traffic the switch can handle without increasing travel time",
  },
  0xe90f5de4: {
    id: 0xe90f5de4,
    name: "IntelliScrollInnerRadiusPixels",
    type: ExemplarValueType.UInt32,
    desc: "When right-click scrolling, this is the number of pixels away from the anchor that the user must move before scrolling begins.",
  },
  0xe911e2d1: {
    id: 0xe911e2d1,
    name: "Power max allowed funding",
    type: ExemplarValueType.Float32,
    desc: "Maximum allowed funding percentage for utilities",
  },
  0xe911e2fc: {
    id: 0xe911e2fc,
    name: "Power plant max production ratio",
    type: ExemplarValueType.Float32,
    desc: "Maximum allowed percentage for power plant production",
  },
  0xe918946f: {
    id: 0xe918946f,
    name: "(OBS) Health Min Acceptable Funding %",
    type: ExemplarValueType.Float32,
    desc: "Minimum acceptable percentage for Health department funding",
  },
  0xe91894b3: {
    id: 0xe91894b3,
    name: "School Strike Efficiency %",
    type: ExemplarValueType.Float32,
    desc: "Efficiency of School buildings will drop to this % during a strike",
  },
  0xe918c920: {
    id: 0xe918c920,
    name: "Budget: TaxMultiplier_R$$",
    type: ExemplarValueType.Float32,
    desc: "Multiplier to tweak the relative weighting of the R$$ occupant type's taxes",
  },
  0xe91a0b5f: {
    id: 0xe91a0b5f,
    name: "Building value",
    type: ExemplarValueType.SInt64,
    desc: "Base value in Simoleons of this building",
  },
  0xe91b3aee: {
    id: 0xe91b3aee,
    name: "Health Quotient Boost Effect",
    type: ExemplarValueType.Float32,
    desc: "Percentage (from 0 to 200%) by which this ordinance affects all HQ values",
  },
  0xe921a936: {
    id: 0xe921a936,
    name: "School Population vs. Distance",
    type: ExemplarValueType.Float32,
    desc: "Maps distance from school to a % of population covered",
  },
  0xe92d9db4: {
    id: 0xe92d9db4,
    name: "Health Effectiveness vs. Average Age Effect",
    type: ExemplarValueType.Float32,
    desc: "Maps average age of a tract to add ional HQ boost %",
  },
  0xe94825b2: {
    id: 0xe94825b2,
    name: "ZoneMinCellSize",
    type: ExemplarValueType.SInt32,
    desc: "Dezone, LDR, MDR, HDR, LDC, MDC, HDC, IAG, MDI, HDI, ?, ?, ?, ?, Landfill, ?.",
  },
  0xe94825b3: {
    id: 0xe94825b3,
    name: "ZoneMaxCellSize",
    type: ExemplarValueType.SInt32,
    desc: "Dezone, LDR, MDR, HDR, LDC, MDC, HDC, IAG, MDI, HDI, ?, ?, ?, ?, Landfill, ?.",
  },
  0xe94825b4: {
    id: 0xe94825b4,
    name: "ZoneCost",
    type: ExemplarValueType.SInt64,
    desc: "Dezone, LDR, MDR, HDR, LDC, MDC, HDC, IAG, MDI, HDI, ?, ?, ?, ?, Landfill, ?.",
  },
  0xe94825b5: {
    id: 0xe94825b5,
    name: "ZoneDestructionCost",
    type: ExemplarValueType.SInt64,
    desc: "Dezone, LDR, MDR, HDR, LDC, MDC, HDC, IAG, MDI, HDI, ?, ?, ?, ?, Landfill, ?.",
  },
  0xe94825b6: {
    id: 0xe94825b6,
    name: "ZoneTextureResourceInstanceArray",
    type: ExemplarValueType.UInt32,
    desc: "ZoneTextureResourceInstanceArray",
  },
  0xe94825b7: {
    id: 0xe94825b7,
    name: "Zone Display Alpha",
    type: ExemplarValueType.UInt8,
    desc: "Replaces drag colour alpha after zone placement",
  },
  0xe94825b8: {
    id: 0xe94825b8,
    name: "Zone Drag Colour",
    type: ExemplarValueType.UInt32,
    desc: "RGBA colour to blend with black and white texture NRRRCCCIIIMASSLP",
  },
  0xe94825b9: {
    id: 0xe94825b9,
    name: "Zone Max Slope",
    type: ExemplarValueType.Float32,
    desc: "Meters per cell must be less than this value NRRRCCCIIIMASSLP",
  },
  0xe974eaa1: {
    id: 0xe974eaa1,
    name: "NetworkTextureID",
    type: ExemplarValueType.UInt32,
    desc: "ID of the network texture for which it is OK to have pylon/retaining wall",
  },
  0xe974eaa2: {
    id: 0xe974eaa2,
    name: "ConnectedVerts",
    type: ExemplarValueType.UInt32,
    desc: "Pairs of cell vertices connected by retaining walls / side flaps",
  },
  0xe974eaa3: {
    id: 0xe974eaa3,
    name: "PylonCornerXZs",
    type: ExemplarValueType.Float32,
    desc: "(x,z) corresponding to the 4 corners of the pylon w.r.t cell centre",
  },
  0xe974eaa4: {
    id: 0xe974eaa4,
    name: "TunnelResourceID",
    type: ExemplarValueType.UInt32,
    desc: "Model Resource ID(s) for tunnel piece(s). ",
  },
  0xe974eaa5: {
    id: 0xe974eaa5,
    name: "TunnelModelRotations",
    type: ExemplarValueType.UInt32,
    desc: "Tunnel model rotations",
  },
  0xe974eaa6: {
    id: 0xe974eaa6,
    name: "TunnelModelHeights",
    type: ExemplarValueType.Float32,
    desc: "Tunnel piece model heights",
  },
  0xe974eaa7: {
    id: 0xe974eaa7,
    name: "PylonSupportID",
    type: ExemplarValueType.UInt32,
    desc: "Pylon Model Exemplar Instance used by some networks (can be single instance or one per zoom)",
  },
  0xe97f42b0: {
    id: 0xe97f42b0,
    name: "Watered Building Colour",
    type: ExemplarValueType.UInt8,
    desc: "RGBA colour for watered buildings in pipe view",
  },
  0xe9822d62: {
    id: 0xe9822d62,
    name: "BuildingNoModelProperty",
    type: ExemplarValueType.Bool,
    desc: "If present, then there are no building-style models for this building and if there are any, they should be ignored.",
  },
  0xe99b068c: {
    id: 0xe99b068c,
    name: "LotConfigPropertyMaxSlopeAllowed",
    type: ExemplarValueType.Float32,
    desc: "The Max slope this lot will develop on",
  },
  0xe99b068d: {
    id: 0xe99b068d,
    name: "LotConfigPropertyDoConstruction",
    type: ExemplarValueType.UInt8,
    desc: "If non-zero, buildings on the lot will construct, otherwise they will be fully constructed when plopped",
  },
  0xe9a18d3f: {
    id: 0xe9a18d3f,
    name: "Power line:Horizontal Control",
    type: ExemplarValueType.Float32,
    desc: "Controls the Max horizontal distance from the centre of the line at which the control points are placed",
  },
  0xe9a1e8d4: {
    id: 0xe9a1e8d4,
    name: "Power line:Vertical Control",
    type: ExemplarValueType.Float32,
    desc: "Controls the Percent% of line length at which to place control points, vertically",
  },
  0xe9a316eb: {
    id: 0xe9a316eb,
    name: "Prop Wealth",
    type: ExemplarValueType.UInt8,
    desc: "What wealth level this prop will appear at",
  },
  0xe9ac43e7: {
    id: 0xe9ac43e7,
    name: "Power line: Scaling factor",
    type: ExemplarValueType.Float32,
    desc: "Array of scaling factors for the width of the power lines, one per zoom level.",
  },
  0xe9aee3da: {
    id: 0xe9aee3da,
    name: "Response vehicle type",
    type: ExemplarValueType.UInt32,
    desc: "Group(s) of vehicle automata that will be created when this building is constructed or plopped.",
  },
  0xe9aee3db: {
    id: 0xe9aee3db,
    name: "Response vehicle count",
    type: ExemplarValueType.UInt8,
    desc: "How many of each type (in Response Vehicle Type property) will be created when building is constructed or plopped.",
  },
  0xe9aee3dc: {
    id: 0xe9aee3dc,
    name: "Response pedestrian type",
    type: ExemplarValueType.UInt32,
    desc: "Group(s) of pedestrian automata that will be created when this building is constructed or plopped.",
  },
  0xe9aee3dd: {
    id: 0xe9aee3dd,
    name: "Response pedestrian count",
    type: ExemplarValueType.UInt8,
    desc: "How many of each type (in Response Pedestrian Type property) will be created when building is constructed or plopped.",
  },
  0xe9d117c3: {
    id: 0xe9d117c3,
    name: "Special case only",
    type: ExemplarValueType.Bool,
    desc: "If set, occupant is never chosen based on user action or normal simulation.",
  },
  0xe9f0fa86: {
    id: 0xe9f0fa86,
    name: "Self-illuminated",
    type: ExemplarValueType.Bool,
    desc: "If set to true, specifies that the prop should be treated as self-lit",
  },
  0xea023270: {
    id: 0xea023270,
    name: "Aura:Park Effect",
    type: ExemplarValueType.Float32,
    desc: "Maps grid data to aura effect",
  },
  0xea023271: {
    id: 0xea023271,
    name: "Aura:Pollution Effect:Air",
    type: ExemplarValueType.Float32,
    desc: "Maps grid data to aura effect",
  },
  0xea023272: {
    id: 0xea023272,
    name: "Aura:Pollution Effect:Water",
    type: ExemplarValueType.Float32,
    desc: "Maps grid data to aura effect",
  },
  0xea023273: {
    id: 0xea023273,
    name: "Aura:Pollution Effect:Garbage",
    type: ExemplarValueType.Float32,
    desc: "Maps grid data to aura effect",
  },
  0xea023274: {
    id: 0xea023274,
    name: "Aura:Pollution Effect:Radiation",
    type: ExemplarValueType.Float32,
    desc: "Maps grid data to aura effect",
  },
  0xea023275: {
    id: 0xea023275,
    name: "Aura:School Effect",
    type: ExemplarValueType.Float32,
    desc: "Maps grid data to aura effect",
  },
  0xea023276: {
    id: 0xea023276,
    name: "Aura:Hospital Effect",
    type: ExemplarValueType.Float32,
    desc: "Maps grid data to aura effect",
  },
  0xea023277: {
    id: 0xea023277,
    name: "Aura:Crime Effect",
    type: ExemplarValueType.Float32,
    desc: "Maps grid data to aura effect",
  },
  0xea023278: {
    id: 0xea023278,
    name: "Aura:Trip Length",
    type: ExemplarValueType.Float32,
    desc: "Maps grid data to aura effect",
  },
  0xea023279: {
    id: 0xea023279,
    name: "Aura:Traffic",
    type: ExemplarValueType.Float32,
    desc: "Maps grid data to aura effect",
  },
  0xea02327a: {
    id: 0xea02327a,
    name: "Aura:Long Term Decay Factor",
    type: ExemplarValueType.Float32,
    desc: "(1.0 means no decay, 0.0 means full decay (no smoothing)",
  },
  0xea02327b: {
    id: 0xea02327b,
    name: "Aura:Short Term Decay Factor",
    type: ExemplarValueType.Float32,
    desc: "(1.0 means no decay, 0.0 means full decay (no smoothing)",
  },
  0xea02327c: {
    id: 0xea02327c,
    name: "Aura:Base Aura (Low)",
    type: ExemplarValueType.SInt32,
    desc: "Base aura for R$,Cs$,Id occupancy",
  },
  0xea02327d: {
    id: 0xea02327d,
    name: "Aura:Base Aura (Med)",
    type: ExemplarValueType.SInt32,
    desc: "Base aura for R$$,Cs$$,Co$$,Ir,Im occupancy",
  },
  0xea02327e: {
    id: 0xea02327e,
    name: "Aura:Base Aura (High)",
    type: ExemplarValueType.SInt32,
    desc: "Base aura for R$$$,Cs$$$,Co$$$ occupancy",
  },
  0xea02327f: {
    id: 0xea02327f,
    name: "Aura:Tax Rate Change Effect",
    type: ExemplarValueType.Float32,
    desc: "Maps tax rate change (in percent) to aura effect",
  },
  0xea023280: {
    id: 0xea023280,
    name: "Aura:Value/Wealth Effect",
    type: ExemplarValueType.Float32,
    desc: "Maps (value_type-wealth_type) to aura effect",
  },
  0xea023290: {
    id: 0xea023290,
    name: "Aura:Transient Effect:Fire",
    type: ExemplarValueType.Float32,
    desc: "magnitude and radius in meters of transient aura effect",
  },
  0xea023291: {
    id: 0xea023291,
    name: "Aura:Transient Effect:Flora",
    type: ExemplarValueType.Float32,
    desc: "magnitude and radius in meters of transient aura effect",
  },
  0xea023292: {
    id: 0xea023292,
    name: "Aura:Transient Effect:Civic Plop",
    type: ExemplarValueType.Float32,
    desc: "magnitude and radius in meters of transient aura effect",
  },
  0xea023293: {
    id: 0xea023293,
    name: "Aura:Transient Effect:Network Plop",
    type: ExemplarValueType.Float32,
    desc: "magnitude and radius in meters of transient aura effect",
  },
  0xea0232a0: {
    id: 0xea0232a0,
    name: "Aura:Hotspot Settings",
    type: ExemplarValueType.SInt32,
    desc: "hotspot settings: threshold value (0-255), radius (in tracts), minimum weight",
  },
  0xea0232a1: {
    id: 0xea0232a1,
    name: "Aura:Hotspot Riot Probability",
    type: ExemplarValueType.Float32,
    desc: "maps hotspot weight (# of cells above threshold) to month y fire probability (in percent 0-100)",
  },
  0xea123cef: {
    id: 0xea123cef,
    name: "BuildingModelClass",
    type: ExemplarValueType.UInt32,
    desc: "If present, specifies a GZCLSID (class ID) for the model class to use. Otherwise, just use the default GZCLSID_S3DModelInstance.",
  },
  0xea1cf220: {
    id: 0xea1cf220,
    name: "Age degradation rate",
    type: ExemplarValueType.Float32,
    desc: "How fast this plant degrades over time",
  },
  0xea1cf221: {
    id: 0xea1cf221,
    name: "Soft failure threshold",
    type: ExemplarValueType.Float32,
    desc: "Threshold at which soft failure occurs",
  },
  0xea1cf222: {
    id: 0xea1cf222,
    name: "Hard failure threshold",
    type: ExemplarValueType.Float32,
    desc: "Threshold at which hard failure occurs",
  },
  0xea1e3c53: {
    id: 0xea1e3c53,
    name: "Water building pumping cost",
    type: ExemplarValueType.Float32,
    desc: "Cost to produce one unit of water, not including infrastructure maintenance",
  },
  0xea260589: {
    id: 0xea260589,
    name: "Lot Resource Key",
    type: ExemplarValueType.UInt32,
    desc: "For ploppable buildings: Resource instance ID of lot exemplar for this building",
  },
  0xea296f8d: {
    id: 0xea296f8d,
    name: "My Sim: Icon",
    type: ExemplarValueType.UInt32,
    desc: "Specifies ID for the Icon in Select-A-My-Sim dialog.",
  },
  0xea296f8f: {
    id: 0xea296f8f,
    name: "My Sim: Default name",
    type: ExemplarValueType.String,
    desc: "Specifies default name for My Sim.",
  },
  0xea296f90: {
    id: 0xea296f90,
    name: "My Sim: Zodiac Sign",
    type: ExemplarValueType.UInt8,
    desc: "Specifies default zodiac sign for My Sim.",
  },
  0xea296f91: {
    id: 0xea296f91,
    name: "My Sim: Is Male",
    type: ExemplarValueType.Bool,
    desc: "Specifies the gender of the My Sim (true=male, false=female)",
  },
  0xea2e078b: {
    id: 0xea2e078b,
    name: "City Exclusion Group",
    type: ExemplarValueType.UInt32,
    desc: "For ploppable buildings: No more than one building within the specified group can be built in a single city.",
  },
  0xea3209f8: {
    id: 0xea3209f8,
    name: "Conditional Building",
    type: ExemplarValueType.Bool,
    desc: "If true, building will appear ghosted in the menu until triggered by a script condition",
  },
  0xea3209f9: {
    id: 0xea3209f9,
    name: "No Shadows",
    type: ExemplarValueType.Bool,
    desc: "If true, building will not draw shadows",
  },
  0xea33d694: {
    id: 0xea33d694,
    name: "SubmenuKey: Terraform: GougeValleys Menu",
    type: ExemplarValueType.UInt32,
    desc: "Controls which menu the tool belongs in. Some tools are attached to the menu that they're in.",
  },
  0xea346888: {
    id: 0xea346888,
    name: "WaterFlora",
    type: ExemplarValueType.Bool,
    desc: "If this property is present, then the given flora is a water flora and its elevation preference table entries are interpreted as depth below sea level instead of altitude above sea level",
  },
  0xea3573af: {
    id: 0xea3573af,
    name: "MiniMap: Terrain ramp",
    type: ExemplarValueType.UInt32,
    desc: "Colour progression to use for terrain.",
  },
  0xea3fbdd7: {
    id: 0xea3fbdd7,
    name: "Audio:FreshScoreKey",
    type: ExemplarValueType.UInt32,
    desc: "Freshness score key without the class id",
  },
  0xea3fc42a: {
    id: 0xea3fc42a,
    name: "Audio:LoopVolume",
    type: ExemplarValueType.UInt32,
    desc: "Loop Volume",
  },
  0xea400620: {
    id: 0xea400620,
    name: "Riot:NumStages",
    type: ExemplarValueType.UInt32,
    desc: "Total number of stages",
  },
  0xea400621: {
    id: 0xea400621,
    name: "Riot:SecondsBetweenStages",
    type: ExemplarValueType.UInt32,
    desc: "Number of seconds per stage",
  },
  0xea400622: {
    id: 0xea400622,
    name: "Riot:Controller2Stage",
    type: ExemplarValueType.UInt32,
    desc: "Stage at which second controller gets added",
  },
  0xea400623: {
    id: 0xea400623,
    name: "Riot:SpawnArray",
    type: ExemplarValueType.UInt32,
    desc: "Array of number of new leaders to spawn at each stage",
  },
  0xea400624: {
    id: 0xea400624,
    name: "Riot:Protection-vs-Suppression",
    type: ExemplarValueType.Float32,
    desc: "Maps Police Protection value (0-255) to Riot Suppression( 0=none, 1=riot progression halted, 2+=riot regresses",
  },
  0xea4025a9: {
    id: 0xea4025a9,
    name: "Water Department Max Funding",
    type: ExemplarValueType.Float32,
    desc: "Max funding percentage for the water department",
  },
  0xea441c97: {
    id: 0xea441c97,
    name: "Freight Train Length",
    type: ExemplarValueType.UInt8,
    desc: "Min/max length in cars, including engine, of freight trains",
  },
  0xea46932c: {
    id: 0xea46932c,
    name: "MinDealAmountPower",
    type: ExemplarValueType.Float32,
    desc: "Min deal amount for power deal",
  },
  0xea46934f: {
    id: 0xea46934f,
    name: "MaxDealTerm",
    type: ExemplarValueType.Float32,
    desc: "Max term, in Years, a deal can be had before renewal.",
  },
  0xea4a7c55: {
    id: 0xea4a7c55,
    name: "Audio:ZoomDistanceCameraPull",
    type: ExemplarValueType.Float32,
    desc: "Amount of horizontal dist to camera to pull to camera",
  },
  0xea4ad2ff: {
    id: 0xea4ad2ff,
    name: "MaxOverDemandFactorForBuyer",
    type: ExemplarValueType.Float32,
    desc: "buyer_demand * MaxOverDemandFactorForBuyer is the maximum amount the buyer can buy.",
  },
  0xea4ae9ef: {
    id: 0xea4ae9ef,
    name: "MinBudgetForBuyDeals",
    type: ExemplarValueType.Float32,
    desc: "Budget level below which new buy deals become prohibited.",
  },
  0xea4aedc6: {
    id: 0xea4aedc6,
    name: "Graph Minimum value",
    type: ExemplarValueType.Float32,
    desc: "Overrides the automatic minimum value for the Graph.",
  },
  0xea4bc6e4: {
    id: 0xea4bc6e4,
    name: "VolcanoLavaCurveProductionRate",
    type: ExemplarValueType.Float32,
    desc: "Production Rate for the Flow of VolcanoLava (Input Time in Fraction from [0, 1])",
  },
  0xea511de0: {
    id: 0xea511de0,
    name: "Max Freight Trains Per Second",
    type: ExemplarValueType.Float32,
    desc: "Max number of freight trains to cross a tile per second",
  },
  0xea5393ed: {
    id: 0xea5393ed,
    name: "Requires power to animate",
    type: ExemplarValueType.Bool,
    desc: "Set this to true if the occupant requires power to animate",
  },
  0xea53b30f: {
    id: 0xea53b30f,
    name: "School Funding to Coverage Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps difference between actual % funding and % ideal funding to % coverage",
  },
  0xea540621: {
    id: 0xea540621,
    name: "Avg. Age to 1-10 Age Group",
    type: ExemplarValueType.Float32,
    desc: "How average age translates to the distribution of population into the 1-10 age group. Actual age, % in this age group",
  },
  0xea540622: {
    id: 0xea540622,
    name: "Avg. Age to 11-20 Age Group",
    type: ExemplarValueType.Float32,
    desc: "How average age translates to the distribution of population into the 11-20 age group. Actual age, % in this age group",
  },
  0xea540623: {
    id: 0xea540623,
    name: "Avg. Age to 21-30 Age Group",
    type: ExemplarValueType.Float32,
    desc: "How average age translates to the distribution of population into the 21-30 age group. Actual age, % in this age group",
  },
  0xea540624: {
    id: 0xea540624,
    name: "Avg. Age to 31-40 Age Group",
    type: ExemplarValueType.Float32,
    desc: "How average age translates to the distribution of population into the 31-40 age group. Actual age, % in this age group",
  },
  0xea540625: {
    id: 0xea540625,
    name: "Avg. Age to 41-50 Age Group",
    type: ExemplarValueType.Float32,
    desc: "How average age translates to the distribution of population into the 41-50 age group. Actual age, % in this age group",
  },
  0xea540626: {
    id: 0xea540626,
    name: "Avg. Age to 51-60 Age Group",
    type: ExemplarValueType.Float32,
    desc: "How average age translates to the distribution of population into the 51-60 age group. Actual age, % in this age group",
  },
  0xea540627: {
    id: 0xea540627,
    name: "Avg. Age to 61-70 Age Group",
    type: ExemplarValueType.Float32,
    desc: "How average age translates to the distribution of population into the 61-70 age group. Actual age, % in this age group",
  },
  0xea540628: {
    id: 0xea540628,
    name: "Avg. Age to 71-80 Age Group",
    type: ExemplarValueType.Float32,
    desc: "How average age translates to the distribution of population into the 71-80 age group. Actual age, % in this age group",
  },
  0xea540629: {
    id: 0xea540629,
    name: "Avg. Age to 81-90 Age Group",
    type: ExemplarValueType.Float32,
    desc: "How average age translates to the distribution of population into the 81-90 age group. Actual age, % in this age group",
  },
  0xea54d283: {
    id: 0xea54d283,
    name: "Budget Item: Department",
    type: ExemplarValueType.UInt32,
    desc: "GUID(s) of department ID for this budget item",
  },
  0xea54d284: {
    id: 0xea54d284,
    name: "Budget Item: Line",
    type: ExemplarValueType.UInt32,
    desc: "GUID(s) of line item ID for this budget item",
  },
  0xea54d285: {
    id: 0xea54d285,
    name: "Budget Item: Purpose",
    type: ExemplarValueType.UInt32,
    desc: "GUID(s) of purpose ID for this budget item",
  },
  0xea54d286: {
    id: 0xea54d286,
    name: "Budget Item: Cost",
    type: ExemplarValueType.SInt64,
    desc: "Cost(s) in Simoleons for this budget item",
  },
  0xea614f63: {
    id: 0xea614f63,
    name: "Jail:Jailbreak Response Curve",
    type: ExemplarValueType.Float32,
    desc: "Maps REAL jail capacity to jailbreak chance",
  },
  0xea614f64: {
    id: 0xea614f64,
    name: "Jail:Jailbreak Escapee Percentage",
    type: ExemplarValueType.Float32,
    desc: "Min/max percentage (0.0-100.0) of jail capacity that will escape during jailbreaks",
  },
  0xea614f65: {
    id: 0xea614f65,
    name: "Jail:End Jailbreak Capacity",
    type: ExemplarValueType.Float32,
    desc: "Stop any jailbreak in progress when real jail capacity percentage goes below this value",
  },
  0xea639fb1: {
    id: 0xea639fb1,
    name: "No highlight",
    type: ExemplarValueType.Float32,
  },
  0xea639fb2: {
    id: 0xea639fb2,
    name: "General OK",
    type: ExemplarValueType.Float32,
  },
  0xea639fb3: {
    id: 0xea639fb3,
    name: "General Not OK",
    type: ExemplarValueType.Float32,
  },
  0xea639fb4: {
    id: 0xea639fb4,
    name: "Create OK",
    type: ExemplarValueType.Float32,
  },
  0xea639fb5: {
    id: 0xea639fb5,
    name: "Create Not OK",
    type: ExemplarValueType.Float32,
  },
  0xea639fb6: {
    id: 0xea639fb6,
    name: "Destroy OK",
    type: ExemplarValueType.Float32,
  },
  0xea639fb7: {
    id: 0xea639fb7,
    name: "Destroy Not OK",
    type: ExemplarValueType.Float32,
  },
  0xea639fb8: {
    id: 0xea639fb8,
    name: "Query OK",
    type: ExemplarValueType.Float32,
  },
  0xea639fb9: {
    id: 0xea639fb9,
    name: "Query Not OK",
    type: ExemplarValueType.Float32,
  },
  0xea7b5f06: {
    id: 0xea7b5f06,
    name: "Max Mass Transit Strategy Trip Length",
    type: ExemplarValueType.Float32,
    desc: "Max time in raw trip length that the mass transit preferred strategy will go using mass transit",
  },
  0xea86e3b5: {
    id: 0xea86e3b5,
    name: "Simoleon Cost Per Tile to Demolish",
    type: ExemplarValueType.UInt32,
    desc: "Cost to demolish a tile of network using this tool",
  },
  0xea8c3cdb: {
    id: 0xea8c3cdb,
    name: "Trip Starting Cost by travel type for Mass Transit",
    type: ExemplarValueType.Float32,
    desc: "Starting overhead cost in time for each travel type for mass transit preferred trips",
  },
  0xea958845: {
    id: 0xea958845,
    name: "Animation Loop Count Range",
    type: ExemplarValueType.UInt8,
    desc: "For static (one-shot) Sims: How many times automaton will loop through its animation before fading out",
  },
  0xebfb0404: {
    id: 0xebfb0404,
    name: "Audio:AEMSMasterFxType",
    type: ExemplarValueType.UInt32,
    desc: "Effect type",
  },
  0xebfb4a0a: {
    id: 0xebfb4a0a,
    name: "Max CSIs",
    type: ExemplarValueType.UInt8,
    desc: "Maximum number of city-situation-indicators/UDI that will be visible.",
  },
  0xebfc5e26: {
    id: 0xebfc5e26,
    name: "My Sim Wealth Level",
    type: ExemplarValueType.UInt32,
    desc: "0=$, 1=$$, 2=$$$",
  },
  0xebfc5e5e: {
    id: 0xebfc5e5e,
    name: "My Sim Icon Image",
    type: ExemplarValueType.UInt32,
    desc: "Resource ID of the icon to be used in the choose vehicle dialog",
  },
  0xebfc5fba: {
    id: 0xebfc5fba,
    name: "My Sim Sort Order",
    type: ExemplarValueType.SInt32,
    desc: "Relative sort ordering in the catalo",
  },
  0xebff69e7: {
    id: 0xebff69e7,
    name: "Budget: Difficulty Tax Multiplier",
    type: ExemplarValueType.Float32,
    desc: "Multiplier for tax revenue by difficulty type. Easy:Medium:Hard",
  },
  0xec15654a: {
    id: 0xec15654a,
    name: "Mayor Limo Money Properties",
    type: ExemplarValueType.Float32,
    desc: "Cost per second, desirability radius meters, desirability magnitude",
  },
  0xec1832e7: {
    id: 0xec1832e7,
    name: "UDIProp:MarinaBoat7",
    type: ExemplarValueType.UInt8,
    desc: "Property is a key that controls what particular kind of Prop should appear. Some UDIProp Keys are tied in directly with UDI missions",
  },
  0xec1b2361: {
    id: 0xec1b2361,
    name: "UI Status Window",
    type: ExemplarValueType.UInt32,
    desc: "Property is referenced by Instance ID, and points to the User Interface file for the Status Window. The Status Window displays the Control Keys for each of the vehicles",
  },
  0xec214180: {
    id: 0xec214180,
    name: "Auxiliary Model 3 Key",
    type: ExemplarValueType.UInt32,
    desc: "Type/Group/Instance for additional model",
  },
  0xec39dd14: {
    id: 0xec39dd14,
    name: "UDIProp:FerryBoat0",
    type: ExemplarValueType.UInt8,
    desc: "Property is a key that controls what particular kind of Prop should appear. Some UDIProp Keys are tied in directly with UDI missions",
  },
  0xec3bd470: {
    id: 0xec3bd470,
    name: "RotationsAllowed",
    type: ExemplarValueType.UInt8,
    desc: "RotationsAllowed. North, South, East, West",
  },
  0xec43826b: {
    id: 0xec43826b,
    name: "School Capacity Chunk Size",
    type: ExemplarValueType.UInt32,
    desc: "How many people are represented by one unit in the coverage map",
  },
}
